
iot_http_flask_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008338  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  080084d8  080084d8  000184d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001e0  08008e7c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08008e7c  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8e3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb9  00000000  00000000  0002aaf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000778  00000000  00000000  0002d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001714d  00000000  00000000  0002d958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aef5  00000000  00000000  00044aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b7f  00000000  00000000  0004f99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e4  00000000  00000000  000d756c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084c0 	.word	0x080084c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080084c0 	.word	0x080084c0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b9aa 	b.w	8000f08 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f83c 	bl	8000c38 <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2lz>:
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	460d      	mov	r5, r1
 8000bd6:	f7ff ff99 	bl	8000b0c <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x1c>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	4629      	mov	r1, r5
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4620      	mov	r0, r4
 8000bea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fd0f 	bl	8000628 <__aeabi_dmul>
 8000c0a:	f7ff ffa7 	bl	8000b5c <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc90 	bl	8000534 <__aeabi_ui2d>
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f7ff fd06 	bl	8000628 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fb48 	bl	80002b8 <__aeabi_dsub>
 8000c28:	f7ff ff98 	bl	8000b5c <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f12:	f000 fc57 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f8d7 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 f985 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f1e:	f000 f95b 	bl	80011d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f22:	f000 f92f 	bl	8001184 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  nx_json *json = NULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  wifiModuleInit();
 8000f2a:	f004 f8b7 	bl	800509c <wifiModuleInit>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hWifiModule.rxBuffer, WIFI_MODULE_BUFFER_SIZE);
 8000f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f32:	495e      	ldr	r1, [pc, #376]	; (80010ac <main+0x1a0>)
 8000f34:	485e      	ldr	r0, [pc, #376]	; (80010b0 <main+0x1a4>)
 8000f36:	f002 f8a7 	bl	8003088 <HAL_UARTEx_ReceiveToIdle_DMA>
  {

	/**
	 * Module configuration task
	 */
	  if(hWifiModule.controlFlags.flag.configurationFase && hWifiModule.controlFlags.flag.configurationNotify)
 8000f3a:	4b5e      	ldr	r3, [pc, #376]	; (80010b4 <main+0x1a8>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d017      	beq.n	8000f78 <main+0x6c>
 8000f48:	4b5a      	ldr	r3, [pc, #360]	; (80010b4 <main+0x1a8>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d010      	beq.n	8000f78 <main+0x6c>
	  {
		  wifiModuleConfigSequence();
 8000f56:	f004 f8bf 	bl	80050d8 <wifiModuleConfigSequence>

		  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	4856      	ldr	r0, [pc, #344]	; (80010b8 <main+0x1ac>)
 8000f60:	f001 fb53 	bl	800260a <HAL_GPIO_TogglePin>

		  hWifiModule.controlFlags.flag.configurationNotify = DISABLE;
 8000f64:	4a53      	ldr	r2, [pc, #332]	; (80010b4 <main+0x1a8>)
 8000f66:	7813      	ldrb	r3, [r2, #0]
 8000f68:	f36f 03c3 	bfc	r3, #3, #1
 8000f6c:	7013      	strb	r3, [r2, #0]

		  hWifiModule.httpTimer = HAL_GetTick();
 8000f6e:	f000 fc8f 	bl	8001890 <HAL_GetTick>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a4f      	ldr	r2, [pc, #316]	; (80010b4 <main+0x1a8>)
 8000f76:	6093      	str	r3, [r2, #8]
	  }
	/**
	 * Make HTTP GET request periodically to obtain JSON string
	 */
	  if(0 == hWifiModule.controlFlags.flag.configurationFase && (HAL_GetTick() - hWifiModule.httpTimer > 1000))
 8000f78:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <main+0x1a8>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <main+0x9a>
 8000f86:	f000 fc83 	bl	8001890 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <main+0x1a8>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f96:	d906      	bls.n	8000fa6 <main+0x9a>
	  {
		  wifiModuleHttpGetRequest();
 8000f98:	f004 fa10 	bl	80053bc <wifiModuleHttpGetRequest>

		  hWifiModule.httpTimer = HAL_GetTick();
 8000f9c:	f000 fc78 	bl	8001890 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a44      	ldr	r2, [pc, #272]	; (80010b4 <main+0x1a8>)
 8000fa4:	6093      	str	r3, [r2, #8]
	  }
	  /**
	   *
	   */
	  if(hWifiModule.controlFlags.flag.httpGetNotify)
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <main+0x1a8>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d02a      	beq.n	800100a <main+0xfe>
	  {
		  uint8_t offset = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	70fb      	strb	r3, [r7, #3]
		  uint8_t value = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	70bb      	strb	r3, [r7, #2]
		  offset = strlen(AT_HTTP_RESPONSE_HEADER) + 12;
 8000fbc:	231b      	movs	r3, #27
 8000fbe:	70fb      	strb	r3, [r7, #3]

		  json = nx_json_parse_utf8((char*)(hWifiModule.rxBuffer + offset));
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	4a3a      	ldr	r2, [pc, #232]	; (80010ac <main+0x1a0>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f003 ffea 	bl	8004fa0 <nx_json_parse_utf8>
 8000fcc:	6078      	str	r0, [r7, #4]

		  value = nx_json_get(json, "Value")->text_value[0] - '0';
 8000fce:	493b      	ldr	r1, [pc, #236]	; (80010bc <main+0x1b0>)
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f004 f819 	bl	8005008 <nx_json_get>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	3b30      	subs	r3, #48	; 0x30
 8000fde:	70bb      	strb	r3, [r7, #2]

		  if(value)
 8000fe0:	78bb      	ldrb	r3, [r7, #2]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <main+0xe8>
		  {
			  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fec:	4832      	ldr	r0, [pc, #200]	; (80010b8 <main+0x1ac>)
 8000fee:	f001 faf3 	bl	80025d8 <HAL_GPIO_WritePin>
 8000ff2:	e005      	b.n	8001000 <main+0xf4>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffa:	482f      	ldr	r0, [pc, #188]	; (80010b8 <main+0x1ac>)
 8000ffc:	f001 faec 	bl	80025d8 <HAL_GPIO_WritePin>
		  }

		  hWifiModule.controlFlags.flag.httpGetNotify = DISABLE;
 8001000:	4a2c      	ldr	r2, [pc, #176]	; (80010b4 <main+0x1a8>)
 8001002:	7813      	ldrb	r3, [r2, #0]
 8001004:	f36f 1304 	bfc	r3, #4, #1
 8001008:	7013      	strb	r3, [r2, #0]
	  }

	/**
	 * UART transmission task. It works only when the UART TX buffer is filled
	 */
	  if(hWifiModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hWifiModule.txTimer > 1000))
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <main+0x1a8>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	b2db      	uxtb	r3, r3
 8001014:	2b00      	cmp	r3, #0
 8001016:	d019      	beq.n	800104c <main+0x140>
 8001018:	f000 fc3a 	bl	8001890 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <main+0x1a8>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001028:	d910      	bls.n	800104c <main+0x140>
	  {
		  HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hWifiModule.txBuffer, hWifiModule.txPacketSize);
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <main+0x1a8>)
 800102c:	885b      	ldrh	r3, [r3, #2]
 800102e:	461a      	mov	r2, r3
 8001030:	4923      	ldr	r1, [pc, #140]	; (80010c0 <main+0x1b4>)
 8001032:	481f      	ldr	r0, [pc, #124]	; (80010b0 <main+0x1a4>)
 8001034:	f001 ffaa 	bl	8002f8c <HAL_UART_Transmit_DMA>

		  hWifiModule.controlFlags.flag.packetToTransmit = DISABLE;
 8001038:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <main+0x1a8>)
 800103a:	7813      	ldrb	r3, [r2, #0]
 800103c:	f36f 0341 	bfc	r3, #1, #1
 8001040:	7013      	strb	r3, [r2, #0]

		  hWifiModule.txTimer = HAL_GetTick();
 8001042:	f000 fc25 	bl	8001890 <HAL_GetTick>
 8001046:	4603      	mov	r3, r0
 8001048:	4a1a      	ldr	r2, [pc, #104]	; (80010b4 <main+0x1a8>)
 800104a:	60d3      	str	r3, [r2, #12]
	  }
	/**
	 * UART RX task. After UART RX callback is received and the UART RX buffer is filled, this task is executed
	 */
	  if(hWifiModule.controlFlags.flag.packetReceived && (HAL_GetTick() - hWifiModule.rxTimer > 1000))
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <main+0x1a8>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f43f af6f 	beq.w	8000f3a <main+0x2e>
 800105c:	f000 fc18 	bl	8001890 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <main+0x1a8>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800106c:	f67f af65 	bls.w	8000f3a <main+0x2e>
	  {
		  hWifiModule.controlFlags.flag.packetReceived = DISABLE;
 8001070:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <main+0x1a8>)
 8001072:	7813      	ldrb	r3, [r2, #0]
 8001074:	f36f 0300 	bfc	r3, #0, #1
 8001078:	7013      	strb	r3, [r2, #0]

		  hWifiModule.rxTimer = HAL_GetTick();
 800107a:	f000 fc09 	bl	8001890 <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <main+0x1a8>)
 8001082:	6113      	str	r3, [r2, #16]
		  //Check if the received packet is a http response packet
		  if(0 == memcmp(hWifiModule.rxBuffer, AT_HTTP_RESPONSE_HEADER, AT_HTTP_RESPONSE_HEADER_SIZE))
 8001084:	220f      	movs	r2, #15
 8001086:	490f      	ldr	r1, [pc, #60]	; (80010c4 <main+0x1b8>)
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <main+0x1a0>)
 800108a:	f004 fa2f 	bl	80054ec <memcmp>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d105      	bne.n	80010a0 <main+0x194>
		  {
			  hWifiModule.controlFlags.flag.httpGetNotify = ENABLE;
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <main+0x1a8>)
 8001096:	7813      	ldrb	r3, [r2, #0]
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	7013      	strb	r3, [r2, #0]
 800109e:	e74c      	b.n	8000f3a <main+0x2e>
		  }
		  else
		  {
			  hWifiModule.controlFlags.flag.configurationNotify = ENABLE;
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <main+0x1a8>)
 80010a2:	7813      	ldrb	r3, [r2, #0]
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	7013      	strb	r3, [r2, #0]
	  if(hWifiModule.controlFlags.flag.configurationFase && hWifiModule.controlFlags.flag.configurationNotify)
 80010aa:	e746      	b.n	8000f3a <main+0x2e>
 80010ac:	20000448 	.word	0x20000448
 80010b0:	200001fc 	.word	0x200001fc
 80010b4:	20000308 	.word	0x20000308
 80010b8:	40020800 	.word	0x40020800
 80010bc:	080084d8 	.word	0x080084d8
 80010c0:	2000031c 	.word	0x2000031c
 80010c4:	080084e0 	.word	0x080084e0

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0320 	add.w	r3, r7, #32
 80010d2:	2230      	movs	r2, #48	; 0x30
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f004 fa26 	bl	8005528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <SystemClock_Config+0xb4>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <SystemClock_Config+0xb4>)
 80010f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <SystemClock_Config+0xb4>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <SystemClock_Config+0xb8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1b      	ldr	r2, [pc, #108]	; (8001180 <SystemClock_Config+0xb8>)
 8001112:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <SystemClock_Config+0xb8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001128:	2301      	movs	r3, #1
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112c:	2310      	movs	r3, #16
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fa81 	bl	8002640 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001144:	f000 f910 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fce4 	bl	8002b30 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800116e:	f000 f8fb 	bl	8001368 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART1_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 80011bc:	f001 fe98 	bl	8002ef0 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f000 f8cf 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001fc 	.word	0x200001fc
 80011d4:	40011000 	.word	0x40011000

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_DMA_Init+0x4c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <MX_DMA_Init+0x4c>)
 80011e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <MX_DMA_Init+0x4c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	203a      	movs	r0, #58	; 0x3a
 8001200:	f000 fc2d 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001204:	203a      	movs	r0, #58	; 0x3a
 8001206:	f000 fc46 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2046      	movs	r0, #70	; 0x46
 8001210:	f000 fc25 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001214:	2046      	movs	r0, #70	; 0x46
 8001216:	f000 fc3e 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 030c 	add.w	r3, r7, #12
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a30      	ldr	r2, [pc, #192]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b27      	ldr	r3, [pc, #156]	; (8001308 <MX_GPIO_Init+0xe0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <MX_GPIO_Init+0xe0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <MX_GPIO_Init+0xe0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_GPIO_Init+0xe4>)
 800129a:	f001 f99d 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	f244 01e0 	movw	r1, #16608	; 0x40e0
 80012a4:	481a      	ldr	r0, [pc, #104]	; (8001310 <MX_GPIO_Init+0xe8>)
 80012a6:	f001 f997 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80012aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <MX_GPIO_Init+0xe4>)
 80012c4:	f001 f804 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80012c8:	2301      	movs	r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4619      	mov	r1, r3
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <MX_GPIO_Init+0xec>)
 80012dc:	f000 fff8 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODULE_RESET_Pin LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 80012e0:	f244 03e0 	movw	r3, #16608	; 0x40e0
 80012e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_GPIO_Init+0xe8>)
 80012fa:	f000 ffe9 	bl	80022d0 <HAL_GPIO_Init>

}
 80012fe:	bf00      	nop
 8001300:	3720      	adds	r7, #32
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	40020800 	.word	0x40020800
 8001310:	40020400 	.word	0x40020400
 8001314:	40020000 	.word	0x40020000

08001318 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
	hWifiModule.controlFlags.flag.packetReceived = ENABLE;
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_UARTEx_RxEventCallback+0x40>)
 8001326:	7813      	ldrb	r3, [r2, #0]
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	7013      	strb	r3, [r2, #0]

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hWifiModule.rxBuffer, WIFI_MODULE_BUFFER_SIZE);
 800132e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001332:	490a      	ldr	r1, [pc, #40]	; (800135c <HAL_UARTEx_RxEventCallback+0x44>)
 8001334:	480a      	ldr	r0, [pc, #40]	; (8001360 <HAL_UARTEx_RxEventCallback+0x48>)
 8001336:	f001 fea7 	bl	8003088 <HAL_UARTEx_ReceiveToIdle_DMA>

	hWifiModule.rxPacketSize = Size;
 800133a:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_UARTEx_RxEventCallback+0x40>)
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	8093      	strh	r3, [r2, #4]

	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_UARTEx_RxEventCallback+0x4c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0208 	bic.w	r2, r2, #8
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000308 	.word	0x20000308
 800135c:	20000448 	.word	0x20000448
 8001360:	200001fc 	.word	0x200001fc
 8001364:	20000240 	.word	0x20000240

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001370:	e7fe      	b.n	8001370 <Error_Handler+0x8>
	...

08001374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_MspInit+0x4c>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001382:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_MspInit+0x4c>)
 8001384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001388:	6453      	str	r3, [r2, #68]	; 0x44
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_MspInit+0x4c>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_MspInit+0x4c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_MspInit+0x4c>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <HAL_UART_MspInit+0x150>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	f040 8091 	bne.w	800150a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_UART_MspInit+0x154>)
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	4a49      	ldr	r2, [pc, #292]	; (8001518 <HAL_UART_MspInit+0x154>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6453      	str	r3, [r2, #68]	; 0x44
 80013f8:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_UART_MspInit+0x154>)
 80013fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_UART_MspInit+0x154>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_UART_MspInit+0x154>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_UART_MspInit+0x154>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001420:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001432:	2307      	movs	r3, #7
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4837      	ldr	r0, [pc, #220]	; (800151c <HAL_UART_MspInit+0x158>)
 800143e:	f000 ff47 	bl	80022d0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001444:	4a37      	ldr	r2, [pc, #220]	; (8001524 <HAL_UART_MspInit+0x160>)
 8001446:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001448:	4b35      	ldr	r3, [pc, #212]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800144a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800144e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800145e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001462:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001482:	4827      	ldr	r0, [pc, #156]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001484:	f000 fb22 	bl	8001acc <HAL_DMA_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800148e:	f7ff ff6b 	bl	8001368 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a22      	ldr	r2, [pc, #136]	; (8001520 <HAL_UART_MspInit+0x15c>)
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_UART_MspInit+0x15c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014a0:	4a22      	ldr	r2, [pc, #136]	; (800152c <HAL_UART_MspInit+0x168>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014ac:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014ae:	2240      	movs	r2, #64	; 0x40
 80014b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014be:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014de:	4812      	ldr	r0, [pc, #72]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014e0:	f000 faf4 	bl	8001acc <HAL_DMA_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80014ea:	f7ff ff3d 	bl	8001368 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014f2:	635a      	str	r2, [r3, #52]	; 0x34
 80014f4:	4a0c      	ldr	r2, [pc, #48]	; (8001528 <HAL_UART_MspInit+0x164>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2025      	movs	r0, #37	; 0x25
 8001500:	f000 faad 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f000 fac6 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	; 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40011000 	.word	0x40011000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000
 8001520:	20000240 	.word	0x20000240
 8001524:	40026440 	.word	0x40026440
 8001528:	200002a0 	.word	0x200002a0
 800152c:	400264b8 	.word	0x400264b8

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f974 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <USART1_IRQHandler+0x10>)
 800158a:	f001 fde3 	bl	8003154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200001fc 	.word	0x200001fc

08001598 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <DMA2_Stream2_IRQHandler+0x10>)
 800159e:	f000 fc2d 	bl	8001dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000240 	.word	0x20000240

080015ac <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <DMA2_Stream7_IRQHandler+0x10>)
 80015b2:	f000 fc23 	bl	8001dfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200002a0 	.word	0x200002a0

080015c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
	return 1;
 80015c4:	2301      	movs	r3, #1
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015da:	f003 ff3b 	bl	8005454 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
	return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
	}

return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
	}
	return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	605a      	str	r2, [r3, #4]
	return 0;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_isatty>:

int _isatty(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	return 1;
 80016b6:	2301      	movs	r3, #1
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
	return 0;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e8:	4a14      	ldr	r2, [pc, #80]	; (800173c <_sbrk+0x5c>)
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <_sbrk+0x60>)
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f4:	4b13      	ldr	r3, [pc, #76]	; (8001744 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <_sbrk+0x64>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <_sbrk+0x68>)
 8001700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	429a      	cmp	r2, r3
 800170e:	d207      	bcs.n	8001720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001710:	f003 fea0 	bl	8005454 <__errno>
 8001714:	4603      	mov	r3, r0
 8001716:	220c      	movs	r2, #12
 8001718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	e009      	b.n	8001734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <_sbrk+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <_sbrk+0x64>)
 8001730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001732:	68fb      	ldr	r3, [r7, #12]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20020000 	.word	0x20020000
 8001740:	00000400 	.word	0x00000400
 8001744:	20000300 	.word	0x20000300
 8001748:	20000588 	.word	0x20000588

0800174c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <SystemInit+0x20>)
 8001752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001756:	4a05      	ldr	r2, [pc, #20]	; (800176c <SystemInit+0x20>)
 8001758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800175c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001774:	480d      	ldr	r0, [pc, #52]	; (80017ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001776:	490e      	ldr	r1, [pc, #56]	; (80017b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800178c:	4c0b      	ldr	r4, [pc, #44]	; (80017bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800179a:	f7ff ffd7 	bl	800174c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179e:	f003 fe71 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017a2:	f7ff fbb3 	bl	8000f0c <main>
  bx  lr    
 80017a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017b4:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 80017b8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017bc:	20000588 	.word	0x20000588

080017c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC_IRQHandler>
	...

080017c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c8:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <HAL_Init+0x40>)
 80017ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_Init+0x40>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <HAL_Init+0x40>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_Init+0x40>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ec:	2003      	movs	r0, #3
 80017ee:	f000 f92b 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f2:	200f      	movs	r0, #15
 80017f4:	f000 f808 	bl	8001808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f8:	f7ff fdbc 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40023c00 	.word	0x40023c00

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_InitTick+0x54>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x58>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f943 	bl	8001ab2 <HAL_SYSTICK_Config>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e00e      	b.n	8001854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d80a      	bhi.n	8001852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 f90b 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001848:	4a06      	ldr	r2, [pc, #24]	; (8001864 <HAL_InitTick+0x5c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	20000000 	.word	0x20000000
 8001860:	20000008 	.word	0x20000008
 8001864:	20000004 	.word	0x20000004

08001868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_IncTick+0x20>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_IncTick+0x24>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4413      	add	r3, r2
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_IncTick+0x24>)
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	20000304 	.word	0x20000304

08001890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_GetTick+0x14>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000304 	.word	0x20000304

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff3e 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff8e 	bl	800199c <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5d 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff31 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff feda 	bl	8001890 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e099      	b.n	8001c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b08:	e00f      	b.n	8001b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b0a:	f7ff fec1 	bl	8001890 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d908      	bls.n	8001b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2203      	movs	r2, #3
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e078      	b.n	8001c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e8      	bne.n	8001b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_DMA_Init+0x158>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a1b      	ldr	r3, [r3, #32]
 8001b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d107      	bne.n	8001b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0307 	bic.w	r3, r3, #7
 8001baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d117      	bne.n	8001bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fb01 	bl	80021d8 <DMA_CheckFifoParam>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d008      	beq.n	8001bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bea:	2301      	movs	r3, #1
 8001bec:	e016      	b.n	8001c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fab8 	bl	800216c <DMA_CalcBaseAndBitshift>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c04:	223f      	movs	r2, #63	; 0x3f
 8001c06:	409a      	lsls	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	f010803f 	.word	0xf010803f

08001c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_DMA_Start_IT+0x26>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e040      	b.n	8001cd0 <HAL_DMA_Start_IT+0xa8>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d12f      	bne.n	8001cc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2202      	movs	r2, #2
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fa4a 	bl	8002110 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	223f      	movs	r2, #63	; 0x3f
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0216 	orr.w	r2, r2, #22
 8001c96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	e005      	b.n	8001cce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ce6:	f7ff fdd3 	bl	8001890 <HAL_GetTick>
 8001cea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d008      	beq.n	8001d0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e052      	b.n	8001db0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0216 	bic.w	r2, r2, #22
 8001d18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d103      	bne.n	8001d3a <HAL_DMA_Abort+0x62>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0208 	bic.w	r2, r2, #8
 8001d48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0201 	bic.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5a:	e013      	b.n	8001d84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5c:	f7ff fd98 	bl	8001890 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d90c      	bls.n	8001d84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2203      	movs	r2, #3
 8001d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e015      	b.n	8001db0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e4      	bne.n	8001d5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	223f      	movs	r2, #63	; 0x3f
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d004      	beq.n	8001dd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00c      	b.n	8001df0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2205      	movs	r2, #5
 8001dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e08:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_DMA_IRQHandler+0x248>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a8e      	ldr	r2, [pc, #568]	; (8002048 <HAL_DMA_IRQHandler+0x24c>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0a9b      	lsrs	r3, r3, #10
 8001e14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2208      	movs	r2, #8
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01a      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d013      	beq.n	8001e68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0204 	bic.w	r2, r2, #4
 8001e4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2208      	movs	r2, #8
 8001e56:	409a      	lsls	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e60:	f043 0201 	orr.w	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d012      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e96:	f043 0202 	orr.w	r2, r3, #2
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	409a      	lsls	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d012      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	f043 0204 	orr.w	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2210      	movs	r2, #16
 8001eda:	409a      	lsls	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d043      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d03c      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	2210      	movs	r2, #16
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d018      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d108      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d024      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
 8001f2a:	e01f      	b.n	8001f6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
 8001f3c:	e016      	b.n	8001f6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d107      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0208 	bic.w	r2, r2, #8
 8001f5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	2220      	movs	r2, #32
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f000 808f 	beq.w	800209c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 8087 	beq.w	800209c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	2220      	movs	r2, #32
 8001f94:	409a      	lsls	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b05      	cmp	r3, #5
 8001fa4:	d136      	bne.n	8002014 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0216 	bic.w	r2, r2, #22
 8001fb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d103      	bne.n	8001fd6 <HAL_DMA_IRQHandler+0x1da>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0208 	bic.w	r2, r2, #8
 8001fe4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fea:	223f      	movs	r2, #63	; 0x3f
 8001fec:	409a      	lsls	r2, r3
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07e      	beq.n	8002108 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
        }
        return;
 8002012:	e079      	b.n	8002108 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01d      	beq.n	800205e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
 8002040:	e02c      	b.n	800209c <HAL_DMA_IRQHandler+0x2a0>
 8002042:	bf00      	nop
 8002044:	20000000 	.word	0x20000000
 8002048:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e01e      	b.n	800209c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10f      	bne.n	800208c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0210 	bic.w	r2, r2, #16
 800207a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d032      	beq.n	800210a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d022      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2205      	movs	r2, #5
 80020b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3301      	adds	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d307      	bcc.n	80020e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f2      	bne.n	80020c8 <HAL_DMA_IRQHandler+0x2cc>
 80020e2:	e000      	b.n	80020e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
 8002106:	e000      	b.n	800210a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002108:	bf00      	nop
    }
  }
}
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800212c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d108      	bne.n	8002150 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800214e:	e007      	b.n	8002160 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
}
 8002160:	bf00      	nop
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3b10      	subs	r3, #16
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <DMA_CalcBaseAndBitshift+0x64>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	091b      	lsrs	r3, r3, #4
 8002184:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d909      	bls.n	80021ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021a2:	f023 0303 	bic.w	r3, r3, #3
 80021a6:	1d1a      	adds	r2, r3, #4
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	659a      	str	r2, [r3, #88]	; 0x58
 80021ac:	e007      	b.n	80021be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	aaaaaaab 	.word	0xaaaaaaab
 80021d4:	08008840 	.word	0x08008840

080021d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d11f      	bne.n	8002232 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d856      	bhi.n	80022a6 <DMA_CheckFifoParam+0xce>
 80021f8:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <DMA_CheckFifoParam+0x28>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002211 	.word	0x08002211
 8002204:	08002223 	.word	0x08002223
 8002208:	08002211 	.word	0x08002211
 800220c:	080022a7 	.word	0x080022a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d046      	beq.n	80022aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002220:	e043      	b.n	80022aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800222a:	d140      	bne.n	80022ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002230:	e03d      	b.n	80022ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223a:	d121      	bne.n	8002280 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d837      	bhi.n	80022b2 <DMA_CheckFifoParam+0xda>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <DMA_CheckFifoParam+0x70>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002259 	.word	0x08002259
 800224c:	0800225f 	.word	0x0800225f
 8002250:	08002259 	.word	0x08002259
 8002254:	08002271 	.word	0x08002271
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      break;
 800225c:	e030      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d025      	beq.n	80022b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800226e:	e022      	b.n	80022b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002278:	d11f      	bne.n	80022ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800227e:	e01c      	b.n	80022ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d903      	bls.n	800228e <DMA_CheckFifoParam+0xb6>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d003      	beq.n	8002294 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800228c:	e018      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
      break;
 8002292:	e015      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	e00b      	b.n	80022be <DMA_CheckFifoParam+0xe6>
      break;
 80022a6:	bf00      	nop
 80022a8:	e00a      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e008      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      break;
 80022ae:	bf00      	nop
 80022b0:	e006      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e004      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e002      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ba:	bf00      	nop
 80022bc:	e000      	b.n	80022c0 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
    }
  } 
  
  return status; 
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e159      	b.n	80025a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8148 	bne.w	800259a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d005      	beq.n	8002322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	2b02      	cmp	r3, #2
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a2 	beq.w	800259a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a56      	ldr	r2, [pc, #344]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002472:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x202>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a48      	ldr	r2, [pc, #288]	; (80025c4 <HAL_GPIO_Init+0x2f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x1fe>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <HAL_GPIO_Init+0x2f8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x1fa>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a46      	ldr	r2, [pc, #280]	; (80025cc <HAL_GPIO_Init+0x2fc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x1f6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <HAL_GPIO_Init+0x300>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x1f2>
 80024be:	2304      	movs	r3, #4
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_GPIO_Init+0x304>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x304>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f aea2 	bls.w	80022ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43d9      	mvns	r1, r3
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	400b      	ands	r3, r1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e267      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d075      	beq.n	800274a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	4b88      	ldr	r3, [pc, #544]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d00c      	beq.n	8002684 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266a:	4b85      	ldr	r3, [pc, #532]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002672:	2b08      	cmp	r3, #8
 8002674:	d112      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002676:	4b82      	ldr	r3, [pc, #520]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b7e      	ldr	r3, [pc, #504]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d05b      	beq.n	8002748 <HAL_RCC_OscConfig+0x108>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d157      	bne.n	8002748 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e242      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x74>
 80026a6:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x98>
 80026be:	4b70      	ldr	r3, [pc, #448]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6f      	ldr	r2, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b6d      	ldr	r3, [pc, #436]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0xb0>
 80026d8:	4b69      	ldr	r3, [pc, #420]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a68      	ldr	r2, [pc, #416]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b66      	ldr	r3, [pc, #408]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a65      	ldr	r2, [pc, #404]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f8ca 	bl	8001890 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f8c6 	bl	8001890 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e207      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b5b      	ldr	r3, [pc, #364]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0xc0>
 800271e:	e014      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7ff f8b6 	bl	8001890 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002728:	f7ff f8b2 	bl	8001890 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1f3      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273a:	4b51      	ldr	r3, [pc, #324]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0xe8>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d063      	beq.n	800281e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	4b4a      	ldr	r3, [pc, #296]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276a:	2b08      	cmp	r3, #8
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	4b44      	ldr	r3, [pc, #272]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x152>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1c7      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4937      	ldr	r1, [pc, #220]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e03a      	b.n	800281e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b34      	ldr	r3, [pc, #208]	; (8002884 <HAL_RCC_OscConfig+0x244>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7ff f86b 	bl	8001890 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7ff f867 	bl	8001890 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1a8      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4b2b      	ldr	r3, [pc, #172]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b28      	ldr	r3, [pc, #160]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4925      	ldr	r1, [pc, #148]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_OscConfig+0x244>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff f84a 	bl	8001890 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff f846 	bl	8001890 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e187      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d036      	beq.n	8002898 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_OscConfig+0x248>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7ff f82a 	bl	8001890 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002840:	f7ff f826 	bl	8001890 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e167      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_OscConfig+0x240>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x200>
 800285e:	e01b      	b.n	8002898 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_OscConfig+0x248>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff f813 	bl	8001890 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	e00e      	b.n	800288c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286e:	f7ff f80f 	bl	8001890 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d907      	bls.n	800288c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e150      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002880:	40023800 	.word	0x40023800
 8002884:	42470000 	.word	0x42470000
 8002888:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b88      	ldr	r3, [pc, #544]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ea      	bne.n	800286e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8097 	beq.w	80029d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b81      	ldr	r3, [pc, #516]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b7d      	ldr	r3, [pc, #500]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a7c      	ldr	r2, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b7a      	ldr	r3, [pc, #488]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b77      	ldr	r3, [pc, #476]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b74      	ldr	r3, [pc, #464]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a73      	ldr	r2, [pc, #460]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe ffcf 	bl	8001890 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe ffcb 	bl	8001890 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e10c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b6a      	ldr	r3, [pc, #424]	; (8002ab4 <HAL_RCC_OscConfig+0x474>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x2ea>
 800291c:	4b64      	ldr	r3, [pc, #400]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a63      	ldr	r2, [pc, #396]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x324>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x30c>
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a5e      	ldr	r2, [pc, #376]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
 800293e:	4b5c      	ldr	r3, [pc, #368]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0x324>
 800294c:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002950:	4a57      	ldr	r2, [pc, #348]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	; 0x70
 8002958:	4b55      	ldr	r3, [pc, #340]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a54      	ldr	r2, [pc, #336]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe ff90 	bl	8001890 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe ff8c 	bl	8001890 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0cb      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	4b49      	ldr	r3, [pc, #292]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ee      	beq.n	8002974 <HAL_RCC_OscConfig+0x334>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7fe ff7a 	bl	8001890 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe ff76 	bl	8001890 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0b5      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	4b3e      	ldr	r3, [pc, #248]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ee      	bne.n	80029a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b39      	ldr	r3, [pc, #228]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a38      	ldr	r2, [pc, #224]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80a1 	beq.w	8002b20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029de:	4b34      	ldr	r3, [pc, #208]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d05c      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d141      	bne.n	8002a76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <HAL_RCC_OscConfig+0x478>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f8:	f7fe ff4a 	bl	8001890 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe ff46 	bl	8001890 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e087      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	491b      	ldr	r1, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x478>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe ff1f 	bl	8001890 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe ff1b 	bl	8001890 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e05c      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	4b11      	ldr	r3, [pc, #68]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x416>
 8002a74:	e054      	b.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <HAL_RCC_OscConfig+0x478>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe ff08 	bl	8001890 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe ff04 	bl	8001890 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e045      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_OscConfig+0x470>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x444>
 8002aa2:	e03d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e038      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x4ec>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d028      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d121      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d11a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aec:	4013      	ands	r3, r2
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002af2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	3b01      	subs	r3, #1
 8002b06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023800 	.word	0x40023800

08002b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0cc      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b68      	ldr	r3, [pc, #416]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d90c      	bls.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b65      	ldr	r3, [pc, #404]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b63      	ldr	r3, [pc, #396]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0b8      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d020      	beq.n	8002bba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b84:	4b59      	ldr	r3, [pc, #356]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	4a58      	ldr	r2, [pc, #352]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4a52      	ldr	r2, [pc, #328]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba8:	4b50      	ldr	r3, [pc, #320]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	494d      	ldr	r1, [pc, #308]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d044      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	4b47      	ldr	r3, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d119      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e07f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d003      	beq.n	8002bee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e06f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3b      	ldr	r3, [pc, #236]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e067      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4934      	ldr	r1, [pc, #208]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c20:	f7fe fe36 	bl	8001890 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fe32 	bl	8001890 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e04f      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d20c      	bcs.n	8002c78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b20      	ldr	r3, [pc, #128]	; (8002ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e032      	b.n	8002cde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	4916      	ldr	r1, [pc, #88]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca2:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	490e      	ldr	r1, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb6:	f000 f821 	bl	8002cfc <HAL_RCC_GetSysClockFreq>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	490a      	ldr	r1, [pc, #40]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8002cc8:	5ccb      	ldrb	r3, [r1, r3]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a09      	ldr	r2, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fd96 	bl	8001808 <HAL_InitTick>

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	40023c00 	.word	0x40023c00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	08008828 	.word	0x08008828
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d00:	b090      	sub	sp, #64	; 0x40
 8002d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34
 8002d08:	2300      	movs	r3, #0
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d14:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 030c 	and.w	r3, r3, #12
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d00d      	beq.n	8002d3c <HAL_RCC_GetSysClockFreq+0x40>
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	f200 80a1 	bhi.w	8002e68 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x34>
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2e:	e09b      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002d34:	e09b      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d36:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d3a:	e098      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d3c:	4b4f      	ldr	r3, [pc, #316]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d52:	4b4a      	ldr	r3, [pc, #296]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	2200      	movs	r2, #0
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d64:	2100      	movs	r1, #0
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d68:	fb03 f201 	mul.w	r2, r3, r1
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	fb00 f303 	mul.w	r3, r0, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	4a43      	ldr	r2, [pc, #268]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d76:	fba0 1202 	umull	r1, r2, r0, r2
 8002d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d7c:	460a      	mov	r2, r1
 8002d7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d82:	4413      	add	r3, r2
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	61fa      	str	r2, [r7, #28]
 8002d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d96:	f7fd ff01 	bl	8000b9c <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da2:	e053      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da4:	4b35      	ldr	r3, [pc, #212]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	2200      	movs	r2, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	617a      	str	r2, [r7, #20]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002db6:	f04f 0b00 	mov.w	fp, #0
 8002dba:	4652      	mov	r2, sl
 8002dbc:	465b      	mov	r3, fp
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	ebb2 080a 	subs.w	r8, r2, sl
 8002dd6:	eb63 090b 	sbc.w	r9, r3, fp
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002de6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002dea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002dee:	ebb2 0408 	subs.w	r4, r2, r8
 8002df2:	eb63 0509 	sbc.w	r5, r3, r9
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	00eb      	lsls	r3, r5, #3
 8002e00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e04:	00e2      	lsls	r2, r4, #3
 8002e06:	4614      	mov	r4, r2
 8002e08:	461d      	mov	r5, r3
 8002e0a:	eb14 030a 	adds.w	r3, r4, sl
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	eb45 030b 	adc.w	r3, r5, fp
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e22:	4629      	mov	r1, r5
 8002e24:	028b      	lsls	r3, r1, #10
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	028a      	lsls	r2, r1, #10
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	2200      	movs	r2, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	60fa      	str	r2, [r7, #12]
 8002e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e40:	f7fd feac 	bl	8000b9c <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	0c1b      	lsrs	r3, r3, #16
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	3301      	adds	r3, #1
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e66:	e002      	b.n	8002e6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3740      	adds	r7, #64	; 0x40
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	00f42400 	.word	0x00f42400
 8002e84:	017d7840 	.word	0x017d7840

08002e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000

08002ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ea4:	f7ff fff0 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0a9b      	lsrs	r3, r3, #10
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4903      	ldr	r1, [pc, #12]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb6:	5ccb      	ldrb	r3, [r1, r3]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08008838 	.word	0x08008838

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ecc:	f7ff ffdc 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0b5b      	lsrs	r3, r3, #13
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4903      	ldr	r1, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ede:	5ccb      	ldrb	r3, [r1, r3]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08008838 	.word	0x08008838

08002ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e03f      	b.n	8002f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe fa54 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 ff81 	bl	8003e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08c      	sub	sp, #48	; 0x30
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d165      	bne.n	8003072 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Transmit_DMA+0x26>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e05e      	b.n	8003074 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit_DMA+0x38>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e057      	b.n	8003074 <HAL_UART_Transmit_DMA+0xe8>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	88fa      	ldrh	r2, [r7, #6]
 8002fdc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2221      	movs	r2, #33	; 0x21
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_UART_Transmit_DMA+0xf0>)
 8002ff2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <HAL_UART_Transmit_DMA+0xf4>)
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_UART_Transmit_DMA+0xf8>)
 8003002:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003008:	2200      	movs	r2, #0
 800300a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	6819      	ldr	r1, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3304      	adds	r3, #4
 8003020:	461a      	mov	r2, r3
 8003022:	88fb      	ldrh	r3, [r7, #6]
 8003024:	f7fe fe00 	bl	8001c28 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003030:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	617b      	str	r3, [r7, #20]
   return(result);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003050:	62bb      	str	r3, [r7, #40]	; 0x28
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305a:	627a      	str	r2, [r7, #36]	; 0x24
 800305c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003062:	e841 2300 	strex	r3, r2, [r1]
 8003066:	61fb      	str	r3, [r7, #28]
   return(result);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1e5      	bne.n	800303a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
  }
}
 8003074:	4618      	mov	r0, r3
 8003076:	3730      	adds	r7, #48	; 0x30
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	080036d5 	.word	0x080036d5
 8003080:	0800376f 	.word	0x0800376f
 8003084:	080038e7 	.word	0x080038e7

08003088 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	; 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b20      	cmp	r3, #32
 80030a0:	d152      	bne.n	8003148 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e04b      	b.n	800314a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80030bc:	2302      	movs	r3, #2
 80030be:	e044      	b.n	800314a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	461a      	mov	r2, r3
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fc51 	bl	800397c <UART_Start_Receive_DMA>
 80030da:	4603      	mov	r3, r0
 80030dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80030e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d12c      	bne.n	8003142 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d125      	bne.n	800313c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	330c      	adds	r3, #12
 800310c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	617b      	str	r3, [r7, #20]
   return(result);
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f043 0310 	orr.w	r3, r3, #16
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003126:	627a      	str	r2, [r7, #36]	; 0x24
 8003128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312a:	6a39      	ldr	r1, [r7, #32]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	61fb      	str	r3, [r7, #28]
   return(result);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e5      	bne.n	8003106 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800313a:	e002      	b.n	8003142 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8003142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003146:	e000      	b.n	800314a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8003148:	2302      	movs	r3, #2
  }
}
 800314a:	4618      	mov	r0, r3
 800314c:	3730      	adds	r7, #48	; 0x30
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
	...

08003154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0ba      	sub	sp, #232	; 0xe8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800319a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <HAL_UART_IRQHandler+0x66>
 80031a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fd87 	bl	8003cc6 <UART_Receive_IT>
      return;
 80031b8:	e256      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 80de 	beq.w	8003380 <HAL_UART_IRQHandler+0x22c>
 80031c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d106      	bne.n	80031de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80d1 	beq.w	8003380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00b      	beq.n	8003202 <HAL_UART_IRQHandler+0xae>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00b      	beq.n	8003226 <HAL_UART_IRQHandler+0xd2>
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0202 	orr.w	r2, r3, #2
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0xf6>
 8003232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f043 0204 	orr.w	r2, r3, #4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800324a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d011      	beq.n	800327a <HAL_UART_IRQHandler+0x126>
 8003256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 81ed 	beq.w	800365e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_UART_IRQHandler+0x14e>
 8003290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fd12 	bl	8003cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b40      	cmp	r3, #64	; 0x40
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <HAL_UART_IRQHandler+0x17a>
 80032c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04f      	beq.n	800336e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fc1a 	bl	8003b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d141      	bne.n	8003366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3314      	adds	r3, #20
 800330a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800330e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800331a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1d9      	bne.n	80032e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	2b00      	cmp	r3, #0
 8003334:	d013      	beq.n	800335e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4a7d      	ldr	r2, [pc, #500]	; (8003530 <HAL_UART_IRQHandler+0x3dc>)
 800333c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fd38 	bl	8001db8 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d016      	beq.n	800337c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003358:	4610      	mov	r0, r2
 800335a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e00e      	b.n	800337c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9ae 	bl	80036c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	e00a      	b.n	800337c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9aa 	bl	80036c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	e006      	b.n	800337c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9a6 	bl	80036c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800337a:	e170      	b.n	800365e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337c:	bf00      	nop
    return;
 800337e:	e16e      	b.n	800365e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	2b01      	cmp	r3, #1
 8003386:	f040 814a 	bne.w	800361e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 8143 	beq.w	800361e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 813c 	beq.w	800361e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a6:	2300      	movs	r3, #0
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	f040 80b4 	bne.w	8003534 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 8140 	beq.w	8003662 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f080 8139 	bcs.w	8003662 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	f000 8088 	beq.w	8003516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	330c      	adds	r3, #12
 800340c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800341c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800343e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800344a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1d9      	bne.n	8003406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3314      	adds	r3, #20
 8003458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	3314      	adds	r3, #20
 8003472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800347a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800347e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e1      	bne.n	8003452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003498:	e853 3f00 	ldrex	r3, [r3]
 800349c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800349e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3314      	adds	r3, #20
 80034ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034ba:	e841 2300 	strex	r3, r2, [r1]
 80034be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1e3      	bne.n	800348e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	330c      	adds	r3, #12
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e6:	f023 0310 	bic.w	r3, r3, #16
 80034ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80034f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80034fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e3      	bne.n	80034d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe fbe1 	bl	8001cd8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800351e:	b29b      	uxth	r3, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	b29b      	uxth	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fef6 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800352c:	e099      	b.n	8003662 <HAL_UART_IRQHandler+0x50e>
 800352e:	bf00      	nop
 8003530:	08003bcf 	.word	0x08003bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800353c:	b29b      	uxth	r3, r3
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 808b 	beq.w	8003666 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8086 	beq.w	8003666 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800357e:	647a      	str	r2, [r7, #68]	; 0x44
 8003580:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003586:	e841 2300 	strex	r3, r2, [r1]
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800358c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e3      	bne.n	800355a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3314      	adds	r3, #20
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	e853 3f00 	ldrex	r3, [r3]
 80035a0:	623b      	str	r3, [r7, #32]
   return(result);
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3314      	adds	r3, #20
 80035b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035b6:	633a      	str	r2, [r7, #48]	; 0x30
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e3      	bne.n	8003592 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	330c      	adds	r3, #12
 80035de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0310 	bic.w	r3, r3, #16
 80035ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035fc:	61fa      	str	r2, [r7, #28]
 80035fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	69b9      	ldr	r1, [r7, #24]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	e841 2300 	strex	r3, r2, [r1]
 8003608:	617b      	str	r3, [r7, #20]
   return(result);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1e3      	bne.n	80035d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fe7e 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800361c:	e023      	b.n	8003666 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800361e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_UART_IRQHandler+0x4ea>
 800362a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 fadd 	bl	8003bf6 <UART_Transmit_IT>
    return;
 800363c:	e014      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800363e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00e      	beq.n	8003668 <HAL_UART_IRQHandler+0x514>
 800364a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d008      	beq.n	8003668 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fb1d 	bl	8003c96 <UART_EndTransmit_IT>
    return;
 800365c:	e004      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
    return;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
      return;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_UART_IRQHandler+0x514>
      return;
 8003666:	bf00      	nop
  }
}
 8003668:	37e8      	adds	r7, #232	; 0xe8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop

08003670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b090      	sub	sp, #64	; 0x40
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d137      	bne.n	8003760 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80036f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f2:	2200      	movs	r2, #0
 80036f4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80036f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3314      	adds	r3, #20
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	623b      	str	r3, [r7, #32]
   return(result);
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3314      	adds	r3, #20
 8003714:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003716:	633a      	str	r2, [r7, #48]	; 0x30
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	330c      	adds	r3, #12
 8003730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	60fb      	str	r3, [r7, #12]
   return(result);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374a:	61fa      	str	r2, [r7, #28]
 800374c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374e:	69b9      	ldr	r1, [r7, #24]
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	e841 2300 	strex	r3, r2, [r1]
 8003756:	617b      	str	r3, [r7, #20]
   return(result);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e5      	bne.n	800372a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800375e:	e002      	b.n	8003766 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003760:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003762:	f7ff ff85 	bl	8003670 <HAL_UART_TxCpltCallback>
}
 8003766:	bf00      	nop
 8003768:	3740      	adds	r7, #64	; 0x40
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff ff81 	bl	8003684 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b09c      	sub	sp, #112	; 0x70
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d172      	bne.n	800388c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80037a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a8:	2200      	movs	r2, #0
 80037aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80037ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3314      	adds	r3, #20
 80037e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	667b      	str	r3, [r7, #100]	; 0x64
 80037f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3314      	adds	r3, #20
 80037fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003800:	647a      	str	r2, [r7, #68]	; 0x44
 8003802:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003808:	e841 2300 	strex	r3, r2, [r1]
 800380c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800380e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e5      	bne.n	80037e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3314      	adds	r3, #20
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	e853 3f00 	ldrex	r3, [r3]
 8003822:	623b      	str	r3, [r7, #32]
   return(result);
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382a:	663b      	str	r3, [r7, #96]	; 0x60
 800382c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3314      	adds	r3, #20
 8003832:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003834:	633a      	str	r2, [r7, #48]	; 0x30
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800383a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800383c:	e841 2300 	strex	r3, r2, [r1]
 8003840:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1e5      	bne.n	8003814 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	2b01      	cmp	r3, #1
 8003856:	d119      	bne.n	800388c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	330c      	adds	r3, #12
 800385e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	60fb      	str	r3, [r7, #12]
   return(result);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f023 0310 	bic.w	r3, r3, #16
 800386e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	330c      	adds	r3, #12
 8003876:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003878:	61fa      	str	r2, [r7, #28]
 800387a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	617b      	str	r3, [r7, #20]
   return(result);
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003898:	4619      	mov	r1, r3
 800389a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800389c:	f7fd fd3c 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038a0:	e002      	b.n	80038a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80038a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80038a4:	f7ff fef8 	bl	8003698 <HAL_UART_RxCpltCallback>
}
 80038a8:	bf00      	nop
 80038aa:	3770      	adds	r7, #112	; 0x70
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d108      	bne.n	80038d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4619      	mov	r1, r3
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7fd fd21 	bl	8001318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038d6:	e002      	b.n	80038de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f7ff fee7 	bl	80036ac <HAL_UART_RxHalfCpltCallback>
}
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003902:	2b80      	cmp	r3, #128	; 0x80
 8003904:	bf0c      	ite	eq
 8003906:	2301      	moveq	r3, #1
 8003908:	2300      	movne	r3, #0
 800390a:	b2db      	uxtb	r3, r3
 800390c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b21      	cmp	r3, #33	; 0x21
 8003918:	d108      	bne.n	800392c <UART_DMAError+0x46>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003926:	68b8      	ldr	r0, [r7, #8]
 8003928:	f000 f8c6 	bl	8003ab8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b40      	cmp	r3, #64	; 0x40
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b22      	cmp	r3, #34	; 0x22
 800394c:	d108      	bne.n	8003960 <UART_DMAError+0x7a>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800395a:	68b8      	ldr	r0, [r7, #8]
 800395c:	f000 f8d4 	bl	8003b08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	f043 0210 	orr.w	r2, r3, #16
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800396c:	68b8      	ldr	r0, [r7, #8]
 800396e:	f7ff fea7 	bl	80036c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b098      	sub	sp, #96	; 0x60
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	88fa      	ldrh	r2, [r7, #6]
 8003994:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2222      	movs	r2, #34	; 0x22
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	4a40      	ldr	r2, [pc, #256]	; (8003aac <UART_Start_Receive_DMA+0x130>)
 80039aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b0:	4a3f      	ldr	r2, [pc, #252]	; (8003ab0 <UART_Start_Receive_DMA+0x134>)
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b8:	4a3e      	ldr	r2, [pc, #248]	; (8003ab4 <UART_Start_Receive_DMA+0x138>)
 80039ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	2200      	movs	r2, #0
 80039c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80039c4:	f107 0308 	add.w	r3, r7, #8
 80039c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	f7fe f924 	bl	8001c28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80039e0:	2300      	movs	r3, #0
 80039e2:	613b      	str	r3, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d019      	beq.n	8003a3a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003a28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1e5      	bne.n	8003a06 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3314      	adds	r3, #20
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	657b      	str	r3, [r7, #84]	; 0x54
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3314      	adds	r3, #20
 8003a58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e5      	bne.n	8003a3a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3314      	adds	r3, #20
 8003a74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a84:	653b      	str	r3, [r7, #80]	; 0x50
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3314      	adds	r3, #20
 8003a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a8e:	627a      	str	r2, [r7, #36]	; 0x24
 8003a90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6a39      	ldr	r1, [r7, #32]
 8003a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3760      	adds	r7, #96	; 0x60
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	0800378b 	.word	0x0800378b
 8003ab0:	080038b1 	.word	0x080038b1
 8003ab4:	080038e7 	.word	0x080038e7

08003ab8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	330c      	adds	r3, #12
 8003ade:	69fa      	ldr	r2, [r7, #28]
 8003ae0:	61ba      	str	r2, [r7, #24]
 8003ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae4:	6979      	ldr	r1, [r7, #20]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	e841 2300 	strex	r3, r2, [r1]
 8003aec:	613b      	str	r3, [r7, #16]
   return(result);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e5      	bne.n	8003ac0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003afc:	bf00      	nop
 8003afe:	3724      	adds	r7, #36	; 0x24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b095      	sub	sp, #84	; 0x54
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	330c      	adds	r3, #12
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1a:	e853 3f00 	ldrex	r3, [r3]
 8003b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	330c      	adds	r3, #12
 8003b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b30:	643a      	str	r2, [r7, #64]	; 0x40
 8003b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e5      	bne.n	8003b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f023 0301 	bic.w	r3, r3, #1
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3314      	adds	r3, #20
 8003b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d119      	bne.n	8003bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	330c      	adds	r3, #12
 8003b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0310 	bic.w	r3, r3, #16
 8003b96:	647b      	str	r3, [r7, #68]	; 0x44
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ba0:	61ba      	str	r2, [r7, #24]
 8003ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	6979      	ldr	r1, [r7, #20]
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	613b      	str	r3, [r7, #16]
   return(result);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bc2:	bf00      	nop
 8003bc4:	3754      	adds	r7, #84	; 0x54
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f7ff fd69 	bl	80036c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b21      	cmp	r3, #33	; 0x21
 8003c08:	d13e      	bne.n	8003c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d114      	bne.n	8003c3e <UART_Transmit_IT+0x48>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d110      	bne.n	8003c3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	1c9a      	adds	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	621a      	str	r2, [r3, #32]
 8003c3c:	e008      	b.n	8003c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6211      	str	r1, [r2, #32]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10f      	bne.n	8003c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fcda 	bl	8003670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b08c      	sub	sp, #48	; 0x30
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b22      	cmp	r3, #34	; 0x22
 8003cd8:	f040 80ab 	bne.w	8003e32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce4:	d117      	bne.n	8003d16 <UART_Receive_IT+0x50>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d113      	bne.n	8003d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	629a      	str	r2, [r3, #40]	; 0x28
 8003d14:	e026      	b.n	8003d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d007      	beq.n	8003d3a <UART_Receive_IT+0x74>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <UART_Receive_IT+0x82>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e008      	b.n	8003d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4619      	mov	r1, r3
 8003d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d15a      	bne.n	8003e2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0220 	bic.w	r2, r2, #32
 8003d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695a      	ldr	r2, [r3, #20]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0201 	bic.w	r2, r2, #1
 8003da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d135      	bne.n	8003e24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f023 0310 	bic.w	r3, r3, #16
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	330c      	adds	r3, #12
 8003ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dde:	623a      	str	r2, [r7, #32]
 8003de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	69f9      	ldr	r1, [r7, #28]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e5      	bne.n	8003dbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d10a      	bne.n	8003e16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7fd fa7b 	bl	8001318 <HAL_UARTEx_RxEventCallback>
 8003e22:	e002      	b.n	8003e2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7ff fc37 	bl	8003698 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e002      	b.n	8003e34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3730      	adds	r7, #48	; 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e40:	b0c0      	sub	sp, #256	; 0x100
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	68d9      	ldr	r1, [r3, #12]
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	ea40 0301 	orr.w	r3, r0, r1
 8003e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	689a      	ldr	r2, [r3, #8]
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e94:	f021 010c 	bic.w	r1, r1, #12
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	6999      	ldr	r1, [r3, #24]
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	ea40 0301 	orr.w	r3, r0, r1
 8003ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4b8f      	ldr	r3, [pc, #572]	; (8004108 <UART_SetConfig+0x2cc>)
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d005      	beq.n	8003edc <UART_SetConfig+0xa0>
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b8d      	ldr	r3, [pc, #564]	; (800410c <UART_SetConfig+0x2d0>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d104      	bne.n	8003ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003edc:	f7fe fff4 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 8003ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ee4:	e003      	b.n	8003eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ee6:	f7fe ffdb 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 8003eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef8:	f040 810c 	bne.w	8004114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f0e:	4622      	mov	r2, r4
 8003f10:	462b      	mov	r3, r5
 8003f12:	1891      	adds	r1, r2, r2
 8003f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f16:	415b      	adcs	r3, r3
 8003f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f1e:	4621      	mov	r1, r4
 8003f20:	eb12 0801 	adds.w	r8, r2, r1
 8003f24:	4629      	mov	r1, r5
 8003f26:	eb43 0901 	adc.w	r9, r3, r1
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3e:	4690      	mov	r8, r2
 8003f40:	4699      	mov	r9, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	eb18 0303 	adds.w	r3, r8, r3
 8003f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	eb49 0303 	adc.w	r3, r9, r3
 8003f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	18db      	adds	r3, r3, r3
 8003f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f70:	4613      	mov	r3, r2
 8003f72:	eb42 0303 	adc.w	r3, r2, r3
 8003f76:	657b      	str	r3, [r7, #84]	; 0x54
 8003f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f80:	f7fc fe0c 	bl	8000b9c <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4b61      	ldr	r3, [pc, #388]	; (8004110 <UART_SetConfig+0x2d4>)
 8003f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	011c      	lsls	r4, r3, #4
 8003f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	1891      	adds	r1, r2, r2
 8003faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fac:	415b      	adcs	r3, r3
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fba:	4649      	mov	r1, r9
 8003fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd4:	4692      	mov	sl, r2
 8003fd6:	469b      	mov	fp, r3
 8003fd8:	4643      	mov	r3, r8
 8003fda:	eb1a 0303 	adds.w	r3, sl, r3
 8003fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8003fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004000:	460b      	mov	r3, r1
 8004002:	18db      	adds	r3, r3, r3
 8004004:	643b      	str	r3, [r7, #64]	; 0x40
 8004006:	4613      	mov	r3, r2
 8004008:	eb42 0303 	adc.w	r3, r2, r3
 800400c:	647b      	str	r3, [r7, #68]	; 0x44
 800400e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004016:	f7fc fdc1 	bl	8000b9c <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4611      	mov	r1, r2
 8004020:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <UART_SetConfig+0x2d4>)
 8004022:	fba3 2301 	umull	r2, r3, r3, r1
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2264      	movs	r2, #100	; 0x64
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	1acb      	subs	r3, r1, r3
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <UART_SetConfig+0x2d4>)
 8004038:	fba3 2302 	umull	r2, r3, r3, r2
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	005b      	lsls	r3, r3, #1
 8004040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004044:	441c      	add	r4, r3
 8004046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800404a:	2200      	movs	r2, #0
 800404c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004058:	4642      	mov	r2, r8
 800405a:	464b      	mov	r3, r9
 800405c:	1891      	adds	r1, r2, r2
 800405e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004060:	415b      	adcs	r3, r3
 8004062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004068:	4641      	mov	r1, r8
 800406a:	1851      	adds	r1, r2, r1
 800406c:	6339      	str	r1, [r7, #48]	; 0x30
 800406e:	4649      	mov	r1, r9
 8004070:	414b      	adcs	r3, r1
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	f04f 0300 	mov.w	r3, #0
 800407c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004080:	4659      	mov	r1, fp
 8004082:	00cb      	lsls	r3, r1, #3
 8004084:	4651      	mov	r1, sl
 8004086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800408a:	4651      	mov	r1, sl
 800408c:	00ca      	lsls	r2, r1, #3
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
 8004092:	4603      	mov	r3, r0
 8004094:	4642      	mov	r2, r8
 8004096:	189b      	adds	r3, r3, r2
 8004098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800409c:	464b      	mov	r3, r9
 800409e:	460a      	mov	r2, r1
 80040a0:	eb42 0303 	adc.w	r3, r2, r3
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040bc:	460b      	mov	r3, r1
 80040be:	18db      	adds	r3, r3, r3
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040c2:	4613      	mov	r3, r2
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040d2:	f7fc fd63 	bl	8000b9c <__aeabi_uldivmod>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <UART_SetConfig+0x2d4>)
 80040dc:	fba3 1302 	umull	r1, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	2164      	movs	r1, #100	; 0x64
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	3332      	adds	r3, #50	; 0x32
 80040ee:	4a08      	ldr	r2, [pc, #32]	; (8004110 <UART_SetConfig+0x2d4>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4422      	add	r2, r4
 8004102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004104:	e105      	b.n	8004312 <UART_SetConfig+0x4d6>
 8004106:	bf00      	nop
 8004108:	40011000 	.word	0x40011000
 800410c:	40011400 	.word	0x40011400
 8004110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004118:	2200      	movs	r2, #0
 800411a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800411e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004126:	4642      	mov	r2, r8
 8004128:	464b      	mov	r3, r9
 800412a:	1891      	adds	r1, r2, r2
 800412c:	6239      	str	r1, [r7, #32]
 800412e:	415b      	adcs	r3, r3
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
 8004132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004136:	4641      	mov	r1, r8
 8004138:	1854      	adds	r4, r2, r1
 800413a:	4649      	mov	r1, r9
 800413c:	eb43 0501 	adc.w	r5, r3, r1
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	00eb      	lsls	r3, r5, #3
 800414a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414e:	00e2      	lsls	r2, r4, #3
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4643      	mov	r3, r8
 8004156:	18e3      	adds	r3, r4, r3
 8004158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800415c:	464b      	mov	r3, r9
 800415e:	eb45 0303 	adc.w	r3, r5, r3
 8004162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004182:	4629      	mov	r1, r5
 8004184:	008b      	lsls	r3, r1, #2
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418c:	4621      	mov	r1, r4
 800418e:	008a      	lsls	r2, r1, #2
 8004190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004194:	f7fc fd02 	bl	8000b9c <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4b60      	ldr	r3, [pc, #384]	; (8004320 <UART_SetConfig+0x4e4>)
 800419e:	fba3 2302 	umull	r2, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	011c      	lsls	r4, r3, #4
 80041a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041aa:	2200      	movs	r2, #0
 80041ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041b8:	4642      	mov	r2, r8
 80041ba:	464b      	mov	r3, r9
 80041bc:	1891      	adds	r1, r2, r2
 80041be:	61b9      	str	r1, [r7, #24]
 80041c0:	415b      	adcs	r3, r3
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c8:	4641      	mov	r1, r8
 80041ca:	1851      	adds	r1, r2, r1
 80041cc:	6139      	str	r1, [r7, #16]
 80041ce:	4649      	mov	r1, r9
 80041d0:	414b      	adcs	r3, r1
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041e0:	4659      	mov	r1, fp
 80041e2:	00cb      	lsls	r3, r1, #3
 80041e4:	4651      	mov	r1, sl
 80041e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041ea:	4651      	mov	r1, sl
 80041ec:	00ca      	lsls	r2, r1, #3
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	4603      	mov	r3, r0
 80041f4:	4642      	mov	r2, r8
 80041f6:	189b      	adds	r3, r3, r2
 80041f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041fc:	464b      	mov	r3, r9
 80041fe:	460a      	mov	r2, r1
 8004200:	eb42 0303 	adc.w	r3, r2, r3
 8004204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	67bb      	str	r3, [r7, #120]	; 0x78
 8004212:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004220:	4649      	mov	r1, r9
 8004222:	008b      	lsls	r3, r1, #2
 8004224:	4641      	mov	r1, r8
 8004226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800422a:	4641      	mov	r1, r8
 800422c:	008a      	lsls	r2, r1, #2
 800422e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004232:	f7fc fcb3 	bl	8000b9c <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4b39      	ldr	r3, [pc, #228]	; (8004320 <UART_SetConfig+0x4e4>)
 800423c:	fba3 1302 	umull	r1, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	2164      	movs	r1, #100	; 0x64
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	3332      	adds	r3, #50	; 0x32
 800424e:	4a34      	ldr	r2, [pc, #208]	; (8004320 <UART_SetConfig+0x4e4>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425a:	441c      	add	r4, r3
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	673b      	str	r3, [r7, #112]	; 0x70
 8004264:	677a      	str	r2, [r7, #116]	; 0x74
 8004266:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800426a:	4642      	mov	r2, r8
 800426c:	464b      	mov	r3, r9
 800426e:	1891      	adds	r1, r2, r2
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	415b      	adcs	r3, r3
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800427a:	4641      	mov	r1, r8
 800427c:	1851      	adds	r1, r2, r1
 800427e:	6039      	str	r1, [r7, #0]
 8004280:	4649      	mov	r1, r9
 8004282:	414b      	adcs	r3, r1
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004292:	4659      	mov	r1, fp
 8004294:	00cb      	lsls	r3, r1, #3
 8004296:	4651      	mov	r1, sl
 8004298:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800429c:	4651      	mov	r1, sl
 800429e:	00ca      	lsls	r2, r1, #3
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	4603      	mov	r3, r0
 80042a6:	4642      	mov	r2, r8
 80042a8:	189b      	adds	r3, r3, r2
 80042aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ac:	464b      	mov	r3, r9
 80042ae:	460a      	mov	r2, r1
 80042b0:	eb42 0303 	adc.w	r3, r2, r3
 80042b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	663b      	str	r3, [r7, #96]	; 0x60
 80042c0:	667a      	str	r2, [r7, #100]	; 0x64
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042ce:	4649      	mov	r1, r9
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	4641      	mov	r1, r8
 80042d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d8:	4641      	mov	r1, r8
 80042da:	008a      	lsls	r2, r1, #2
 80042dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042e0:	f7fc fc5c 	bl	8000b9c <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <UART_SetConfig+0x4e4>)
 80042ea:	fba3 1302 	umull	r1, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2164      	movs	r1, #100	; 0x64
 80042f2:	fb01 f303 	mul.w	r3, r1, r3
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	; 0x32
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <UART_SetConfig+0x4e4>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 020f 	and.w	r2, r3, #15
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4422      	add	r2, r4
 8004310:	609a      	str	r2, [r3, #8]
}
 8004312:	bf00      	nop
 8004314:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004318:	46bd      	mov	sp, r7
 800431a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800431e:	bf00      	nop
 8004320:	51eb851f 	.word	0x51eb851f

08004324 <create_json>:
#endif

#define IS_WHITESPACE(c) ((unsigned char)(c)<=(unsigned char)' ')

static nx_json *create_json(nx_json_type type, const char *key, nx_json *parent)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	73fb      	strb	r3, [r7, #15]
	nx_json *js = NX_JSON_CALLOC();
 8004332:	2120      	movs	r1, #32
 8004334:	2001      	movs	r0, #1
 8004336:	f001 f885 	bl	8005444 <calloc>
 800433a:	4603      	mov	r3, r0
 800433c:	617b      	str	r3, [r7, #20]
	assert(js);
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <create_json+0x2c>
 8004344:	4b14      	ldr	r3, [pc, #80]	; (8004398 <create_json+0x74>)
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <create_json+0x78>)
 8004348:	2135      	movs	r1, #53	; 0x35
 800434a:	4815      	ldr	r0, [pc, #84]	; (80043a0 <create_json+0x7c>)
 800434c:	f001 f85c 	bl	8005408 <__assert_func>
	js->type = type;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	701a      	strb	r2, [r3, #0]
	js->key = key;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	605a      	str	r2, [r3, #4]
	if (!parent->children.last)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <create_json+0x50>
	{
		parent->children.first = parent->children.last = js;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	611a      	str	r2, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	e006      	b.n	8004382 <create_json+0x5e>
	}
	else
	{
		parent->children.last->next = js;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	619a      	str	r2, [r3, #24]
		parent->children.last = js;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	611a      	str	r2, [r3, #16]
	}
	parent->children.length++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	609a      	str	r2, [r3, #8]
	return js;
 800438c:	697b      	ldr	r3, [r7, #20]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	080084f0 	.word	0x080084f0
 800439c:	08008848 	.word	0x08008848
 80043a0:	080084f4 	.word	0x080084f4

080043a4 <unicode_to_utf8>:



static int unicode_to_utf8(unsigned int codepoint, char *p, char **endp)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
	// code from http://stackoverflow.com/a/4609989/697313
	if (codepoint < 0x80) *p++ = codepoint;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b7f      	cmp	r3, #127	; 0x7f
 80043b4:	d806      	bhi.n	80043c4 <unicode_to_utf8+0x20>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	60ba      	str	r2, [r7, #8]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	e078      	b.n	80044b6 <unicode_to_utf8+0x112>
	else if (codepoint < 0x800) *p++ = 192 + codepoint / 64, *p++ = 128 + codepoint % 64;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ca:	d214      	bcs.n	80043f6 <unicode_to_utf8+0x52>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1c59      	adds	r1, r3, #1
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	3a40      	subs	r2, #64	; 0x40
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1c59      	adds	r1, r3, #1
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	3a80      	subs	r2, #128	; 0x80
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e05f      	b.n	80044b6 <unicode_to_utf8+0x112>
	else if (codepoint - 0xd800u < 0x800) return 0; // surrogate must have been treated earlier
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f5a3 4358 	sub.w	r3, r3, #55296	; 0xd800
 80043fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004400:	d201      	bcs.n	8004406 <unicode_to_utf8+0x62>
 8004402:	2300      	movs	r3, #0
 8004404:	e05b      	b.n	80044be <unicode_to_utf8+0x11a>
	else if (codepoint < 0x10000)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d220      	bcs.n	8004450 <unicode_to_utf8+0xac>
		*p++ = 224 + codepoint / 4096, *p++ = 128 + codepoint / 64 % 64, *p++ = 128 + codepoint % 64;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	0b1b      	lsrs	r3, r3, #12
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	1c59      	adds	r1, r3, #1
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	3a20      	subs	r2, #32
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	099b      	lsrs	r3, r3, #6
 8004424:	b2db      	uxtb	r3, r3
 8004426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442a:	b2da      	uxtb	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	3a80      	subs	r2, #128	; 0x80
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	3a80      	subs	r2, #128	; 0x80
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e032      	b.n	80044b6 <unicode_to_utf8+0x112>
	else if (codepoint < 0x110000)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8004456:	d22c      	bcs.n	80044b2 <unicode_to_utf8+0x10e>
		*p++ = 240 + codepoint / 262144, *p++ = 128 + codepoint / 4096 % 64, *p++ = 128 + codepoint / 64 % 64, *p++ =
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	0c9b      	lsrs	r3, r3, #18
 800445c:	b2da      	uxtb	r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	3a10      	subs	r2, #16
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	0b1b      	lsrs	r3, r3, #12
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004474:	b2da      	uxtb	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	1c59      	adds	r1, r3, #1
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	3a80      	subs	r2, #128	; 0x80
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	1c59      	adds	r1, r3, #1
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	3a80      	subs	r2, #128	; 0x80
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]
				128 + codepoint % 64;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a2:	b2da      	uxtb	r2, r3
		*p++ = 240 + codepoint / 262144, *p++ = 128 + codepoint / 4096 % 64, *p++ = 128 + codepoint / 64 % 64, *p++ =
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	1c59      	adds	r1, r3, #1
 80044a8:	60b9      	str	r1, [r7, #8]
				128 + codepoint % 64;
 80044aa:	3a80      	subs	r2, #128	; 0x80
 80044ac:	b2d2      	uxtb	r2, r2
		*p++ = 240 + codepoint / 262144, *p++ = 128 + codepoint / 4096 % 64, *p++ = 128 + codepoint / 64 % 64, *p++ =
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e001      	b.n	80044b6 <unicode_to_utf8+0x112>
	else return 0; // error
 80044b2:	2300      	movs	r3, #0
 80044b4:	e003      	b.n	80044be <unicode_to_utf8+0x11a>
	*endp = p;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68ba      	ldr	r2, [r7, #8]
 80044ba:	601a      	str	r2, [r3, #0]
	return 1;
 80044bc:	2301      	movs	r3, #1
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <hex_val>:

nx_json_unicode_encoder nx_json_unicode_to_utf8 = unicode_to_utf8;

static inline int hex_val(char c) {
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9') return c - '0';
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	2b2f      	cmp	r3, #47	; 0x2f
 80044d8:	d905      	bls.n	80044e6 <hex_val+0x1c>
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	2b39      	cmp	r3, #57	; 0x39
 80044de:	d802      	bhi.n	80044e6 <hex_val+0x1c>
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	3b30      	subs	r3, #48	; 0x30
 80044e4:	e013      	b.n	800450e <hex_val+0x44>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	2b60      	cmp	r3, #96	; 0x60
 80044ea:	d905      	bls.n	80044f8 <hex_val+0x2e>
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	2b66      	cmp	r3, #102	; 0x66
 80044f0:	d802      	bhi.n	80044f8 <hex_val+0x2e>
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	3b57      	subs	r3, #87	; 0x57
 80044f6:	e00a      	b.n	800450e <hex_val+0x44>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 80044f8:	79fb      	ldrb	r3, [r7, #7]
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d905      	bls.n	800450a <hex_val+0x40>
 80044fe:	79fb      	ldrb	r3, [r7, #7]
 8004500:	2b46      	cmp	r3, #70	; 0x46
 8004502:	d802      	bhi.n	800450a <hex_val+0x40>
 8004504:	79fb      	ldrb	r3, [r7, #7]
 8004506:	3b37      	subs	r3, #55	; 0x37
 8004508:	e001      	b.n	800450e <hex_val+0x44>
	return -1;
 800450a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <unescape_string>:

static char *unescape_string(char *s, char **end, nx_json_unicode_encoder encoder)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08e      	sub	sp, #56	; 0x38
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
	char *p = s;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
	char *d = s;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	613b      	str	r3, [r7, #16]
	char c;
	while ((c = *p++)) {
 8004530:	e166      	b.n	8004800 <unescape_string+0x2e4>
		if (c == '"') {
 8004532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004536:	2b22      	cmp	r3, #34	; 0x22
 8004538:	d107      	bne.n	800454a <unescape_string+0x2e>
			*d = '\0';
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
			*end = p;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004544:	601a      	str	r2, [r3, #0]
			return s;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	e16e      	b.n	8004828 <unescape_string+0x30c>
		} else if (c == '\\') {
 800454a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800454e:	2b5c      	cmp	r3, #92	; 0x5c
 8004550:	f040 8150 	bne.w	80047f4 <unescape_string+0x2d8>
			switch (*p) {
 8004554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b75      	cmp	r3, #117	; 0x75
 800455a:	f300 8143 	bgt.w	80047e4 <unescape_string+0x2c8>
 800455e:	2b5c      	cmp	r3, #92	; 0x5c
 8004560:	da04      	bge.n	800456c <unescape_string+0x50>
 8004562:	2b22      	cmp	r3, #34	; 0x22
 8004564:	d03e      	beq.n	80045e4 <unescape_string+0xc8>
 8004566:	2b2f      	cmp	r3, #47	; 0x2f
 8004568:	d03c      	beq.n	80045e4 <unescape_string+0xc8>
 800456a:	e13b      	b.n	80047e4 <unescape_string+0x2c8>
 800456c:	3b5c      	subs	r3, #92	; 0x5c
 800456e:	2b19      	cmp	r3, #25
 8004570:	f200 8138 	bhi.w	80047e4 <unescape_string+0x2c8>
 8004574:	a201      	add	r2, pc, #4	; (adr r2, 800457c <unescape_string+0x60>)
 8004576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457a:	bf00      	nop
 800457c:	080045e5 	.word	0x080045e5
 8004580:	080047e5 	.word	0x080047e5
 8004584:	080047e5 	.word	0x080047e5
 8004588:	080047e5 	.word	0x080047e5
 800458c:	080047e5 	.word	0x080047e5
 8004590:	080047e5 	.word	0x080047e5
 8004594:	080045f7 	.word	0x080045f7
 8004598:	080047e5 	.word	0x080047e5
 800459c:	080047e5 	.word	0x080047e5
 80045a0:	080047e5 	.word	0x080047e5
 80045a4:	08004609 	.word	0x08004609
 80045a8:	080047e5 	.word	0x080047e5
 80045ac:	080047e5 	.word	0x080047e5
 80045b0:	080047e5 	.word	0x080047e5
 80045b4:	080047e5 	.word	0x080047e5
 80045b8:	080047e5 	.word	0x080047e5
 80045bc:	080047e5 	.word	0x080047e5
 80045c0:	080047e5 	.word	0x080047e5
 80045c4:	0800461b 	.word	0x0800461b
 80045c8:	080047e5 	.word	0x080047e5
 80045cc:	080047e5 	.word	0x080047e5
 80045d0:	080047e5 	.word	0x080047e5
 80045d4:	0800462d 	.word	0x0800462d
 80045d8:	080047e5 	.word	0x080047e5
 80045dc:	0800463f 	.word	0x0800463f
 80045e0:	08004651 	.word	0x08004651
			case '\\':
			case '/':
			case '"':
				*d++ = *p++;
 80045e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e6:	1c53      	adds	r3, r2, #1
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1c59      	adds	r1, r3, #1
 80045ee:	6139      	str	r1, [r7, #16]
 80045f0:	7812      	ldrb	r2, [r2, #0]
 80045f2:	701a      	strb	r2, [r3, #0]
				break;
 80045f4:	e104      	b.n	8004800 <unescape_string+0x2e4>
			case 'b':
				*d++ = '\b';
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	613a      	str	r2, [r7, #16]
 80045fc:	2208      	movs	r2, #8
 80045fe:	701a      	strb	r2, [r3, #0]
				p++;
 8004600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004602:	3301      	adds	r3, #1
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8004606:	e0fb      	b.n	8004800 <unescape_string+0x2e4>
			case 'f':
				*d++ = '\f';
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	613a      	str	r2, [r7, #16]
 800460e:	220c      	movs	r2, #12
 8004610:	701a      	strb	r2, [r3, #0]
				p++;
 8004612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004614:	3301      	adds	r3, #1
 8004616:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 8004618:	e0f2      	b.n	8004800 <unescape_string+0x2e4>
			case 'n':
				*d++ = '\n';
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	613a      	str	r2, [r7, #16]
 8004620:	220a      	movs	r2, #10
 8004622:	701a      	strb	r2, [r3, #0]
				p++;
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	3301      	adds	r3, #1
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 800462a:	e0e9      	b.n	8004800 <unescape_string+0x2e4>
			case 'r':
				*d++ = '\r';
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	613a      	str	r2, [r7, #16]
 8004632:	220d      	movs	r2, #13
 8004634:	701a      	strb	r2, [r3, #0]
				p++;
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	3301      	adds	r3, #1
 800463a:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 800463c:	e0e0      	b.n	8004800 <unescape_string+0x2e4>
			case 't':
				*d++ = '\t';
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	613a      	str	r2, [r7, #16]
 8004644:	2209      	movs	r2, #9
 8004646:	701a      	strb	r2, [r3, #0]
				p++;
 8004648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464a:	3301      	adds	r3, #1
 800464c:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 800464e:	e0d7      	b.n	8004800 <unescape_string+0x2e4>
			case 'u': // unicode
				if (!encoder) {
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <unescape_string+0x148>
					// leave untouched
					*d++ = c;
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	613a      	str	r2, [r7, #16]
 800465c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004660:	701a      	strb	r2, [r3, #0]
					break;
 8004662:	e0cd      	b.n	8004800 <unescape_string+0x2e4>
				}
				char *ps = p - 1;
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	3b01      	subs	r3, #1
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
				int h1, h2, h3, h4;
				if ((h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 || (h3 = hex_val (p[3])) < 0 ||
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	3301      	adds	r3, #1
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ff2a 	bl	80044ca <hex_val>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	2b00      	cmp	r3, #0
 800467c:	db1d      	blt.n	80046ba <unescape_string+0x19e>
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	3302      	adds	r3, #2
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff20 	bl	80044ca <hex_val>
 800468a:	6238      	str	r0, [r7, #32]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	2b00      	cmp	r3, #0
 8004690:	db13      	blt.n	80046ba <unescape_string+0x19e>
 8004692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004694:	3303      	adds	r3, #3
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff16 	bl	80044ca <hex_val>
 800469e:	61f8      	str	r0, [r7, #28]
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	db09      	blt.n	80046ba <unescape_string+0x19e>
					(h4 = hex_val (p[4])) < 0) {
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	3304      	adds	r3, #4
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff0c 	bl	80044ca <hex_val>
 80046b2:	61b8      	str	r0, [r7, #24]
				if ((h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 || (h3 = hex_val (p[3])) < 0 ||
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da0a      	bge.n	80046d0 <unescape_string+0x1b4>
					NX_JSON_REPORT_ERROR("invalid unicode escape", p - 1);
 80046ba:	4b5d      	ldr	r3, [pc, #372]	; (8004830 <unescape_string+0x314>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68d8      	ldr	r0, [r3, #12]
 80046c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c2:	3b01      	subs	r3, #1
 80046c4:	228f      	movs	r2, #143	; 0x8f
 80046c6:	495b      	ldr	r1, [pc, #364]	; (8004834 <unescape_string+0x318>)
 80046c8:	f000 feca 	bl	8005460 <fiprintf>
					return 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e0ab      	b.n	8004828 <unescape_string+0x30c>
				}
				unsigned int codepoint = h1 << 12 | h2 << 8 | h3 << 4 | h4;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	031a      	lsls	r2, r3, #12
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	431a      	orrs	r2, r3
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	431a      	orrs	r2, r3
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	633b      	str	r3, [r7, #48]	; 0x30
				if ((codepoint & 0xfc00) == 0xd800) { // high surrogate; need one more unicode to succeed
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 80046ec:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80046f0:	d161      	bne.n	80047b6 <unescape_string+0x29a>
					p += 6;
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	3306      	adds	r3, #6
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
					if (p[-1] != '\\' || *p != 'u' || (h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 ||
 80046f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fa:	3b01      	subs	r3, #1
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b5c      	cmp	r3, #92	; 0x5c
 8004700:	d12b      	bne.n	800475a <unescape_string+0x23e>
 8004702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	2b75      	cmp	r3, #117	; 0x75
 8004708:	d127      	bne.n	800475a <unescape_string+0x23e>
 800470a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800470c:	3301      	adds	r3, #1
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff feda 	bl	80044ca <hex_val>
 8004716:	6278      	str	r0, [r7, #36]	; 0x24
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	db1d      	blt.n	800475a <unescape_string+0x23e>
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	3302      	adds	r3, #2
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fed0 	bl	80044ca <hex_val>
 800472a:	6238      	str	r0, [r7, #32]
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	2b00      	cmp	r3, #0
 8004730:	db13      	blt.n	800475a <unescape_string+0x23e>
						(h3 = hex_val (p[3])) < 0 || (h4 = hex_val (p[4])) < 0) {
 8004732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004734:	3303      	adds	r3, #3
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fec6 	bl	80044ca <hex_val>
 800473e:	61f8      	str	r0, [r7, #28]
					if (p[-1] != '\\' || *p != 'u' || (h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 ||
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2b00      	cmp	r3, #0
 8004744:	db09      	blt.n	800475a <unescape_string+0x23e>
						(h3 = hex_val (p[3])) < 0 || (h4 = hex_val (p[4])) < 0) {
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004748:	3304      	adds	r3, #4
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff febc 	bl	80044ca <hex_val>
 8004752:	61b8      	str	r0, [r7, #24]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	da09      	bge.n	800476e <unescape_string+0x252>
						NX_JSON_REPORT_ERROR("invalid unicode surrogate", ps);
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <unescape_string+0x314>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68d8      	ldr	r0, [r3, #12]
 8004760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004762:	2297      	movs	r2, #151	; 0x97
 8004764:	4934      	ldr	r1, [pc, #208]	; (8004838 <unescape_string+0x31c>)
 8004766:	f000 fe7b 	bl	8005460 <fiprintf>
						return 0;
 800476a:	2300      	movs	r3, #0
 800476c:	e05c      	b.n	8004828 <unescape_string+0x30c>
					}
					unsigned int codepoint2 = h1 << 12 | h2 << 8 | h3 << 4 | h4;
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	031a      	lsls	r2, r3, #12
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	431a      	orrs	r2, r3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	431a      	orrs	r2, r3
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
					if ((codepoint2 & 0xfc00) != 0xdc00) {
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f403 437c 	and.w	r3, r3, #64512	; 0xfc00
 800478a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800478e:	d009      	beq.n	80047a4 <unescape_string+0x288>
						NX_JSON_REPORT_ERROR("invalid unicode surrogate", ps);
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <unescape_string+0x314>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68d8      	ldr	r0, [r3, #12]
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	229c      	movs	r2, #156	; 0x9c
 800479a:	4927      	ldr	r1, [pc, #156]	; (8004838 <unescape_string+0x31c>)
 800479c:	f000 fe60 	bl	8005460 <fiprintf>
						return 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e041      	b.n	8004828 <unescape_string+0x30c>
					}
					codepoint = 0x10000 + ((codepoint - 0xd800) << 10) + (codepoint2 - 0xdc00);
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	f5a3 4358 	sub.w	r3, r3, #55296	; 0xd800
 80047aa:	029a      	lsls	r2, r3, #10
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80047b4:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (!encoder (codepoint, d, &d)) {
 80047b6:	6939      	ldr	r1, [r7, #16]
 80047b8:	f107 0210 	add.w	r2, r7, #16
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047c0:	4798      	blx	r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <unescape_string+0x2c0>
					NX_JSON_REPORT_ERROR("invalid codepoint", ps);
 80047c8:	4b19      	ldr	r3, [pc, #100]	; (8004830 <unescape_string+0x314>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68d8      	ldr	r0, [r3, #12]
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	22a2      	movs	r2, #162	; 0xa2
 80047d2:	491a      	ldr	r1, [pc, #104]	; (800483c <unescape_string+0x320>)
 80047d4:	f000 fe44 	bl	8005460 <fiprintf>
					return 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	e025      	b.n	8004828 <unescape_string+0x30c>
				}
				p += 5;
 80047dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047de:	3305      	adds	r3, #5
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
				break;
 80047e2:	e00d      	b.n	8004800 <unescape_string+0x2e4>
			default:
				// leave untouched
				*d++ = c;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	613a      	str	r2, [r7, #16]
 80047ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80047ee:	701a      	strb	r2, [r3, #0]
				break;
 80047f0:	bf00      	nop
 80047f2:	e005      	b.n	8004800 <unescape_string+0x2e4>
			}
		} else {
			*d++ = c;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	613a      	str	r2, [r7, #16]
 80047fa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80047fe:	701a      	strb	r2, [r3, #0]
	while ((c = *p++)) {
 8004800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	637a      	str	r2, [r7, #52]	; 0x34
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800480c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004810:	2b00      	cmp	r3, #0
 8004812:	f47f ae8e 	bne.w	8004532 <unescape_string+0x16>
		}
	}
	NX_JSON_REPORT_ERROR("no closing quote for string", s);
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <unescape_string+0x314>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68d8      	ldr	r0, [r3, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	22b0      	movs	r2, #176	; 0xb0
 8004820:	4907      	ldr	r1, [pc, #28]	; (8004840 <unescape_string+0x324>)
 8004822:	f000 fe1d 	bl	8005460 <fiprintf>
	return 0;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3738      	adds	r7, #56	; 0x38
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	2000000c 	.word	0x2000000c
 8004834:	08008508 	.word	0x08008508
 8004838:	08008540 	.word	0x08008540
 800483c:	0800857c 	.word	0x0800857c
 8004840:	080085b0 	.word	0x080085b0

08004844 <skip_block_comment>:

static char *skip_block_comment(char *p) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	// assume p[-2]=='/' && p[-1]=='*'
	char *ps = p - 2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	3b02      	subs	r3, #2
 8004850:	60fb      	str	r3, [r7, #12]
	if (!*p) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <skip_block_comment+0x2a>
		NX_JSON_REPORT_ERROR("endless comment", ps);
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <skip_block_comment+0x6c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68d8      	ldr	r0, [r3, #12]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	22b8      	movs	r2, #184	; 0xb8
 8004864:	4913      	ldr	r1, [pc, #76]	; (80048b4 <skip_block_comment+0x70>)
 8004866:	f000 fdfb 	bl	8005460 <fiprintf>
		return 0;
 800486a:	2300      	movs	r3, #0
 800486c:	e01c      	b.n	80048a8 <skip_block_comment+0x64>
	}
	REPEAT:
 800486e:	bf00      	nop
	p = strchr (p + 1, '/');
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3301      	adds	r3, #1
 8004874:	212f      	movs	r1, #47	; 0x2f
 8004876:	4618      	mov	r0, r3
 8004878:	f001 fa52 	bl	8005d20 <strchr>
 800487c:	6078      	str	r0, [r7, #4]
	if (!p) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <skip_block_comment+0x54>
		NX_JSON_REPORT_ERROR("endless comment", ps);
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <skip_block_comment+0x6c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68d8      	ldr	r0, [r3, #12]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	22be      	movs	r2, #190	; 0xbe
 800488e:	4909      	ldr	r1, [pc, #36]	; (80048b4 <skip_block_comment+0x70>)
 8004890:	f000 fde6 	bl	8005460 <fiprintf>
		return 0;
 8004894:	2300      	movs	r3, #0
 8004896:	e007      	b.n	80048a8 <skip_block_comment+0x64>
	}
	if (p[-1] != '*') goto REPEAT;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d000      	beq.n	80048a4 <skip_block_comment+0x60>
 80048a2:	e7e5      	b.n	8004870 <skip_block_comment+0x2c>
	return p + 1;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3301      	adds	r3, #1
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	2000000c 	.word	0x2000000c
 80048b4:	080085ec 	.word	0x080085ec

080048b8 <parse_key>:

static char *parse_key(const char **key, char *p, nx_json_unicode_encoder encoder) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
	// on '}' return with *p=='}'
	char c;
	while ((c = *p++)) {
 80048c4:	e083      	b.n	80049ce <parse_key+0x116>
		if (c == '"') {
 80048c6:	7dfb      	ldrb	r3, [r7, #23]
 80048c8:	2b22      	cmp	r3, #34	; 0x22
 80048ca:	d12b      	bne.n	8004924 <parse_key+0x6c>
			*key = unescape_string (p, &p, encoder);
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f107 0108 	add.w	r1, r7, #8
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff fe21 	bl	800451c <unescape_string>
 80048da:	4602      	mov	r2, r0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]
			if (!*key) return 0; // propagate error
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d104      	bne.n	80048f2 <parse_key+0x3a>
 80048e8:	2300      	movs	r3, #0
 80048ea:	e083      	b.n	80049f4 <parse_key+0x13c>
			while (*p && IS_WHITESPACE(*p)) p++;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <parse_key+0x4a>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d9f4      	bls.n	80048ec <parse_key+0x34>
			if (*p == ':') return p + 1;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b3a      	cmp	r3, #58	; 0x3a
 8004908:	d102      	bne.n	8004910 <parse_key+0x58>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	3301      	adds	r3, #1
 800490e:	e071      	b.n	80049f4 <parse_key+0x13c>
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8004910:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <parse_key+0x144>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68d8      	ldr	r0, [r3, #12]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	22ce      	movs	r2, #206	; 0xce
 800491a:	4939      	ldr	r1, [pc, #228]	; (8004a00 <parse_key+0x148>)
 800491c:	f000 fda0 	bl	8005460 <fiprintf>
			return 0;
 8004920:	2300      	movs	r3, #0
 8004922:	e067      	b.n	80049f4 <parse_key+0x13c>
		} else if (IS_WHITESPACE(c) || c == ',') {
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b20      	cmp	r3, #32
 8004928:	d951      	bls.n	80049ce <parse_key+0x116>
 800492a:	7dfb      	ldrb	r3, [r7, #23]
 800492c:	2b2c      	cmp	r3, #44	; 0x2c
 800492e:	d04e      	beq.n	80049ce <parse_key+0x116>
			// continue
		} else if (c == '}') {
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	2b7d      	cmp	r3, #125	; 0x7d
 8004934:	d102      	bne.n	800493c <parse_key+0x84>
			return p - 1;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	3b01      	subs	r3, #1
 800493a:	e05b      	b.n	80049f4 <parse_key+0x13c>
		} else if (c == '/') {
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b2f      	cmp	r3, #47	; 0x2f
 8004940:	d13a      	bne.n	80049b8 <parse_key+0x100>
			if (*p == '/') { // line comment
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b2f      	cmp	r3, #47	; 0x2f
 8004948:	d11b      	bne.n	8004982 <parse_key+0xca>
				char *ps = p - 1;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3b01      	subs	r3, #1
 800494e:	613b      	str	r3, [r7, #16]
				p = strchr (p + 1, '\n');
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	3301      	adds	r3, #1
 8004954:	210a      	movs	r1, #10
 8004956:	4618      	mov	r0, r3
 8004958:	f001 f9e2 	bl	8005d20 <strchr>
 800495c:	4603      	mov	r3, r0
 800495e:	60bb      	str	r3, [r7, #8]
				if (!p) {
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d109      	bne.n	800497a <parse_key+0xc2>
					NX_JSON_REPORT_ERROR("endless comment", ps);
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <parse_key+0x144>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68d8      	ldr	r0, [r3, #12]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	22d9      	movs	r2, #217	; 0xd9
 8004970:	4924      	ldr	r1, [pc, #144]	; (8004a04 <parse_key+0x14c>)
 8004972:	f000 fd75 	bl	8005460 <fiprintf>
					return 0; // error
 8004976:	2300      	movs	r3, #0
 8004978:	e03c      	b.n	80049f4 <parse_key+0x13c>
				}
				p++;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	3301      	adds	r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	e025      	b.n	80049ce <parse_key+0x116>
			} else if (*p == '*') { // block comment
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2b2a      	cmp	r3, #42	; 0x2a
 8004988:	d10b      	bne.n	80049a2 <parse_key+0xea>
				p = skip_block_comment (p + 1);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	3301      	adds	r3, #1
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff ff58 	bl	8004844 <skip_block_comment>
 8004994:	4603      	mov	r3, r0
 8004996:	60bb      	str	r3, [r7, #8]
				if (!p) return 0;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d117      	bne.n	80049ce <parse_key+0x116>
 800499e:	2300      	movs	r3, #0
 80049a0:	e028      	b.n	80049f4 <parse_key+0x13c>
			} else {
				NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
 80049a2:	4b16      	ldr	r3, [pc, #88]	; (80049fc <parse_key+0x144>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68d8      	ldr	r0, [r3, #12]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	22e1      	movs	r2, #225	; 0xe1
 80049ae:	4914      	ldr	r1, [pc, #80]	; (8004a00 <parse_key+0x148>)
 80049b0:	f000 fd56 	bl	8005460 <fiprintf>
				return 0; // error
 80049b4:	2300      	movs	r3, #0
 80049b6:	e01d      	b.n	80049f4 <parse_key+0x13c>
			}
		} else {
			NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <parse_key+0x144>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68d8      	ldr	r0, [r3, #12]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	22e5      	movs	r2, #229	; 0xe5
 80049c4:	490e      	ldr	r1, [pc, #56]	; (8004a00 <parse_key+0x148>)
 80049c6:	f000 fd4b 	bl	8005460 <fiprintf>
			return 0; // error
 80049ca:	2300      	movs	r3, #0
 80049cc:	e012      	b.n	80049f4 <parse_key+0x13c>
	while ((c = *p++)) {
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	60ba      	str	r2, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	75fb      	strb	r3, [r7, #23]
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f47f af73 	bne.w	80048c6 <parse_key+0xe>
		}
	}
	NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
 80049e0:	4b06      	ldr	r3, [pc, #24]	; (80049fc <parse_key+0x144>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68d8      	ldr	r0, [r3, #12]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	22e9      	movs	r2, #233	; 0xe9
 80049ec:	4904      	ldr	r1, [pc, #16]	; (8004a00 <parse_key+0x148>)
 80049ee:	f000 fd37 	bl	8005460 <fiprintf>
	return 0; // error
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	2000000c 	.word	0x2000000c
 8004a00:	0800861c 	.word	0x0800861c
 8004a04:	080085ec 	.word	0x080085ec

08004a08 <parse_value>:

static char *parse_value(nx_json *parent, const char *key, char *p, nx_json_unicode_encoder encoder) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
	nx_json *js;
	while (1) {
		switch (*p) {
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b7b      	cmp	r3, #123	; 0x7b
 8004a1c:	f200 82a7 	bhi.w	8004f6e <parse_value+0x566>
 8004a20:	a201      	add	r2, pc, #4	; (adr r2, 8004a28 <parse_value+0x20>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004c19 	.word	0x08004c19
 8004a2c:	08004f6f 	.word	0x08004f6f
 8004a30:	08004f6f 	.word	0x08004f6f
 8004a34:	08004f6f 	.word	0x08004f6f
 8004a38:	08004f6f 	.word	0x08004f6f
 8004a3c:	08004f6f 	.word	0x08004f6f
 8004a40:	08004f6f 	.word	0x08004f6f
 8004a44:	08004f6f 	.word	0x08004f6f
 8004a48:	08004f6f 	.word	0x08004f6f
 8004a4c:	08004c2d 	.word	0x08004c2d
 8004a50:	08004c2d 	.word	0x08004c2d
 8004a54:	08004f6f 	.word	0x08004f6f
 8004a58:	08004f6f 	.word	0x08004f6f
 8004a5c:	08004c2d 	.word	0x08004c2d
 8004a60:	08004f6f 	.word	0x08004f6f
 8004a64:	08004f6f 	.word	0x08004f6f
 8004a68:	08004f6f 	.word	0x08004f6f
 8004a6c:	08004f6f 	.word	0x08004f6f
 8004a70:	08004f6f 	.word	0x08004f6f
 8004a74:	08004f6f 	.word	0x08004f6f
 8004a78:	08004f6f 	.word	0x08004f6f
 8004a7c:	08004f6f 	.word	0x08004f6f
 8004a80:	08004f6f 	.word	0x08004f6f
 8004a84:	08004f6f 	.word	0x08004f6f
 8004a88:	08004f6f 	.word	0x08004f6f
 8004a8c:	08004f6f 	.word	0x08004f6f
 8004a90:	08004f6f 	.word	0x08004f6f
 8004a94:	08004f6f 	.word	0x08004f6f
 8004a98:	08004f6f 	.word	0x08004f6f
 8004a9c:	08004f6f 	.word	0x08004f6f
 8004aa0:	08004f6f 	.word	0x08004f6f
 8004aa4:	08004f6f 	.word	0x08004f6f
 8004aa8:	08004c2d 	.word	0x08004c2d
 8004aac:	08004f6f 	.word	0x08004f6f
 8004ab0:	08004cc9 	.word	0x08004cc9
 8004ab4:	08004f6f 	.word	0x08004f6f
 8004ab8:	08004f6f 	.word	0x08004f6f
 8004abc:	08004f6f 	.word	0x08004f6f
 8004ac0:	08004f6f 	.word	0x08004f6f
 8004ac4:	08004f6f 	.word	0x08004f6f
 8004ac8:	08004f6f 	.word	0x08004f6f
 8004acc:	08004f6f 	.word	0x08004f6f
 8004ad0:	08004f6f 	.word	0x08004f6f
 8004ad4:	08004f6f 	.word	0x08004f6f
 8004ad8:	08004c2d 	.word	0x08004c2d
 8004adc:	08004cfd 	.word	0x08004cfd
 8004ae0:	08004f6f 	.word	0x08004f6f
 8004ae4:	08004ef5 	.word	0x08004ef5
 8004ae8:	08004cfd 	.word	0x08004cfd
 8004aec:	08004cfd 	.word	0x08004cfd
 8004af0:	08004cfd 	.word	0x08004cfd
 8004af4:	08004cfd 	.word	0x08004cfd
 8004af8:	08004cfd 	.word	0x08004cfd
 8004afc:	08004cfd 	.word	0x08004cfd
 8004b00:	08004cfd 	.word	0x08004cfd
 8004b04:	08004cfd 	.word	0x08004cfd
 8004b08:	08004cfd 	.word	0x08004cfd
 8004b0c:	08004cfd 	.word	0x08004cfd
 8004b10:	08004f6f 	.word	0x08004f6f
 8004b14:	08004f6f 	.word	0x08004f6f
 8004b18:	08004f6f 	.word	0x08004f6f
 8004b1c:	08004f6f 	.word	0x08004f6f
 8004b20:	08004f6f 	.word	0x08004f6f
 8004b24:	08004f6f 	.word	0x08004f6f
 8004b28:	08004f6f 	.word	0x08004f6f
 8004b2c:	08004f6f 	.word	0x08004f6f
 8004b30:	08004f6f 	.word	0x08004f6f
 8004b34:	08004f6f 	.word	0x08004f6f
 8004b38:	08004f6f 	.word	0x08004f6f
 8004b3c:	08004f6f 	.word	0x08004f6f
 8004b40:	08004f6f 	.word	0x08004f6f
 8004b44:	08004f6f 	.word	0x08004f6f
 8004b48:	08004f6f 	.word	0x08004f6f
 8004b4c:	08004f6f 	.word	0x08004f6f
 8004b50:	08004f6f 	.word	0x08004f6f
 8004b54:	08004f6f 	.word	0x08004f6f
 8004b58:	08004f6f 	.word	0x08004f6f
 8004b5c:	08004f6f 	.word	0x08004f6f
 8004b60:	08004f6f 	.word	0x08004f6f
 8004b64:	08004f6f 	.word	0x08004f6f
 8004b68:	08004f6f 	.word	0x08004f6f
 8004b6c:	08004f6f 	.word	0x08004f6f
 8004b70:	08004f6f 	.word	0x08004f6f
 8004b74:	08004f6f 	.word	0x08004f6f
 8004b78:	08004f6f 	.word	0x08004f6f
 8004b7c:	08004f6f 	.word	0x08004f6f
 8004b80:	08004f6f 	.word	0x08004f6f
 8004b84:	08004f6f 	.word	0x08004f6f
 8004b88:	08004f6f 	.word	0x08004f6f
 8004b8c:	08004f6f 	.word	0x08004f6f
 8004b90:	08004f6f 	.word	0x08004f6f
 8004b94:	08004c8b 	.word	0x08004c8b
 8004b98:	08004f6f 	.word	0x08004f6f
 8004b9c:	08004cc5 	.word	0x08004cc5
 8004ba0:	08004f6f 	.word	0x08004f6f
 8004ba4:	08004f6f 	.word	0x08004f6f
 8004ba8:	08004f6f 	.word	0x08004f6f
 8004bac:	08004f6f 	.word	0x08004f6f
 8004bb0:	08004f6f 	.word	0x08004f6f
 8004bb4:	08004f6f 	.word	0x08004f6f
 8004bb8:	08004f6f 	.word	0x08004f6f
 8004bbc:	08004f6f 	.word	0x08004f6f
 8004bc0:	08004e5b 	.word	0x08004e5b
 8004bc4:	08004f6f 	.word	0x08004f6f
 8004bc8:	08004f6f 	.word	0x08004f6f
 8004bcc:	08004f6f 	.word	0x08004f6f
 8004bd0:	08004f6f 	.word	0x08004f6f
 8004bd4:	08004f6f 	.word	0x08004f6f
 8004bd8:	08004f6f 	.word	0x08004f6f
 8004bdc:	08004f6f 	.word	0x08004f6f
 8004be0:	08004ebd 	.word	0x08004ebd
 8004be4:	08004f6f 	.word	0x08004f6f
 8004be8:	08004f6f 	.word	0x08004f6f
 8004bec:	08004f6f 	.word	0x08004f6f
 8004bf0:	08004f6f 	.word	0x08004f6f
 8004bf4:	08004f6f 	.word	0x08004f6f
 8004bf8:	08004e13 	.word	0x08004e13
 8004bfc:	08004f6f 	.word	0x08004f6f
 8004c00:	08004f6f 	.word	0x08004f6f
 8004c04:	08004f6f 	.word	0x08004f6f
 8004c08:	08004f6f 	.word	0x08004f6f
 8004c0c:	08004f6f 	.word	0x08004f6f
 8004c10:	08004f6f 	.word	0x08004f6f
 8004c14:	08004c35 	.word	0x08004c35
		case '\0':
			NX_JSON_REPORT_ERROR("unexpected end of text", p);
 8004c18:	4ba2      	ldr	r3, [pc, #648]	; (8004ea4 <parse_value+0x49c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68d8      	ldr	r0, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	22f2      	movs	r2, #242	; 0xf2
 8004c22:	49a1      	ldr	r1, [pc, #644]	; (8004ea8 <parse_value+0x4a0>)
 8004c24:	f000 fc1c 	bl	8005460 <fiprintf>
			return 0; // error
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e1ad      	b.n	8004f88 <parse_value+0x580>
		case '\t':
		case '\n':
		case '\r':
		case ',':
			// skip
			p++;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
			break;
 8004c32:	e1a8      	b.n	8004f86 <parse_value+0x57e>
		case '{':
			js = create_json (NX_JSON_OBJECT, key, parent);
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f7ff fb73 	bl	8004324 <create_json>
 8004c3e:	61f8      	str	r0, [r7, #28]
			p++;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3301      	adds	r3, #1
 8004c44:	607b      	str	r3, [r7, #4]
			while (1) {
				const char *new_key;
				p = parse_key (&new_key, p, encoder);
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	f107 0314 	add.w	r3, r7, #20
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fe32 	bl	80048b8 <parse_key>
 8004c54:	4603      	mov	r3, r0
 8004c56:	607b      	str	r3, [r7, #4]
				if (!p) return 0; // error
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <parse_value+0x25a>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e192      	b.n	8004f88 <parse_value+0x580>
				if (*p == '}') return p + 1; // end of object
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b7d      	cmp	r3, #125	; 0x7d
 8004c68:	d102      	bne.n	8004c70 <parse_value+0x268>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	e18b      	b.n	8004f88 <parse_value+0x580>
				p = parse_value (js, new_key, p, encoder);
 8004c70:	6979      	ldr	r1, [r7, #20]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	69f8      	ldr	r0, [r7, #28]
 8004c78:	f7ff fec6 	bl	8004a08 <parse_value>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	607b      	str	r3, [r7, #4]
				if (!p) return 0; // error
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1df      	bne.n	8004c46 <parse_value+0x23e>
 8004c86:	2300      	movs	r3, #0
 8004c88:	e17e      	b.n	8004f88 <parse_value+0x580>
			}
		case '[':
			js = create_json (NX_JSON_ARRAY, key, parent);
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	2002      	movs	r0, #2
 8004c90:	f7ff fb48 	bl	8004324 <create_json>
 8004c94:	61f8      	str	r0, [r7, #28]
			p++;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	607b      	str	r3, [r7, #4]
			while (1) {
				p = parse_value (js, 0, p, encoder);
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	69f8      	ldr	r0, [r7, #28]
 8004ca4:	f7ff feb0 	bl	8004a08 <parse_value>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	607b      	str	r3, [r7, #4]
				if (!p) return 0; // error
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <parse_value+0x2ae>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e168      	b.n	8004f88 <parse_value+0x580>
				if (*p == ']') return p + 1; // end of array
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b5d      	cmp	r3, #93	; 0x5d
 8004cbc:	d1ee      	bne.n	8004c9c <parse_value+0x294>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	e161      	b.n	8004f88 <parse_value+0x580>
			}
		case ']':
			return p;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	e15f      	b.n	8004f88 <parse_value+0x580>
		case '"':
			p++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	607b      	str	r3, [r7, #4]
			js = create_json (NX_JSON_STRING, key, parent);
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	68b9      	ldr	r1, [r7, #8]
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	f7ff fb26 	bl	8004324 <create_json>
 8004cd8:	61f8      	str	r0, [r7, #28]
			js->text_value = unescape_string (p, &p, encoder);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	1d39      	adds	r1, r7, #4
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fc1b 	bl	800451c <unescape_string>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	609a      	str	r2, [r3, #8]
			if (!js->text_value) return 0; // propagate error
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <parse_value+0x2f0>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	e147      	b.n	8004f88 <parse_value+0x580>
			return p;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	e145      	b.n	8004f88 <parse_value+0x580>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9': {
			js = create_json (NX_JSON_INTEGER, key, parent);
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	2004      	movs	r0, #4
 8004d02:	f7ff fb0f 	bl	8004324 <create_json>
 8004d06:	61f8      	str	r0, [r7, #28]
			char *pe;
			if (*p == '-') {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b2d      	cmp	r3, #45	; 0x2d
 8004d0e:	d10c      	bne.n	8004d2a <parse_value+0x322>
				js->num.s_value = (nxjson_s64) strtoll (p, &pe, 0);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f107 0110 	add.w	r1, r7, #16
 8004d16:	2200      	movs	r2, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fee9 	bl	8006af0 <strtoll>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	69f9      	ldr	r1, [r7, #28]
 8004d24:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8004d28:	e00b      	b.n	8004d42 <parse_value+0x33a>
			} else {
				js->num.u_value = (nxjson_u64) strtoull (p, &pe, 0);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f107 0110 	add.w	r1, r7, #16
 8004d30:	2200      	movs	r2, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 ff7e 	bl	8006c34 <strtoull>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	69f9      	ldr	r1, [r7, #28]
 8004d3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			}
			if (pe == p || errno == ERANGE) {
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d005      	beq.n	8004d56 <parse_value+0x34e>
 8004d4a:	f000 fb83 	bl	8005454 <__errno>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b22      	cmp	r3, #34	; 0x22
 8004d54:	d10a      	bne.n	8004d6c <parse_value+0x364>
				NX_JSON_REPORT_ERROR("invalid number", p);
 8004d56:	4b53      	ldr	r3, [pc, #332]	; (8004ea4 <parse_value+0x49c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68d8      	ldr	r0, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f44f 7295 	mov.w	r2, #298	; 0x12a
 8004d62:	4952      	ldr	r1, [pc, #328]	; (8004eac <parse_value+0x4a4>)
 8004d64:	f000 fb7c 	bl	8005460 <fiprintf>
				return 0; // error
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e10d      	b.n	8004f88 <parse_value+0x580>
			}
			if (*pe == '.' || *pe == 'e' || *pe == 'E') { // double value
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b2e      	cmp	r3, #46	; 0x2e
 8004d72:	d007      	beq.n	8004d84 <parse_value+0x37c>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b65      	cmp	r3, #101	; 0x65
 8004d7a:	d003      	beq.n	8004d84 <parse_value+0x37c>
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b45      	cmp	r3, #69	; 0x45
 8004d82:	d125      	bne.n	8004dd0 <parse_value+0x3c8>
				js->type = NX_JSON_DOUBLE;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	2205      	movs	r2, #5
 8004d88:	701a      	strb	r2, [r3, #0]
				js->num.dbl_value = strtod (p, &pe);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f107 0210 	add.w	r2, r7, #16
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f001 fe0a 	bl	80069ac <strtod>
 8004d98:	eeb0 7a40 	vmov.f32	s14, s0
 8004d9c:	eef0 7a60 	vmov.f32	s15, s1
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	ed83 7b04 	vstr	d7, [r3, #16]
				if (pe == p || errno == ERANGE) {
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d005      	beq.n	8004dba <parse_value+0x3b2>
 8004dae:	f000 fb51 	bl	8005454 <__errno>
 8004db2:	4603      	mov	r3, r0
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b22      	cmp	r3, #34	; 0x22
 8004db8:	d128      	bne.n	8004e0c <parse_value+0x404>
					NX_JSON_REPORT_ERROR("invalid number", p);
 8004dba:	4b3a      	ldr	r3, [pc, #232]	; (8004ea4 <parse_value+0x49c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68d8      	ldr	r0, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f240 1231 	movw	r2, #305	; 0x131
 8004dc6:	4939      	ldr	r1, [pc, #228]	; (8004eac <parse_value+0x4a4>)
 8004dc8:	f000 fb4a 	bl	8005460 <fiprintf>
					return 0; // error
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e0db      	b.n	8004f88 <parse_value+0x580>
				}
			} else {
				if (*p == '-') {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b2d      	cmp	r3, #45	; 0x2d
 8004dd6:	d10c      	bne.n	8004df2 <parse_value+0x3ea>
					js->num.dbl_value = js->num.s_value;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	f7fb fbeb 	bl	80005bc <__aeabi_ul2d>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	69f9      	ldr	r1, [r7, #28]
 8004dec:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004df0:	e00d      	b.n	8004e0e <parse_value+0x406>
				} else {
					js->num.dbl_value = js->num.u_value;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f7fb fbde 	bl	80005bc <__aeabi_ul2d>
 8004e00:	4602      	mov	r2, r0
 8004e02:	460b      	mov	r3, r1
 8004e04:	69f9      	ldr	r1, [r7, #28]
 8004e06:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004e0a:	e000      	b.n	8004e0e <parse_value+0x406>
				if (pe == p || errno == ERANGE) {
 8004e0c:	bf00      	nop
				}
			}
			return pe;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	e0ba      	b.n	8004f88 <parse_value+0x580>
		}
		case 't':
			if (!strncmp (p, "true", 4)) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	4926      	ldr	r1, [pc, #152]	; (8004eb0 <parse_value+0x4a8>)
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 ff8e 	bl	8005d3a <strncmp>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10f      	bne.n	8004e44 <parse_value+0x43c>
				js = create_json (NX_JSON_BOOL, key, parent);
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	68b9      	ldr	r1, [r7, #8]
 8004e28:	2006      	movs	r0, #6
 8004e2a:	f7ff fa7b 	bl	8004324 <create_json>
 8004e2e:	61f8      	str	r0, [r7, #28]
				js->num.u_value = 1;
 8004e30:	69f9      	ldr	r1, [r7, #28]
 8004e32:	f04f 0201 	mov.w	r2, #1
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				return p + 4;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	e0a1      	b.n	8004f88 <parse_value+0x580>
			}
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8004e44:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <parse_value+0x49c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68d8      	ldr	r0, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f240 1243 	movw	r2, #323	; 0x143
 8004e50:	4918      	ldr	r1, [pc, #96]	; (8004eb4 <parse_value+0x4ac>)
 8004e52:	f000 fb05 	bl	8005460 <fiprintf>
			return 0; // error
 8004e56:	2300      	movs	r3, #0
 8004e58:	e096      	b.n	8004f88 <parse_value+0x580>
		case 'f':
			if (!strncmp (p, "false", 5)) {
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2205      	movs	r2, #5
 8004e5e:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <parse_value+0x4b0>)
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 ff6a 	bl	8005d3a <strncmp>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10f      	bne.n	8004e8c <parse_value+0x484>
				js = create_json (NX_JSON_BOOL, key, parent);
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	2006      	movs	r0, #6
 8004e72:	f7ff fa57 	bl	8004324 <create_json>
 8004e76:	61f8      	str	r0, [r7, #28]
				js->num.u_value = 0;
 8004e78:	69f9      	ldr	r1, [r7, #28]
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9c1 2302 	strd	r2, r3, [r1, #8]
				return p + 5;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3305      	adds	r3, #5
 8004e8a:	e07d      	b.n	8004f88 <parse_value+0x580>
			}
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8004e8c:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <parse_value+0x49c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68d8      	ldr	r0, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f240 124b 	movw	r2, #331	; 0x14b
 8004e98:	4906      	ldr	r1, [pc, #24]	; (8004eb4 <parse_value+0x4ac>)
 8004e9a:	f000 fae1 	bl	8005460 <fiprintf>
			return 0; // error
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	e072      	b.n	8004f88 <parse_value+0x580>
 8004ea2:	bf00      	nop
 8004ea4:	2000000c 	.word	0x2000000c
 8004ea8:	08008650 	.word	0x08008650
 8004eac:	08008688 	.word	0x08008688
 8004eb0:	080086b8 	.word	0x080086b8
 8004eb4:	0800861c 	.word	0x0800861c
 8004eb8:	080086c0 	.word	0x080086c0
		case 'n':
			if (!strncmp (p, "null", 4)) {
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	4933      	ldr	r1, [pc, #204]	; (8004f90 <parse_value+0x588>)
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 ff39 	bl	8005d3a <strncmp>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <parse_value+0x4d6>
				create_json (NX_JSON_NULL, key, parent);
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f7ff fa26 	bl	8004324 <create_json>
				return p + 4;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	e054      	b.n	8004f88 <parse_value+0x580>
			}
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8004ede:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <parse_value+0x58c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68d8      	ldr	r0, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8004eea:	492b      	ldr	r1, [pc, #172]	; (8004f98 <parse_value+0x590>)
 8004eec:	f000 fab8 	bl	8005460 <fiprintf>
			return 0; // error
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e049      	b.n	8004f88 <parse_value+0x580>
		case '/': // comment
			if (p[1] == '/') { // line comment
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b2f      	cmp	r3, #47	; 0x2f
 8004efc:	d11b      	bne.n	8004f36 <parse_value+0x52e>
				char *ps = p;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	61bb      	str	r3, [r7, #24]
				p = strchr (p + 2, '\n');
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3302      	adds	r3, #2
 8004f06:	210a      	movs	r1, #10
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 ff09 	bl	8005d20 <strchr>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	607b      	str	r3, [r7, #4]
				if (!p) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <parse_value+0x526>
					NX_JSON_REPORT_ERROR("endless comment", ps);
 8004f18:	4b1e      	ldr	r3, [pc, #120]	; (8004f94 <parse_value+0x58c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68d8      	ldr	r0, [r3, #12]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f240 1259 	movw	r2, #345	; 0x159
 8004f24:	491d      	ldr	r1, [pc, #116]	; (8004f9c <parse_value+0x594>)
 8004f26:	f000 fa9b 	bl	8005460 <fiprintf>
					return 0; // error
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e02c      	b.n	8004f88 <parse_value+0x580>
				}
				p++;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3301      	adds	r3, #1
 8004f32:	607b      	str	r3, [r7, #4]
				if (!p) return 0;
			} else {
				NX_JSON_REPORT_ERROR("unexpected chars", p);
				return 0; // error
			}
			break;
 8004f34:	e026      	b.n	8004f84 <parse_value+0x57c>
			} else if (p[1] == '*') { // block comment
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f3e:	d10b      	bne.n	8004f58 <parse_value+0x550>
				p = skip_block_comment (p + 2);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3302      	adds	r3, #2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff fc7d 	bl	8004844 <skip_block_comment>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	607b      	str	r3, [r7, #4]
				if (!p) return 0;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d117      	bne.n	8004f84 <parse_value+0x57c>
 8004f54:	2300      	movs	r3, #0
 8004f56:	e017      	b.n	8004f88 <parse_value+0x580>
				NX_JSON_REPORT_ERROR("unexpected chars", p);
 8004f58:	4b0e      	ldr	r3, [pc, #56]	; (8004f94 <parse_value+0x58c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68d8      	ldr	r0, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f240 1261 	movw	r2, #353	; 0x161
 8004f64:	490c      	ldr	r1, [pc, #48]	; (8004f98 <parse_value+0x590>)
 8004f66:	f000 fa7b 	bl	8005460 <fiprintf>
				return 0; // error
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e00c      	b.n	8004f88 <parse_value+0x580>
		default:
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <parse_value+0x58c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68d8      	ldr	r0, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8004f7a:	4907      	ldr	r1, [pc, #28]	; (8004f98 <parse_value+0x590>)
 8004f7c:	f000 fa70 	bl	8005460 <fiprintf>
			return 0; // error
 8004f80:	2300      	movs	r3, #0
 8004f82:	e001      	b.n	8004f88 <parse_value+0x580>
			break;
 8004f84:	bf00      	nop
		switch (*p) {
 8004f86:	e546      	b.n	8004a16 <parse_value+0xe>
		}
	}
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	080086c8 	.word	0x080086c8
 8004f94:	2000000c 	.word	0x2000000c
 8004f98:	0800861c 	.word	0x0800861c
 8004f9c:	080085ec 	.word	0x080085ec

08004fa0 <nx_json_parse_utf8>:

const nx_json *nx_json_parse_utf8(char *text)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
	return nx_json_parse (text, unicode_to_utf8);
 8004fa8:	4904      	ldr	r1, [pc, #16]	; (8004fbc <nx_json_parse_utf8+0x1c>)
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f808 	bl	8004fc0 <nx_json_parse>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	080043a5 	.word	0x080043a5

08004fc0 <nx_json_parse>:

const nx_json *nx_json_parse(char *text, nx_json_unicode_encoder encoder)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	nx_json js = {0};
 8004fca:	f107 0308 	add.w	r3, r7, #8
 8004fce:	2220      	movs	r2, #32
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 faa8 	bl	8005528 <memset>
	if (!parse_value (&js, 0, text, encoder))
 8004fd8:	f107 0008 	add.w	r0, r7, #8
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f7ff fd11 	bl	8004a08 <parse_value>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <nx_json_parse+0x3e>
	{
		if (js.children.first) nx_json_free (js.children.first);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <nx_json_parse+0x3a>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f82a 	bl	800504e <nx_json_free>
		return 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	e000      	b.n	8005000 <nx_json_parse+0x40>
	}
	return js.children.first;
 8004ffe:	697b      	ldr	r3, [r7, #20]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <nx_json_get>:

const nx_json *nx_json_get(const nx_json *json, const char *key)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	nx_json *js;
	for (js = json->children.first; js; js = js->next)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	e011      	b.n	800503e <nx_json_get+0x36>
	{
		if (js->key && !strcmp (js->key, key)) return js;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <nx_json_get+0x30>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	6839      	ldr	r1, [r7, #0]
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb f8d9 	bl	80001e0 <strcmp>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <nx_json_get+0x30>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	e006      	b.n	8005046 <nx_json_get+0x3e>
	for (js = json->children.first; js; js = js->next)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ea      	bne.n	800501a <nx_json_get+0x12>
	}
	return NULL;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <nx_json_free>:
	}
	return NULL;
}

void nx_json_free(const nx_json *js)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
	if (!js)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <nx_json_free+0x44>
	{
		return;
	}
	if (js->type == NX_JSON_OBJECT || js->type == NX_JSON_ARRAY)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d003      	beq.n	800506c <nx_json_free+0x1e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b02      	cmp	r3, #2
 800506a:	d10e      	bne.n	800508a <nx_json_free+0x3c>
	{
		nx_json *p = js->children.first;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	60fb      	str	r3, [r7, #12]
		nx_json *p1;
		while (p) {
 8005072:	e007      	b.n	8005084 <nx_json_free+0x36>
			p1 = p->next;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	60bb      	str	r3, [r7, #8]
			nx_json_free (p);
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f7ff ffe7 	bl	800504e <nx_json_free>
			p = p1;
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	60fb      	str	r3, [r7, #12]
		while (p) {
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f4      	bne.n	8005074 <nx_json_free+0x26>
		}
	}
	NX_JSON_FREE(js);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa26 	bl	80054dc <free>
 8005090:	e000      	b.n	8005094 <nx_json_free+0x46>
		return;
 8005092:	bf00      	nop
}
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <wifiModuleInit>:
/**
 * @brief
 *
 */
void wifiModuleInit(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	memset(&hWifiModule, 0, sizeof(hWifiModule_t));
 80050a0:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80050a4:	2100      	movs	r1, #0
 80050a6:	480a      	ldr	r0, [pc, #40]	; (80050d0 <wifiModuleInit+0x34>)
 80050a8:	f000 fa3e 	bl	8005528 <memset>

	hWifiModule.controlFlags.flag.configurationFase = ENABLE;
 80050ac:	4a08      	ldr	r2, [pc, #32]	; (80050d0 <wifiModuleInit+0x34>)
 80050ae:	7813      	ldrb	r3, [r2, #0]
 80050b0:	f043 0304 	orr.w	r3, r3, #4
 80050b4:	7013      	strb	r3, [r2, #0]

	hWifiModule.controlFlags.flag.configurationNotify = ENABLE;
 80050b6:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <wifiModuleInit+0x34>)
 80050b8:	7813      	ldrb	r3, [r2, #0]
 80050ba:	f043 0308 	orr.w	r3, r3, #8
 80050be:	7013      	strb	r3, [r2, #0]

	HAL_GPIO_WritePin(WIFI_MODULE_RESET_GPIO_PORT, WIFI_MODULE_RESET_PIN, ENABLE);
 80050c0:	2201      	movs	r2, #1
 80050c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050c6:	4803      	ldr	r0, [pc, #12]	; (80050d4 <wifiModuleInit+0x38>)
 80050c8:	f7fd fa86 	bl	80025d8 <HAL_GPIO_WritePin>
}
 80050cc:	bf00      	nop
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000308 	.word	0x20000308
 80050d4:	40020400 	.word	0x40020400

080050d8 <wifiModuleConfigSequence>:
/**
 * @brief
 *
 */
void wifiModuleConfigSequence(void)
{
 80050d8:	b5b0      	push	{r4, r5, r7, lr}
 80050da:	af00      	add	r7, sp, #0
	static uint8_t configStages = 0;

	switch(configStages)
 80050dc:	4ba8      	ldr	r3, [pc, #672]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2b0a      	cmp	r3, #10
 80050e2:	f200 814a 	bhi.w	800537a <wifiModuleConfigSequence+0x2a2>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <wifiModuleConfigSequence+0x14>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	08005119 	.word	0x08005119
 80050f0:	0800513d 	.word	0x0800513d
 80050f4:	08005161 	.word	0x08005161
 80050f8:	08005185 	.word	0x08005185
 80050fc:	080051b3 	.word	0x080051b3
 8005100:	080051dd 	.word	0x080051dd
 8005104:	0800520f 	.word	0x0800520f
 8005108:	08005239 	.word	0x08005239
 800510c:	08005263 	.word	0x08005263
 8005110:	080052c9 	.word	0x080052c9
 8005114:	0800533f 	.word	0x0800533f
	{
		case 0:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 8005118:	4a9a      	ldr	r2, [pc, #616]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800511a:	7813      	ldrb	r3, [r2, #0]
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_FIRMWARE_MENU_OPEN);
 8005122:	4b99      	ldr	r3, [pc, #612]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005124:	221c      	movs	r2, #28
 8005126:	801a      	strh	r2, [r3, #0]

			hWifiModule.txPacketSize = 1;
 8005128:	4b96      	ldr	r3, [pc, #600]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800512a:	2201      	movs	r2, #1
 800512c:	805a      	strh	r2, [r3, #2]

			++configStages;
 800512e:	4b94      	ldr	r3, [pc, #592]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	b2da      	uxtb	r2, r3
 8005136:	4b92      	ldr	r3, [pc, #584]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005138:	701a      	strb	r2, [r3, #0]
			break;
 800513a:	e11e      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 1:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 800513c:	4a91      	ldr	r2, [pc, #580]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800513e:	7813      	ldrb	r3, [r2, #0]
 8005140:	f043 0302 	orr.w	r3, r3, #2
 8005144:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_FIRMWARE_MENU_CONFIRM);
 8005146:	4b90      	ldr	r3, [pc, #576]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005148:	2255      	movs	r2, #85	; 0x55
 800514a:	801a      	strh	r2, [r3, #0]

			hWifiModule.txPacketSize = 1;
 800514c:	4b8d      	ldr	r3, [pc, #564]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800514e:	2201      	movs	r2, #1
 8005150:	805a      	strh	r2, [r3, #2]

			++configStages;
 8005152:	4b8b      	ldr	r3, [pc, #556]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	b2da      	uxtb	r2, r3
 800515a:	4b89      	ldr	r3, [pc, #548]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 800515c:	701a      	strb	r2, [r3, #0]
			break;
 800515e:	e10c      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 2:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 8005160:	4a88      	ldr	r2, [pc, #544]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005162:	7813      	ldrb	r3, [r2, #0]
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_DEFAULT_WiFi_FIRMWARE);
 800516a:	4b87      	ldr	r3, [pc, #540]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 800516c:	2231      	movs	r2, #49	; 0x31
 800516e:	801a      	strh	r2, [r3, #0]

			hWifiModule.txPacketSize = 1;
 8005170:	4b84      	ldr	r3, [pc, #528]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005172:	2201      	movs	r2, #1
 8005174:	805a      	strh	r2, [r3, #2]

			++configStages;
 8005176:	4b82      	ldr	r3, [pc, #520]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4b80      	ldr	r3, [pc, #512]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005180:	701a      	strb	r2, [r3, #0]
			break;
 8005182:	e0fa      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 3:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 8005184:	4a7f      	ldr	r2, [pc, #508]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005186:	7813      	ldrb	r3, [r2, #0]
 8005188:	f043 0302 	orr.w	r3, r3, #2
 800518c:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_OPERAND_SETTINGS);
 800518e:	4a7e      	ldr	r2, [pc, #504]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005190:	4b7e      	ldr	r3, [pc, #504]	; (800538c <wifiModuleConfigSequence+0x2b4>)
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	235a      	movs	r3, #90	; 0x5a
 8005198:	461a      	mov	r2, r3
 800519a:	f000 f9b7 	bl	800550c <memcpy>

			hWifiModule.txPacketSize = strlen(AT_OPERAND_SETTINGS);
 800519e:	4b79      	ldr	r3, [pc, #484]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80051a0:	2259      	movs	r2, #89	; 0x59
 80051a2:	805a      	strh	r2, [r3, #2]

			++configStages;
 80051a4:	4b76      	ldr	r3, [pc, #472]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	4b74      	ldr	r3, [pc, #464]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80051ae:	701a      	strb	r2, [r3, #0]
			break;
 80051b0:	e0e3      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 4:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 80051b2:	4a74      	ldr	r2, [pc, #464]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80051b4:	7813      	ldrb	r3, [r2, #0]
 80051b6:	f043 0302 	orr.w	r3, r3, #2
 80051ba:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_BAND_SELECT);
 80051bc:	4a72      	ldr	r2, [pc, #456]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80051be:	4b74      	ldr	r3, [pc, #464]	; (8005390 <wifiModuleConfigSequence+0x2b8>)
 80051c0:	4614      	mov	r4, r2
 80051c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			hWifiModule.txPacketSize = strlen(AT_BAND_SELECT);
 80051c8:	4b6e      	ldr	r3, [pc, #440]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80051ca:	220f      	movs	r2, #15
 80051cc:	805a      	strh	r2, [r3, #2]

			++configStages;
 80051ce:	4b6c      	ldr	r3, [pc, #432]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	3301      	adds	r3, #1
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80051d8:	701a      	strb	r2, [r3, #0]
			break;
 80051da:	e0ce      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 5:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 80051dc:	4a69      	ldr	r2, [pc, #420]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80051de:	7813      	ldrb	r3, [r2, #0]
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_FRAME_SET);
 80051e6:	4a68      	ldr	r2, [pc, #416]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80051e8:	4b6a      	ldr	r3, [pc, #424]	; (8005394 <wifiModuleConfigSequence+0x2bc>)
 80051ea:	4614      	mov	r4, r2
 80051ec:	461d      	mov	r5, r3
 80051ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051f6:	682b      	ldr	r3, [r5, #0]
 80051f8:	7023      	strb	r3, [r4, #0]

			hWifiModule.txPacketSize = strlen(AT_FRAME_SET);
 80051fa:	4b62      	ldr	r3, [pc, #392]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80051fc:	2220      	movs	r2, #32
 80051fe:	805a      	strh	r2, [r3, #2]

			++configStages;
 8005200:	4b5f      	ldr	r3, [pc, #380]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	3301      	adds	r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	4b5d      	ldr	r3, [pc, #372]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 800520a:	701a      	strb	r2, [r3, #0]
			break;
 800520c:	e0b5      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 6:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 800520e:	4a5d      	ldr	r2, [pc, #372]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005210:	7813      	ldrb	r3, [r2, #0]
 8005212:	f043 0302 	orr.w	r3, r3, #2
 8005216:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_SETTINGS_INIT);
 8005218:	4a5b      	ldr	r2, [pc, #364]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 800521a:	4b5f      	ldr	r3, [pc, #380]	; (8005398 <wifiModuleConfigSequence+0x2c0>)
 800521c:	4614      	mov	r4, r2
 800521e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005220:	c407      	stmia	r4!, {r0, r1, r2}
 8005222:	8023      	strh	r3, [r4, #0]


			hWifiModule.txPacketSize = strlen(AT_SETTINGS_INIT);
 8005224:	4b57      	ldr	r3, [pc, #348]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005226:	220d      	movs	r2, #13
 8005228:	805a      	strh	r2, [r3, #2]

			++configStages;
 800522a:	4b55      	ldr	r3, [pc, #340]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4b53      	ldr	r3, [pc, #332]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005234:	701a      	strb	r2, [r3, #0]
			break;
 8005236:	e0a0      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 7:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 8005238:	4a52      	ldr	r2, [pc, #328]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800523a:	7813      	ldrb	r3, [r2, #0]
 800523c:	f043 0302 	orr.w	r3, r3, #2
 8005240:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_SSID_SCAN);
 8005242:	4a51      	ldr	r2, [pc, #324]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005244:	4b55      	ldr	r3, [pc, #340]	; (800539c <wifiModuleConfigSequence+0x2c4>)
 8005246:	4614      	mov	r4, r2
 8005248:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800524a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			hWifiModule.txPacketSize = strlen(AT_SSID_SCAN);
 800524e:	4b4d      	ldr	r3, [pc, #308]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005250:	220f      	movs	r2, #15
 8005252:	805a      	strh	r2, [r3, #2]
			++configStages;
 8005254:	4b4a      	ldr	r3, [pc, #296]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	3301      	adds	r3, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	4b48      	ldr	r3, [pc, #288]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 800525e:	701a      	strb	r2, [r3, #0]
			break;
 8005260:	e08b      	b.n	800537a <wifiModuleConfigSequence+0x2a2>
		case 8:

			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 8005262:	4a48      	ldr	r2, [pc, #288]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005264:	7813      	ldrb	r3, [r2, #0]
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_PASSWORD_SET);
 800526c:	4a46      	ldr	r2, [pc, #280]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 800526e:	4b4c      	ldr	r3, [pc, #304]	; (80053a0 <wifiModuleConfigSequence+0x2c8>)
 8005270:	4614      	mov	r4, r2
 8005272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005274:	c407      	stmia	r4!, {r0, r1, r2}
 8005276:	8023      	strh	r3, [r4, #0]

			strcat(hWifiModule.txBuffer, SSID_PASSWORD);
 8005278:	4843      	ldr	r0, [pc, #268]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 800527a:	f7fa ffbb 	bl	80001f4 <strlen>
 800527e:	4603      	mov	r3, r0
 8005280:	461a      	mov	r2, r3
 8005282:	4b41      	ldr	r3, [pc, #260]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005284:	4413      	add	r3, r2
 8005286:	4a47      	ldr	r2, [pc, #284]	; (80053a4 <wifiModuleConfigSequence+0x2cc>)
 8005288:	461c      	mov	r4, r3
 800528a:	4613      	mov	r3, r2
 800528c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800528e:	6020      	str	r0, [r4, #0]
 8005290:	6061      	str	r1, [r4, #4]
 8005292:	60a2      	str	r2, [r4, #8]

			strcat(hWifiModule.txBuffer, AT_TERMINATOR);
 8005294:	483c      	ldr	r0, [pc, #240]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005296:	f7fa ffad 	bl	80001f4 <strlen>
 800529a:	4603      	mov	r3, r0
 800529c:	461a      	mov	r2, r3
 800529e:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80052a0:	4413      	add	r3, r2
 80052a2:	4a41      	ldr	r2, [pc, #260]	; (80053a8 <wifiModuleConfigSequence+0x2d0>)
 80052a4:	8811      	ldrh	r1, [r2, #0]
 80052a6:	7892      	ldrb	r2, [r2, #2]
 80052a8:	8019      	strh	r1, [r3, #0]
 80052aa:	709a      	strb	r2, [r3, #2]

			hWifiModule.txPacketSize = strlen(hWifiModule.txBuffer);
 80052ac:	4836      	ldr	r0, [pc, #216]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80052ae:	f7fa ffa1 	bl	80001f4 <strlen>
 80052b2:	4603      	mov	r3, r0
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	4b33      	ldr	r3, [pc, #204]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80052b8:	805a      	strh	r2, [r3, #2]

			++configStages;
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b2f      	ldr	r3, [pc, #188]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 80052c4:	701a      	strb	r2, [r3, #0]
			break;
 80052c6:	e058      	b.n	800537a <wifiModuleConfigSequence+0x2a2>

		case 9:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 80052c8:	4a2e      	ldr	r2, [pc, #184]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 80052ca:	7813      	ldrb	r3, [r2, #0]
 80052cc:	f043 0302 	orr.w	r3, r3, #2
 80052d0:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_SSID_JOIN);
 80052d2:	4a2d      	ldr	r2, [pc, #180]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80052d4:	4b35      	ldr	r3, [pc, #212]	; (80053ac <wifiModuleConfigSequence+0x2d4>)
 80052d6:	4614      	mov	r4, r2
 80052d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052da:	c407      	stmia	r4!, {r0, r1, r2}
 80052dc:	7023      	strb	r3, [r4, #0]

			strcat(hWifiModule.txBuffer, SSID_NAME);
 80052de:	482a      	ldr	r0, [pc, #168]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80052e0:	f7fa ff88 	bl	80001f4 <strlen>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b27      	ldr	r3, [pc, #156]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 80052ea:	4413      	add	r3, r2
 80052ec:	4a30      	ldr	r2, [pc, #192]	; (80053b0 <wifiModuleConfigSequence+0x2d8>)
 80052ee:	461d      	mov	r5, r3
 80052f0:	4614      	mov	r4, r2
 80052f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052f4:	6028      	str	r0, [r5, #0]
 80052f6:	6069      	str	r1, [r5, #4]
 80052f8:	60aa      	str	r2, [r5, #8]
 80052fa:	60eb      	str	r3, [r5, #12]
 80052fc:	8823      	ldrh	r3, [r4, #0]
 80052fe:	822b      	strh	r3, [r5, #16]

			strcat(hWifiModule.txBuffer, AT_SSID_JOIN_PARAMETERS);
 8005300:	4821      	ldr	r0, [pc, #132]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005302:	f7fa ff77 	bl	80001f4 <strlen>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 800530c:	4413      	add	r3, r2
 800530e:	4a29      	ldr	r2, [pc, #164]	; (80053b4 <wifiModuleConfigSequence+0x2dc>)
 8005310:	461d      	mov	r5, r3
 8005312:	4614      	mov	r4, r2
 8005314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005316:	6028      	str	r0, [r5, #0]
 8005318:	6069      	str	r1, [r5, #4]
 800531a:	60aa      	str	r2, [r5, #8]
 800531c:	60eb      	str	r3, [r5, #12]
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	6128      	str	r0, [r5, #16]

			hWifiModule.txPacketSize = strlen(hWifiModule.txBuffer);
 8005322:	4819      	ldr	r0, [pc, #100]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 8005324:	f7fa ff66 	bl	80001f4 <strlen>
 8005328:	4603      	mov	r3, r0
 800532a:	b29a      	uxth	r2, r3
 800532c:	4b15      	ldr	r3, [pc, #84]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800532e:	805a      	strh	r2, [r3, #2]

//			hWifiModule.controlFlags.flag.configurationFase = DISABLE;

			++configStages;
 8005330:	4b13      	ldr	r3, [pc, #76]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	b2da      	uxtb	r2, r3
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 800533a:	701a      	strb	r2, [r3, #0]
			break;
 800533c:	e01d      	b.n	800537a <wifiModuleConfigSequence+0x2a2>

		case 10:
			hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 800533e:	4a11      	ldr	r2, [pc, #68]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005340:	7813      	ldrb	r3, [r2, #0]
 8005342:	f043 0302 	orr.w	r3, r3, #2
 8005346:	7013      	strb	r3, [r2, #0]

			strcpy(hWifiModule.txBuffer, AT_IP_CONFIG_SET);
 8005348:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <wifiModuleConfigSequence+0x2b0>)
 800534a:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <wifiModuleConfigSequence+0x2e0>)
 800534c:	4614      	mov	r4, r2
 800534e:	461d      	mov	r5, r3
 8005350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005354:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005358:	e884 0003 	stmia.w	r4, {r0, r1}

			hWifiModule.txPacketSize = strlen(AT_IP_CONFIG_SET);
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 800535e:	2217      	movs	r2, #23
 8005360:	805a      	strh	r2, [r3, #2]
			//Stop Configuration sequence
			hWifiModule.controlFlags.flag.configurationFase = DISABLE;
 8005362:	4a08      	ldr	r2, [pc, #32]	; (8005384 <wifiModuleConfigSequence+0x2ac>)
 8005364:	7813      	ldrb	r3, [r2, #0]
 8005366:	f36f 0382 	bfc	r3, #2, #1
 800536a:	7013      	strb	r3, [r2, #0]

			++configStages;
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	b2da      	uxtb	r2, r3
 8005374:	4b02      	ldr	r3, [pc, #8]	; (8005380 <wifiModuleConfigSequence+0x2a8>)
 8005376:	701a      	strb	r2, [r3, #0]
			break;
 8005378:	bf00      	nop


	}
}
 800537a:	bf00      	nop
 800537c:	bdb0      	pop	{r4, r5, r7, pc}
 800537e:	bf00      	nop
 8005380:	20000574 	.word	0x20000574
 8005384:	20000308 	.word	0x20000308
 8005388:	2000031c 	.word	0x2000031c
 800538c:	080086d0 	.word	0x080086d0
 8005390:	0800872c 	.word	0x0800872c
 8005394:	0800873c 	.word	0x0800873c
 8005398:	08008760 	.word	0x08008760
 800539c:	08008770 	.word	0x08008770
 80053a0:	08008780 	.word	0x08008780
 80053a4:	08008790 	.word	0x08008790
 80053a8:	0800879c 	.word	0x0800879c
 80053ac:	080087a0 	.word	0x080087a0
 80053b0:	080087b0 	.word	0x080087b0
 80053b4:	080087c4 	.word	0x080087c4
 80053b8:	080087d8 	.word	0x080087d8

080053bc <wifiModuleHttpGetRequest>:

void wifiModuleHttpGetRequest(void)
{
 80053bc:	b4b0      	push	{r4, r5, r7}
 80053be:	af00      	add	r7, sp, #0
	hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 80053c0:	4a0e      	ldr	r2, [pc, #56]	; (80053fc <wifiModuleHttpGetRequest+0x40>)
 80053c2:	7813      	ldrb	r3, [r2, #0]
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	7013      	strb	r3, [r2, #0]

	strcpy(hWifiModule.txBuffer, AT_HTTP_GET);
 80053ca:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <wifiModuleHttpGetRequest+0x44>)
 80053cc:	4b0d      	ldr	r3, [pc, #52]	; (8005404 <wifiModuleHttpGetRequest+0x48>)
 80053ce:	4614      	mov	r4, r2
 80053d0:	461d      	mov	r5, r3
 80053d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80053e2:	6020      	str	r0, [r4, #0]
 80053e4:	3404      	adds	r4, #4
 80053e6:	8021      	strh	r1, [r4, #0]
 80053e8:	3402      	adds	r4, #2
 80053ea:	0c0b      	lsrs	r3, r1, #16
 80053ec:	7023      	strb	r3, [r4, #0]

	hWifiModule.txPacketSize = strlen(AT_HTTP_GET);
 80053ee:	4b03      	ldr	r3, [pc, #12]	; (80053fc <wifiModuleHttpGetRequest+0x40>)
 80053f0:	2236      	movs	r2, #54	; 0x36
 80053f2:	805a      	strh	r2, [r3, #2]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bcb0      	pop	{r4, r5, r7}
 80053fa:	4770      	bx	lr
 80053fc:	20000308 	.word	0x20000308
 8005400:	2000031c 	.word	0x2000031c
 8005404:	080087f0 	.word	0x080087f0

08005408 <__assert_func>:
 8005408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800540a:	4614      	mov	r4, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4b09      	ldr	r3, [pc, #36]	; (8005434 <__assert_func+0x2c>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4605      	mov	r5, r0
 8005414:	68d8      	ldr	r0, [r3, #12]
 8005416:	b14c      	cbz	r4, 800542c <__assert_func+0x24>
 8005418:	4b07      	ldr	r3, [pc, #28]	; (8005438 <__assert_func+0x30>)
 800541a:	9100      	str	r1, [sp, #0]
 800541c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005420:	4906      	ldr	r1, [pc, #24]	; (800543c <__assert_func+0x34>)
 8005422:	462b      	mov	r3, r5
 8005424:	f000 f81c 	bl	8005460 <fiprintf>
 8005428:	f001 fcce 	bl	8006dc8 <abort>
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <__assert_func+0x38>)
 800542e:	461c      	mov	r4, r3
 8005430:	e7f3      	b.n	800541a <__assert_func+0x12>
 8005432:	bf00      	nop
 8005434:	2000000c 	.word	0x2000000c
 8005438:	08008854 	.word	0x08008854
 800543c:	08008861 	.word	0x08008861
 8005440:	0800888f 	.word	0x0800888f

08005444 <calloc>:
 8005444:	4b02      	ldr	r3, [pc, #8]	; (8005450 <calloc+0xc>)
 8005446:	460a      	mov	r2, r1
 8005448:	4601      	mov	r1, r0
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	f000 b874 	b.w	8005538 <_calloc_r>
 8005450:	2000000c 	.word	0x2000000c

08005454 <__errno>:
 8005454:	4b01      	ldr	r3, [pc, #4]	; (800545c <__errno+0x8>)
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	2000000c 	.word	0x2000000c

08005460 <fiprintf>:
 8005460:	b40e      	push	{r1, r2, r3}
 8005462:	b503      	push	{r0, r1, lr}
 8005464:	4601      	mov	r1, r0
 8005466:	ab03      	add	r3, sp, #12
 8005468:	4805      	ldr	r0, [pc, #20]	; (8005480 <fiprintf+0x20>)
 800546a:	f853 2b04 	ldr.w	r2, [r3], #4
 800546e:	6800      	ldr	r0, [r0, #0]
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	f000 f981 	bl	8005778 <_vfiprintf_r>
 8005476:	b002      	add	sp, #8
 8005478:	f85d eb04 	ldr.w	lr, [sp], #4
 800547c:	b003      	add	sp, #12
 800547e:	4770      	bx	lr
 8005480:	2000000c 	.word	0x2000000c

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4d0d      	ldr	r5, [pc, #52]	; (80054bc <__libc_init_array+0x38>)
 8005488:	4c0d      	ldr	r4, [pc, #52]	; (80054c0 <__libc_init_array+0x3c>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	2600      	movs	r6, #0
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	4d0b      	ldr	r5, [pc, #44]	; (80054c4 <__libc_init_array+0x40>)
 8005496:	4c0c      	ldr	r4, [pc, #48]	; (80054c8 <__libc_init_array+0x44>)
 8005498:	f003 f812 	bl	80084c0 <_init>
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	2600      	movs	r6, #0
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	08008c94 	.word	0x08008c94
 80054c0:	08008c94 	.word	0x08008c94
 80054c4:	08008c94 	.word	0x08008c94
 80054c8:	08008c98 	.word	0x08008c98

080054cc <malloc>:
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <malloc+0xc>)
 80054ce:	4601      	mov	r1, r0
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	f000 b8b3 	b.w	800563c <_malloc_r>
 80054d6:	bf00      	nop
 80054d8:	2000000c 	.word	0x2000000c

080054dc <free>:
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <free+0xc>)
 80054de:	4601      	mov	r1, r0
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	f000 b83f 	b.w	8005564 <_free_r>
 80054e6:	bf00      	nop
 80054e8:	2000000c 	.word	0x2000000c

080054ec <memcmp>:
 80054ec:	b510      	push	{r4, lr}
 80054ee:	3901      	subs	r1, #1
 80054f0:	4402      	add	r2, r0
 80054f2:	4290      	cmp	r0, r2
 80054f4:	d101      	bne.n	80054fa <memcmp+0xe>
 80054f6:	2000      	movs	r0, #0
 80054f8:	e005      	b.n	8005506 <memcmp+0x1a>
 80054fa:	7803      	ldrb	r3, [r0, #0]
 80054fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005500:	42a3      	cmp	r3, r4
 8005502:	d001      	beq.n	8005508 <memcmp+0x1c>
 8005504:	1b18      	subs	r0, r3, r4
 8005506:	bd10      	pop	{r4, pc}
 8005508:	3001      	adds	r0, #1
 800550a:	e7f2      	b.n	80054f2 <memcmp+0x6>

0800550c <memcpy>:
 800550c:	440a      	add	r2, r1
 800550e:	4291      	cmp	r1, r2
 8005510:	f100 33ff 	add.w	r3, r0, #4294967295
 8005514:	d100      	bne.n	8005518 <memcpy+0xc>
 8005516:	4770      	bx	lr
 8005518:	b510      	push	{r4, lr}
 800551a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800551e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005522:	4291      	cmp	r1, r2
 8005524:	d1f9      	bne.n	800551a <memcpy+0xe>
 8005526:	bd10      	pop	{r4, pc}

08005528 <memset>:
 8005528:	4402      	add	r2, r0
 800552a:	4603      	mov	r3, r0
 800552c:	4293      	cmp	r3, r2
 800552e:	d100      	bne.n	8005532 <memset+0xa>
 8005530:	4770      	bx	lr
 8005532:	f803 1b01 	strb.w	r1, [r3], #1
 8005536:	e7f9      	b.n	800552c <memset+0x4>

08005538 <_calloc_r>:
 8005538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800553a:	fba1 2402 	umull	r2, r4, r1, r2
 800553e:	b94c      	cbnz	r4, 8005554 <_calloc_r+0x1c>
 8005540:	4611      	mov	r1, r2
 8005542:	9201      	str	r2, [sp, #4]
 8005544:	f000 f87a 	bl	800563c <_malloc_r>
 8005548:	9a01      	ldr	r2, [sp, #4]
 800554a:	4605      	mov	r5, r0
 800554c:	b930      	cbnz	r0, 800555c <_calloc_r+0x24>
 800554e:	4628      	mov	r0, r5
 8005550:	b003      	add	sp, #12
 8005552:	bd30      	pop	{r4, r5, pc}
 8005554:	220c      	movs	r2, #12
 8005556:	6002      	str	r2, [r0, #0]
 8005558:	2500      	movs	r5, #0
 800555a:	e7f8      	b.n	800554e <_calloc_r+0x16>
 800555c:	4621      	mov	r1, r4
 800555e:	f7ff ffe3 	bl	8005528 <memset>
 8005562:	e7f4      	b.n	800554e <_calloc_r+0x16>

08005564 <_free_r>:
 8005564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005566:	2900      	cmp	r1, #0
 8005568:	d044      	beq.n	80055f4 <_free_r+0x90>
 800556a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556e:	9001      	str	r0, [sp, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	f1a1 0404 	sub.w	r4, r1, #4
 8005576:	bfb8      	it	lt
 8005578:	18e4      	addlt	r4, r4, r3
 800557a:	f002 f9cd 	bl	8007918 <__malloc_lock>
 800557e:	4a1e      	ldr	r2, [pc, #120]	; (80055f8 <_free_r+0x94>)
 8005580:	9801      	ldr	r0, [sp, #4]
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	b933      	cbnz	r3, 8005594 <_free_r+0x30>
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6014      	str	r4, [r2, #0]
 800558a:	b003      	add	sp, #12
 800558c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005590:	f002 b9c8 	b.w	8007924 <__malloc_unlock>
 8005594:	42a3      	cmp	r3, r4
 8005596:	d908      	bls.n	80055aa <_free_r+0x46>
 8005598:	6825      	ldr	r5, [r4, #0]
 800559a:	1961      	adds	r1, r4, r5
 800559c:	428b      	cmp	r3, r1
 800559e:	bf01      	itttt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	1949      	addeq	r1, r1, r5
 80055a6:	6021      	streq	r1, [r4, #0]
 80055a8:	e7ed      	b.n	8005586 <_free_r+0x22>
 80055aa:	461a      	mov	r2, r3
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	b10b      	cbz	r3, 80055b4 <_free_r+0x50>
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d9fa      	bls.n	80055aa <_free_r+0x46>
 80055b4:	6811      	ldr	r1, [r2, #0]
 80055b6:	1855      	adds	r5, r2, r1
 80055b8:	42a5      	cmp	r5, r4
 80055ba:	d10b      	bne.n	80055d4 <_free_r+0x70>
 80055bc:	6824      	ldr	r4, [r4, #0]
 80055be:	4421      	add	r1, r4
 80055c0:	1854      	adds	r4, r2, r1
 80055c2:	42a3      	cmp	r3, r4
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	d1e0      	bne.n	800558a <_free_r+0x26>
 80055c8:	681c      	ldr	r4, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	6053      	str	r3, [r2, #4]
 80055ce:	4421      	add	r1, r4
 80055d0:	6011      	str	r1, [r2, #0]
 80055d2:	e7da      	b.n	800558a <_free_r+0x26>
 80055d4:	d902      	bls.n	80055dc <_free_r+0x78>
 80055d6:	230c      	movs	r3, #12
 80055d8:	6003      	str	r3, [r0, #0]
 80055da:	e7d6      	b.n	800558a <_free_r+0x26>
 80055dc:	6825      	ldr	r5, [r4, #0]
 80055de:	1961      	adds	r1, r4, r5
 80055e0:	428b      	cmp	r3, r1
 80055e2:	bf04      	itt	eq
 80055e4:	6819      	ldreq	r1, [r3, #0]
 80055e6:	685b      	ldreq	r3, [r3, #4]
 80055e8:	6063      	str	r3, [r4, #4]
 80055ea:	bf04      	itt	eq
 80055ec:	1949      	addeq	r1, r1, r5
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	6054      	str	r4, [r2, #4]
 80055f2:	e7ca      	b.n	800558a <_free_r+0x26>
 80055f4:	b003      	add	sp, #12
 80055f6:	bd30      	pop	{r4, r5, pc}
 80055f8:	20000578 	.word	0x20000578

080055fc <sbrk_aligned>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4e0e      	ldr	r6, [pc, #56]	; (8005638 <sbrk_aligned+0x3c>)
 8005600:	460c      	mov	r4, r1
 8005602:	6831      	ldr	r1, [r6, #0]
 8005604:	4605      	mov	r5, r0
 8005606:	b911      	cbnz	r1, 800560e <sbrk_aligned+0x12>
 8005608:	f000 fb7a 	bl	8005d00 <_sbrk_r>
 800560c:	6030      	str	r0, [r6, #0]
 800560e:	4621      	mov	r1, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f000 fb75 	bl	8005d00 <_sbrk_r>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d00a      	beq.n	8005630 <sbrk_aligned+0x34>
 800561a:	1cc4      	adds	r4, r0, #3
 800561c:	f024 0403 	bic.w	r4, r4, #3
 8005620:	42a0      	cmp	r0, r4
 8005622:	d007      	beq.n	8005634 <sbrk_aligned+0x38>
 8005624:	1a21      	subs	r1, r4, r0
 8005626:	4628      	mov	r0, r5
 8005628:	f000 fb6a 	bl	8005d00 <_sbrk_r>
 800562c:	3001      	adds	r0, #1
 800562e:	d101      	bne.n	8005634 <sbrk_aligned+0x38>
 8005630:	f04f 34ff 	mov.w	r4, #4294967295
 8005634:	4620      	mov	r0, r4
 8005636:	bd70      	pop	{r4, r5, r6, pc}
 8005638:	2000057c 	.word	0x2000057c

0800563c <_malloc_r>:
 800563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005640:	1ccd      	adds	r5, r1, #3
 8005642:	f025 0503 	bic.w	r5, r5, #3
 8005646:	3508      	adds	r5, #8
 8005648:	2d0c      	cmp	r5, #12
 800564a:	bf38      	it	cc
 800564c:	250c      	movcc	r5, #12
 800564e:	2d00      	cmp	r5, #0
 8005650:	4607      	mov	r7, r0
 8005652:	db01      	blt.n	8005658 <_malloc_r+0x1c>
 8005654:	42a9      	cmp	r1, r5
 8005656:	d905      	bls.n	8005664 <_malloc_r+0x28>
 8005658:	230c      	movs	r3, #12
 800565a:	603b      	str	r3, [r7, #0]
 800565c:	2600      	movs	r6, #0
 800565e:	4630      	mov	r0, r6
 8005660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005664:	4e2e      	ldr	r6, [pc, #184]	; (8005720 <_malloc_r+0xe4>)
 8005666:	f002 f957 	bl	8007918 <__malloc_lock>
 800566a:	6833      	ldr	r3, [r6, #0]
 800566c:	461c      	mov	r4, r3
 800566e:	bb34      	cbnz	r4, 80056be <_malloc_r+0x82>
 8005670:	4629      	mov	r1, r5
 8005672:	4638      	mov	r0, r7
 8005674:	f7ff ffc2 	bl	80055fc <sbrk_aligned>
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	4604      	mov	r4, r0
 800567c:	d14d      	bne.n	800571a <_malloc_r+0xde>
 800567e:	6834      	ldr	r4, [r6, #0]
 8005680:	4626      	mov	r6, r4
 8005682:	2e00      	cmp	r6, #0
 8005684:	d140      	bne.n	8005708 <_malloc_r+0xcc>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	4631      	mov	r1, r6
 800568a:	4638      	mov	r0, r7
 800568c:	eb04 0803 	add.w	r8, r4, r3
 8005690:	f000 fb36 	bl	8005d00 <_sbrk_r>
 8005694:	4580      	cmp	r8, r0
 8005696:	d13a      	bne.n	800570e <_malloc_r+0xd2>
 8005698:	6821      	ldr	r1, [r4, #0]
 800569a:	3503      	adds	r5, #3
 800569c:	1a6d      	subs	r5, r5, r1
 800569e:	f025 0503 	bic.w	r5, r5, #3
 80056a2:	3508      	adds	r5, #8
 80056a4:	2d0c      	cmp	r5, #12
 80056a6:	bf38      	it	cc
 80056a8:	250c      	movcc	r5, #12
 80056aa:	4629      	mov	r1, r5
 80056ac:	4638      	mov	r0, r7
 80056ae:	f7ff ffa5 	bl	80055fc <sbrk_aligned>
 80056b2:	3001      	adds	r0, #1
 80056b4:	d02b      	beq.n	800570e <_malloc_r+0xd2>
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	442b      	add	r3, r5
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	e00e      	b.n	80056dc <_malloc_r+0xa0>
 80056be:	6822      	ldr	r2, [r4, #0]
 80056c0:	1b52      	subs	r2, r2, r5
 80056c2:	d41e      	bmi.n	8005702 <_malloc_r+0xc6>
 80056c4:	2a0b      	cmp	r2, #11
 80056c6:	d916      	bls.n	80056f6 <_malloc_r+0xba>
 80056c8:	1961      	adds	r1, r4, r5
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	6025      	str	r5, [r4, #0]
 80056ce:	bf18      	it	ne
 80056d0:	6059      	strne	r1, [r3, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	bf08      	it	eq
 80056d6:	6031      	streq	r1, [r6, #0]
 80056d8:	5162      	str	r2, [r4, r5]
 80056da:	604b      	str	r3, [r1, #4]
 80056dc:	4638      	mov	r0, r7
 80056de:	f104 060b 	add.w	r6, r4, #11
 80056e2:	f002 f91f 	bl	8007924 <__malloc_unlock>
 80056e6:	f026 0607 	bic.w	r6, r6, #7
 80056ea:	1d23      	adds	r3, r4, #4
 80056ec:	1af2      	subs	r2, r6, r3
 80056ee:	d0b6      	beq.n	800565e <_malloc_r+0x22>
 80056f0:	1b9b      	subs	r3, r3, r6
 80056f2:	50a3      	str	r3, [r4, r2]
 80056f4:	e7b3      	b.n	800565e <_malloc_r+0x22>
 80056f6:	6862      	ldr	r2, [r4, #4]
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	bf0c      	ite	eq
 80056fc:	6032      	streq	r2, [r6, #0]
 80056fe:	605a      	strne	r2, [r3, #4]
 8005700:	e7ec      	b.n	80056dc <_malloc_r+0xa0>
 8005702:	4623      	mov	r3, r4
 8005704:	6864      	ldr	r4, [r4, #4]
 8005706:	e7b2      	b.n	800566e <_malloc_r+0x32>
 8005708:	4634      	mov	r4, r6
 800570a:	6876      	ldr	r6, [r6, #4]
 800570c:	e7b9      	b.n	8005682 <_malloc_r+0x46>
 800570e:	230c      	movs	r3, #12
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4638      	mov	r0, r7
 8005714:	f002 f906 	bl	8007924 <__malloc_unlock>
 8005718:	e7a1      	b.n	800565e <_malloc_r+0x22>
 800571a:	6025      	str	r5, [r4, #0]
 800571c:	e7de      	b.n	80056dc <_malloc_r+0xa0>
 800571e:	bf00      	nop
 8005720:	20000578 	.word	0x20000578

08005724 <__sfputc_r>:
 8005724:	6893      	ldr	r3, [r2, #8]
 8005726:	3b01      	subs	r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	b410      	push	{r4}
 800572c:	6093      	str	r3, [r2, #8]
 800572e:	da08      	bge.n	8005742 <__sfputc_r+0x1e>
 8005730:	6994      	ldr	r4, [r2, #24]
 8005732:	42a3      	cmp	r3, r4
 8005734:	db01      	blt.n	800573a <__sfputc_r+0x16>
 8005736:	290a      	cmp	r1, #10
 8005738:	d103      	bne.n	8005742 <__sfputc_r+0x1e>
 800573a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800573e:	f001 ba83 	b.w	8006c48 <__swbuf_r>
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	1c58      	adds	r0, r3, #1
 8005746:	6010      	str	r0, [r2, #0]
 8005748:	7019      	strb	r1, [r3, #0]
 800574a:	4608      	mov	r0, r1
 800574c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005750:	4770      	bx	lr

08005752 <__sfputs_r>:
 8005752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005754:	4606      	mov	r6, r0
 8005756:	460f      	mov	r7, r1
 8005758:	4614      	mov	r4, r2
 800575a:	18d5      	adds	r5, r2, r3
 800575c:	42ac      	cmp	r4, r5
 800575e:	d101      	bne.n	8005764 <__sfputs_r+0x12>
 8005760:	2000      	movs	r0, #0
 8005762:	e007      	b.n	8005774 <__sfputs_r+0x22>
 8005764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005768:	463a      	mov	r2, r7
 800576a:	4630      	mov	r0, r6
 800576c:	f7ff ffda 	bl	8005724 <__sfputc_r>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d1f3      	bne.n	800575c <__sfputs_r+0xa>
 8005774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005778 <_vfiprintf_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	460d      	mov	r5, r1
 800577e:	b09d      	sub	sp, #116	; 0x74
 8005780:	4614      	mov	r4, r2
 8005782:	4698      	mov	r8, r3
 8005784:	4606      	mov	r6, r0
 8005786:	b118      	cbz	r0, 8005790 <_vfiprintf_r+0x18>
 8005788:	6983      	ldr	r3, [r0, #24]
 800578a:	b90b      	cbnz	r3, 8005790 <_vfiprintf_r+0x18>
 800578c:	f001 fc3e 	bl	800700c <__sinit>
 8005790:	4b89      	ldr	r3, [pc, #548]	; (80059b8 <_vfiprintf_r+0x240>)
 8005792:	429d      	cmp	r5, r3
 8005794:	d11b      	bne.n	80057ce <_vfiprintf_r+0x56>
 8005796:	6875      	ldr	r5, [r6, #4]
 8005798:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800579a:	07d9      	lsls	r1, r3, #31
 800579c:	d405      	bmi.n	80057aa <_vfiprintf_r+0x32>
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	059a      	lsls	r2, r3, #22
 80057a2:	d402      	bmi.n	80057aa <_vfiprintf_r+0x32>
 80057a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057a6:	f002 f83e 	bl	8007826 <__retarget_lock_acquire_recursive>
 80057aa:	89ab      	ldrh	r3, [r5, #12]
 80057ac:	071b      	lsls	r3, r3, #28
 80057ae:	d501      	bpl.n	80057b4 <_vfiprintf_r+0x3c>
 80057b0:	692b      	ldr	r3, [r5, #16]
 80057b2:	b9eb      	cbnz	r3, 80057f0 <_vfiprintf_r+0x78>
 80057b4:	4629      	mov	r1, r5
 80057b6:	4630      	mov	r0, r6
 80057b8:	f001 fa98 	bl	8006cec <__swsetup_r>
 80057bc:	b1c0      	cbz	r0, 80057f0 <_vfiprintf_r+0x78>
 80057be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057c0:	07dc      	lsls	r4, r3, #31
 80057c2:	d50e      	bpl.n	80057e2 <_vfiprintf_r+0x6a>
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295
 80057c8:	b01d      	add	sp, #116	; 0x74
 80057ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ce:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <_vfiprintf_r+0x244>)
 80057d0:	429d      	cmp	r5, r3
 80057d2:	d101      	bne.n	80057d8 <_vfiprintf_r+0x60>
 80057d4:	68b5      	ldr	r5, [r6, #8]
 80057d6:	e7df      	b.n	8005798 <_vfiprintf_r+0x20>
 80057d8:	4b79      	ldr	r3, [pc, #484]	; (80059c0 <_vfiprintf_r+0x248>)
 80057da:	429d      	cmp	r5, r3
 80057dc:	bf08      	it	eq
 80057de:	68f5      	ldreq	r5, [r6, #12]
 80057e0:	e7da      	b.n	8005798 <_vfiprintf_r+0x20>
 80057e2:	89ab      	ldrh	r3, [r5, #12]
 80057e4:	0598      	lsls	r0, r3, #22
 80057e6:	d4ed      	bmi.n	80057c4 <_vfiprintf_r+0x4c>
 80057e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057ea:	f002 f81d 	bl	8007828 <__retarget_lock_release_recursive>
 80057ee:	e7e9      	b.n	80057c4 <_vfiprintf_r+0x4c>
 80057f0:	2300      	movs	r3, #0
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	2320      	movs	r3, #32
 80057f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80057fe:	2330      	movs	r3, #48	; 0x30
 8005800:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80059c4 <_vfiprintf_r+0x24c>
 8005804:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005808:	f04f 0901 	mov.w	r9, #1
 800580c:	4623      	mov	r3, r4
 800580e:	469a      	mov	sl, r3
 8005810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005814:	b10a      	cbz	r2, 800581a <_vfiprintf_r+0xa2>
 8005816:	2a25      	cmp	r2, #37	; 0x25
 8005818:	d1f9      	bne.n	800580e <_vfiprintf_r+0x96>
 800581a:	ebba 0b04 	subs.w	fp, sl, r4
 800581e:	d00b      	beq.n	8005838 <_vfiprintf_r+0xc0>
 8005820:	465b      	mov	r3, fp
 8005822:	4622      	mov	r2, r4
 8005824:	4629      	mov	r1, r5
 8005826:	4630      	mov	r0, r6
 8005828:	f7ff ff93 	bl	8005752 <__sfputs_r>
 800582c:	3001      	adds	r0, #1
 800582e:	f000 80aa 	beq.w	8005986 <_vfiprintf_r+0x20e>
 8005832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005834:	445a      	add	r2, fp
 8005836:	9209      	str	r2, [sp, #36]	; 0x24
 8005838:	f89a 3000 	ldrb.w	r3, [sl]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a2 	beq.w	8005986 <_vfiprintf_r+0x20e>
 8005842:	2300      	movs	r3, #0
 8005844:	f04f 32ff 	mov.w	r2, #4294967295
 8005848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800584c:	f10a 0a01 	add.w	sl, sl, #1
 8005850:	9304      	str	r3, [sp, #16]
 8005852:	9307      	str	r3, [sp, #28]
 8005854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005858:	931a      	str	r3, [sp, #104]	; 0x68
 800585a:	4654      	mov	r4, sl
 800585c:	2205      	movs	r2, #5
 800585e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005862:	4858      	ldr	r0, [pc, #352]	; (80059c4 <_vfiprintf_r+0x24c>)
 8005864:	f7fa fcd4 	bl	8000210 <memchr>
 8005868:	9a04      	ldr	r2, [sp, #16]
 800586a:	b9d8      	cbnz	r0, 80058a4 <_vfiprintf_r+0x12c>
 800586c:	06d1      	lsls	r1, r2, #27
 800586e:	bf44      	itt	mi
 8005870:	2320      	movmi	r3, #32
 8005872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005876:	0713      	lsls	r3, r2, #28
 8005878:	bf44      	itt	mi
 800587a:	232b      	movmi	r3, #43	; 0x2b
 800587c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005880:	f89a 3000 	ldrb.w	r3, [sl]
 8005884:	2b2a      	cmp	r3, #42	; 0x2a
 8005886:	d015      	beq.n	80058b4 <_vfiprintf_r+0x13c>
 8005888:	9a07      	ldr	r2, [sp, #28]
 800588a:	4654      	mov	r4, sl
 800588c:	2000      	movs	r0, #0
 800588e:	f04f 0c0a 	mov.w	ip, #10
 8005892:	4621      	mov	r1, r4
 8005894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005898:	3b30      	subs	r3, #48	; 0x30
 800589a:	2b09      	cmp	r3, #9
 800589c:	d94e      	bls.n	800593c <_vfiprintf_r+0x1c4>
 800589e:	b1b0      	cbz	r0, 80058ce <_vfiprintf_r+0x156>
 80058a0:	9207      	str	r2, [sp, #28]
 80058a2:	e014      	b.n	80058ce <_vfiprintf_r+0x156>
 80058a4:	eba0 0308 	sub.w	r3, r0, r8
 80058a8:	fa09 f303 	lsl.w	r3, r9, r3
 80058ac:	4313      	orrs	r3, r2
 80058ae:	9304      	str	r3, [sp, #16]
 80058b0:	46a2      	mov	sl, r4
 80058b2:	e7d2      	b.n	800585a <_vfiprintf_r+0xe2>
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	1d19      	adds	r1, r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	9103      	str	r1, [sp, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfbb      	ittet	lt
 80058c0:	425b      	neglt	r3, r3
 80058c2:	f042 0202 	orrlt.w	r2, r2, #2
 80058c6:	9307      	strge	r3, [sp, #28]
 80058c8:	9307      	strlt	r3, [sp, #28]
 80058ca:	bfb8      	it	lt
 80058cc:	9204      	strlt	r2, [sp, #16]
 80058ce:	7823      	ldrb	r3, [r4, #0]
 80058d0:	2b2e      	cmp	r3, #46	; 0x2e
 80058d2:	d10c      	bne.n	80058ee <_vfiprintf_r+0x176>
 80058d4:	7863      	ldrb	r3, [r4, #1]
 80058d6:	2b2a      	cmp	r3, #42	; 0x2a
 80058d8:	d135      	bne.n	8005946 <_vfiprintf_r+0x1ce>
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	1d1a      	adds	r2, r3, #4
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	9203      	str	r2, [sp, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bfb8      	it	lt
 80058e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80058ea:	3402      	adds	r4, #2
 80058ec:	9305      	str	r3, [sp, #20]
 80058ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80059d4 <_vfiprintf_r+0x25c>
 80058f2:	7821      	ldrb	r1, [r4, #0]
 80058f4:	2203      	movs	r2, #3
 80058f6:	4650      	mov	r0, sl
 80058f8:	f7fa fc8a 	bl	8000210 <memchr>
 80058fc:	b140      	cbz	r0, 8005910 <_vfiprintf_r+0x198>
 80058fe:	2340      	movs	r3, #64	; 0x40
 8005900:	eba0 000a 	sub.w	r0, r0, sl
 8005904:	fa03 f000 	lsl.w	r0, r3, r0
 8005908:	9b04      	ldr	r3, [sp, #16]
 800590a:	4303      	orrs	r3, r0
 800590c:	3401      	adds	r4, #1
 800590e:	9304      	str	r3, [sp, #16]
 8005910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005914:	482c      	ldr	r0, [pc, #176]	; (80059c8 <_vfiprintf_r+0x250>)
 8005916:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800591a:	2206      	movs	r2, #6
 800591c:	f7fa fc78 	bl	8000210 <memchr>
 8005920:	2800      	cmp	r0, #0
 8005922:	d03f      	beq.n	80059a4 <_vfiprintf_r+0x22c>
 8005924:	4b29      	ldr	r3, [pc, #164]	; (80059cc <_vfiprintf_r+0x254>)
 8005926:	bb1b      	cbnz	r3, 8005970 <_vfiprintf_r+0x1f8>
 8005928:	9b03      	ldr	r3, [sp, #12]
 800592a:	3307      	adds	r3, #7
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	9303      	str	r3, [sp, #12]
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005936:	443b      	add	r3, r7
 8005938:	9309      	str	r3, [sp, #36]	; 0x24
 800593a:	e767      	b.n	800580c <_vfiprintf_r+0x94>
 800593c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005940:	460c      	mov	r4, r1
 8005942:	2001      	movs	r0, #1
 8005944:	e7a5      	b.n	8005892 <_vfiprintf_r+0x11a>
 8005946:	2300      	movs	r3, #0
 8005948:	3401      	adds	r4, #1
 800594a:	9305      	str	r3, [sp, #20]
 800594c:	4619      	mov	r1, r3
 800594e:	f04f 0c0a 	mov.w	ip, #10
 8005952:	4620      	mov	r0, r4
 8005954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005958:	3a30      	subs	r2, #48	; 0x30
 800595a:	2a09      	cmp	r2, #9
 800595c:	d903      	bls.n	8005966 <_vfiprintf_r+0x1ee>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d0c5      	beq.n	80058ee <_vfiprintf_r+0x176>
 8005962:	9105      	str	r1, [sp, #20]
 8005964:	e7c3      	b.n	80058ee <_vfiprintf_r+0x176>
 8005966:	fb0c 2101 	mla	r1, ip, r1, r2
 800596a:	4604      	mov	r4, r0
 800596c:	2301      	movs	r3, #1
 800596e:	e7f0      	b.n	8005952 <_vfiprintf_r+0x1da>
 8005970:	ab03      	add	r3, sp, #12
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	462a      	mov	r2, r5
 8005976:	4b16      	ldr	r3, [pc, #88]	; (80059d0 <_vfiprintf_r+0x258>)
 8005978:	a904      	add	r1, sp, #16
 800597a:	4630      	mov	r0, r6
 800597c:	f3af 8000 	nop.w
 8005980:	4607      	mov	r7, r0
 8005982:	1c78      	adds	r0, r7, #1
 8005984:	d1d6      	bne.n	8005934 <_vfiprintf_r+0x1bc>
 8005986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005988:	07d9      	lsls	r1, r3, #31
 800598a:	d405      	bmi.n	8005998 <_vfiprintf_r+0x220>
 800598c:	89ab      	ldrh	r3, [r5, #12]
 800598e:	059a      	lsls	r2, r3, #22
 8005990:	d402      	bmi.n	8005998 <_vfiprintf_r+0x220>
 8005992:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005994:	f001 ff48 	bl	8007828 <__retarget_lock_release_recursive>
 8005998:	89ab      	ldrh	r3, [r5, #12]
 800599a:	065b      	lsls	r3, r3, #25
 800599c:	f53f af12 	bmi.w	80057c4 <_vfiprintf_r+0x4c>
 80059a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059a2:	e711      	b.n	80057c8 <_vfiprintf_r+0x50>
 80059a4:	ab03      	add	r3, sp, #12
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	462a      	mov	r2, r5
 80059aa:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <_vfiprintf_r+0x258>)
 80059ac:	a904      	add	r1, sp, #16
 80059ae:	4630      	mov	r0, r6
 80059b0:	f000 f880 	bl	8005ab4 <_printf_i>
 80059b4:	e7e4      	b.n	8005980 <_vfiprintf_r+0x208>
 80059b6:	bf00      	nop
 80059b8:	08008a4c 	.word	0x08008a4c
 80059bc:	08008a6c 	.word	0x08008a6c
 80059c0:	08008a2c 	.word	0x08008a2c
 80059c4:	08008894 	.word	0x08008894
 80059c8:	0800889e 	.word	0x0800889e
 80059cc:	00000000 	.word	0x00000000
 80059d0:	08005753 	.word	0x08005753
 80059d4:	0800889a 	.word	0x0800889a

080059d8 <_printf_common>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	4616      	mov	r6, r2
 80059de:	4699      	mov	r9, r3
 80059e0:	688a      	ldr	r2, [r1, #8]
 80059e2:	690b      	ldr	r3, [r1, #16]
 80059e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	bfb8      	it	lt
 80059ec:	4613      	movlt	r3, r2
 80059ee:	6033      	str	r3, [r6, #0]
 80059f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059f4:	4607      	mov	r7, r0
 80059f6:	460c      	mov	r4, r1
 80059f8:	b10a      	cbz	r2, 80059fe <_printf_common+0x26>
 80059fa:	3301      	adds	r3, #1
 80059fc:	6033      	str	r3, [r6, #0]
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	0699      	lsls	r1, r3, #26
 8005a02:	bf42      	ittt	mi
 8005a04:	6833      	ldrmi	r3, [r6, #0]
 8005a06:	3302      	addmi	r3, #2
 8005a08:	6033      	strmi	r3, [r6, #0]
 8005a0a:	6825      	ldr	r5, [r4, #0]
 8005a0c:	f015 0506 	ands.w	r5, r5, #6
 8005a10:	d106      	bne.n	8005a20 <_printf_common+0x48>
 8005a12:	f104 0a19 	add.w	sl, r4, #25
 8005a16:	68e3      	ldr	r3, [r4, #12]
 8005a18:	6832      	ldr	r2, [r6, #0]
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	42ab      	cmp	r3, r5
 8005a1e:	dc26      	bgt.n	8005a6e <_printf_common+0x96>
 8005a20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a24:	1e13      	subs	r3, r2, #0
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	2301      	movne	r3, #1
 8005a2c:	0692      	lsls	r2, r2, #26
 8005a2e:	d42b      	bmi.n	8005a88 <_printf_common+0xb0>
 8005a30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d01e      	beq.n	8005a7c <_printf_common+0xa4>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	68e5      	ldr	r5, [r4, #12]
 8005a42:	6832      	ldr	r2, [r6, #0]
 8005a44:	f003 0306 	and.w	r3, r3, #6
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	bf08      	it	eq
 8005a4c:	1aad      	subeq	r5, r5, r2
 8005a4e:	68a3      	ldr	r3, [r4, #8]
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	bf0c      	ite	eq
 8005a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a58:	2500      	movne	r5, #0
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	bfc4      	itt	gt
 8005a5e:	1a9b      	subgt	r3, r3, r2
 8005a60:	18ed      	addgt	r5, r5, r3
 8005a62:	2600      	movs	r6, #0
 8005a64:	341a      	adds	r4, #26
 8005a66:	42b5      	cmp	r5, r6
 8005a68:	d11a      	bne.n	8005aa0 <_printf_common+0xc8>
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	e008      	b.n	8005a80 <_printf_common+0xa8>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	4652      	mov	r2, sl
 8005a72:	4649      	mov	r1, r9
 8005a74:	4638      	mov	r0, r7
 8005a76:	47c0      	blx	r8
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d103      	bne.n	8005a84 <_printf_common+0xac>
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a84:	3501      	adds	r5, #1
 8005a86:	e7c6      	b.n	8005a16 <_printf_common+0x3e>
 8005a88:	18e1      	adds	r1, r4, r3
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	2030      	movs	r0, #48	; 0x30
 8005a8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a92:	4422      	add	r2, r4
 8005a94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a9c:	3302      	adds	r3, #2
 8005a9e:	e7c7      	b.n	8005a30 <_printf_common+0x58>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	47c0      	blx	r8
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d0e6      	beq.n	8005a7c <_printf_common+0xa4>
 8005aae:	3601      	adds	r6, #1
 8005ab0:	e7d9      	b.n	8005a66 <_printf_common+0x8e>
	...

08005ab4 <_printf_i>:
 8005ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	7e0f      	ldrb	r7, [r1, #24]
 8005aba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005abc:	2f78      	cmp	r7, #120	; 0x78
 8005abe:	4691      	mov	r9, r2
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	469a      	mov	sl, r3
 8005ac6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aca:	d807      	bhi.n	8005adc <_printf_i+0x28>
 8005acc:	2f62      	cmp	r7, #98	; 0x62
 8005ace:	d80a      	bhi.n	8005ae6 <_printf_i+0x32>
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	f000 80d8 	beq.w	8005c86 <_printf_i+0x1d2>
 8005ad6:	2f58      	cmp	r7, #88	; 0x58
 8005ad8:	f000 80a3 	beq.w	8005c22 <_printf_i+0x16e>
 8005adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ae4:	e03a      	b.n	8005b5c <_printf_i+0xa8>
 8005ae6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aea:	2b15      	cmp	r3, #21
 8005aec:	d8f6      	bhi.n	8005adc <_printf_i+0x28>
 8005aee:	a101      	add	r1, pc, #4	; (adr r1, 8005af4 <_printf_i+0x40>)
 8005af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005af4:	08005b4d 	.word	0x08005b4d
 8005af8:	08005b61 	.word	0x08005b61
 8005afc:	08005add 	.word	0x08005add
 8005b00:	08005add 	.word	0x08005add
 8005b04:	08005add 	.word	0x08005add
 8005b08:	08005add 	.word	0x08005add
 8005b0c:	08005b61 	.word	0x08005b61
 8005b10:	08005add 	.word	0x08005add
 8005b14:	08005add 	.word	0x08005add
 8005b18:	08005add 	.word	0x08005add
 8005b1c:	08005add 	.word	0x08005add
 8005b20:	08005c6d 	.word	0x08005c6d
 8005b24:	08005b91 	.word	0x08005b91
 8005b28:	08005c4f 	.word	0x08005c4f
 8005b2c:	08005add 	.word	0x08005add
 8005b30:	08005add 	.word	0x08005add
 8005b34:	08005c8f 	.word	0x08005c8f
 8005b38:	08005add 	.word	0x08005add
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005add 	.word	0x08005add
 8005b44:	08005add 	.word	0x08005add
 8005b48:	08005c57 	.word	0x08005c57
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	1d1a      	adds	r2, r3, #4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	602a      	str	r2, [r5, #0]
 8005b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e0a3      	b.n	8005ca8 <_printf_i+0x1f4>
 8005b60:	6820      	ldr	r0, [r4, #0]
 8005b62:	6829      	ldr	r1, [r5, #0]
 8005b64:	0606      	lsls	r6, r0, #24
 8005b66:	f101 0304 	add.w	r3, r1, #4
 8005b6a:	d50a      	bpl.n	8005b82 <_printf_i+0xce>
 8005b6c:	680e      	ldr	r6, [r1, #0]
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	2e00      	cmp	r6, #0
 8005b72:	da03      	bge.n	8005b7c <_printf_i+0xc8>
 8005b74:	232d      	movs	r3, #45	; 0x2d
 8005b76:	4276      	negs	r6, r6
 8005b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b7c:	485e      	ldr	r0, [pc, #376]	; (8005cf8 <_printf_i+0x244>)
 8005b7e:	230a      	movs	r3, #10
 8005b80:	e019      	b.n	8005bb6 <_printf_i+0x102>
 8005b82:	680e      	ldr	r6, [r1, #0]
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b8a:	bf18      	it	ne
 8005b8c:	b236      	sxthne	r6, r6
 8005b8e:	e7ef      	b.n	8005b70 <_printf_i+0xbc>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	6820      	ldr	r0, [r4, #0]
 8005b94:	1d19      	adds	r1, r3, #4
 8005b96:	6029      	str	r1, [r5, #0]
 8005b98:	0601      	lsls	r1, r0, #24
 8005b9a:	d501      	bpl.n	8005ba0 <_printf_i+0xec>
 8005b9c:	681e      	ldr	r6, [r3, #0]
 8005b9e:	e002      	b.n	8005ba6 <_printf_i+0xf2>
 8005ba0:	0646      	lsls	r6, r0, #25
 8005ba2:	d5fb      	bpl.n	8005b9c <_printf_i+0xe8>
 8005ba4:	881e      	ldrh	r6, [r3, #0]
 8005ba6:	4854      	ldr	r0, [pc, #336]	; (8005cf8 <_printf_i+0x244>)
 8005ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8005baa:	bf0c      	ite	eq
 8005bac:	2308      	moveq	r3, #8
 8005bae:	230a      	movne	r3, #10
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bb6:	6865      	ldr	r5, [r4, #4]
 8005bb8:	60a5      	str	r5, [r4, #8]
 8005bba:	2d00      	cmp	r5, #0
 8005bbc:	bfa2      	ittt	ge
 8005bbe:	6821      	ldrge	r1, [r4, #0]
 8005bc0:	f021 0104 	bicge.w	r1, r1, #4
 8005bc4:	6021      	strge	r1, [r4, #0]
 8005bc6:	b90e      	cbnz	r6, 8005bcc <_printf_i+0x118>
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	d04d      	beq.n	8005c68 <_printf_i+0x1b4>
 8005bcc:	4615      	mov	r5, r2
 8005bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8005bd6:	5dc7      	ldrb	r7, [r0, r7]
 8005bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bdc:	4637      	mov	r7, r6
 8005bde:	42bb      	cmp	r3, r7
 8005be0:	460e      	mov	r6, r1
 8005be2:	d9f4      	bls.n	8005bce <_printf_i+0x11a>
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d10b      	bne.n	8005c00 <_printf_i+0x14c>
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	07de      	lsls	r6, r3, #31
 8005bec:	d508      	bpl.n	8005c00 <_printf_i+0x14c>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	6861      	ldr	r1, [r4, #4]
 8005bf2:	4299      	cmp	r1, r3
 8005bf4:	bfde      	ittt	le
 8005bf6:	2330      	movle	r3, #48	; 0x30
 8005bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c00:	1b52      	subs	r2, r2, r5
 8005c02:	6122      	str	r2, [r4, #16]
 8005c04:	f8cd a000 	str.w	sl, [sp]
 8005c08:	464b      	mov	r3, r9
 8005c0a:	aa03      	add	r2, sp, #12
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4640      	mov	r0, r8
 8005c10:	f7ff fee2 	bl	80059d8 <_printf_common>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d14c      	bne.n	8005cb2 <_printf_i+0x1fe>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	b004      	add	sp, #16
 8005c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c22:	4835      	ldr	r0, [pc, #212]	; (8005cf8 <_printf_i+0x244>)
 8005c24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c28:	6829      	ldr	r1, [r5, #0]
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c30:	6029      	str	r1, [r5, #0]
 8005c32:	061d      	lsls	r5, r3, #24
 8005c34:	d514      	bpl.n	8005c60 <_printf_i+0x1ac>
 8005c36:	07df      	lsls	r7, r3, #31
 8005c38:	bf44      	itt	mi
 8005c3a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c3e:	6023      	strmi	r3, [r4, #0]
 8005c40:	b91e      	cbnz	r6, 8005c4a <_printf_i+0x196>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	f023 0320 	bic.w	r3, r3, #32
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	2310      	movs	r3, #16
 8005c4c:	e7b0      	b.n	8005bb0 <_printf_i+0xfc>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f043 0320 	orr.w	r3, r3, #32
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	2378      	movs	r3, #120	; 0x78
 8005c58:	4828      	ldr	r0, [pc, #160]	; (8005cfc <_printf_i+0x248>)
 8005c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c5e:	e7e3      	b.n	8005c28 <_printf_i+0x174>
 8005c60:	0659      	lsls	r1, r3, #25
 8005c62:	bf48      	it	mi
 8005c64:	b2b6      	uxthmi	r6, r6
 8005c66:	e7e6      	b.n	8005c36 <_printf_i+0x182>
 8005c68:	4615      	mov	r5, r2
 8005c6a:	e7bb      	b.n	8005be4 <_printf_i+0x130>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	6826      	ldr	r6, [r4, #0]
 8005c70:	6961      	ldr	r1, [r4, #20]
 8005c72:	1d18      	adds	r0, r3, #4
 8005c74:	6028      	str	r0, [r5, #0]
 8005c76:	0635      	lsls	r5, r6, #24
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	d501      	bpl.n	8005c80 <_printf_i+0x1cc>
 8005c7c:	6019      	str	r1, [r3, #0]
 8005c7e:	e002      	b.n	8005c86 <_printf_i+0x1d2>
 8005c80:	0670      	lsls	r0, r6, #25
 8005c82:	d5fb      	bpl.n	8005c7c <_printf_i+0x1c8>
 8005c84:	8019      	strh	r1, [r3, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	6123      	str	r3, [r4, #16]
 8005c8a:	4615      	mov	r5, r2
 8005c8c:	e7ba      	b.n	8005c04 <_printf_i+0x150>
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	1d1a      	adds	r2, r3, #4
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	681d      	ldr	r5, [r3, #0]
 8005c96:	6862      	ldr	r2, [r4, #4]
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f7fa fab8 	bl	8000210 <memchr>
 8005ca0:	b108      	cbz	r0, 8005ca6 <_printf_i+0x1f2>
 8005ca2:	1b40      	subs	r0, r0, r5
 8005ca4:	6060      	str	r0, [r4, #4]
 8005ca6:	6863      	ldr	r3, [r4, #4]
 8005ca8:	6123      	str	r3, [r4, #16]
 8005caa:	2300      	movs	r3, #0
 8005cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb0:	e7a8      	b.n	8005c04 <_printf_i+0x150>
 8005cb2:	6923      	ldr	r3, [r4, #16]
 8005cb4:	462a      	mov	r2, r5
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	4640      	mov	r0, r8
 8005cba:	47d0      	blx	sl
 8005cbc:	3001      	adds	r0, #1
 8005cbe:	d0ab      	beq.n	8005c18 <_printf_i+0x164>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	079b      	lsls	r3, r3, #30
 8005cc4:	d413      	bmi.n	8005cee <_printf_i+0x23a>
 8005cc6:	68e0      	ldr	r0, [r4, #12]
 8005cc8:	9b03      	ldr	r3, [sp, #12]
 8005cca:	4298      	cmp	r0, r3
 8005ccc:	bfb8      	it	lt
 8005cce:	4618      	movlt	r0, r3
 8005cd0:	e7a4      	b.n	8005c1c <_printf_i+0x168>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	4632      	mov	r2, r6
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	4640      	mov	r0, r8
 8005cda:	47d0      	blx	sl
 8005cdc:	3001      	adds	r0, #1
 8005cde:	d09b      	beq.n	8005c18 <_printf_i+0x164>
 8005ce0:	3501      	adds	r5, #1
 8005ce2:	68e3      	ldr	r3, [r4, #12]
 8005ce4:	9903      	ldr	r1, [sp, #12]
 8005ce6:	1a5b      	subs	r3, r3, r1
 8005ce8:	42ab      	cmp	r3, r5
 8005cea:	dcf2      	bgt.n	8005cd2 <_printf_i+0x21e>
 8005cec:	e7eb      	b.n	8005cc6 <_printf_i+0x212>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	f104 0619 	add.w	r6, r4, #25
 8005cf4:	e7f5      	b.n	8005ce2 <_printf_i+0x22e>
 8005cf6:	bf00      	nop
 8005cf8:	080088a5 	.word	0x080088a5
 8005cfc:	080088b6 	.word	0x080088b6

08005d00 <_sbrk_r>:
 8005d00:	b538      	push	{r3, r4, r5, lr}
 8005d02:	4d06      	ldr	r5, [pc, #24]	; (8005d1c <_sbrk_r+0x1c>)
 8005d04:	2300      	movs	r3, #0
 8005d06:	4604      	mov	r4, r0
 8005d08:	4608      	mov	r0, r1
 8005d0a:	602b      	str	r3, [r5, #0]
 8005d0c:	f7fb fce8 	bl	80016e0 <_sbrk>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d102      	bne.n	8005d1a <_sbrk_r+0x1a>
 8005d14:	682b      	ldr	r3, [r5, #0]
 8005d16:	b103      	cbz	r3, 8005d1a <_sbrk_r+0x1a>
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	20000584 	.word	0x20000584

08005d20 <strchr>:
 8005d20:	b2c9      	uxtb	r1, r1
 8005d22:	4603      	mov	r3, r0
 8005d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d28:	b11a      	cbz	r2, 8005d32 <strchr+0x12>
 8005d2a:	428a      	cmp	r2, r1
 8005d2c:	d1f9      	bne.n	8005d22 <strchr+0x2>
 8005d2e:	4618      	mov	r0, r3
 8005d30:	4770      	bx	lr
 8005d32:	2900      	cmp	r1, #0
 8005d34:	bf18      	it	ne
 8005d36:	2300      	movne	r3, #0
 8005d38:	e7f9      	b.n	8005d2e <strchr+0xe>

08005d3a <strncmp>:
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	b17a      	cbz	r2, 8005d5e <strncmp+0x24>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	3901      	subs	r1, #1
 8005d42:	1884      	adds	r4, r0, r2
 8005d44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005d48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005d4c:	4290      	cmp	r0, r2
 8005d4e:	d101      	bne.n	8005d54 <strncmp+0x1a>
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d101      	bne.n	8005d58 <strncmp+0x1e>
 8005d54:	1a80      	subs	r0, r0, r2
 8005d56:	bd10      	pop	{r4, pc}
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d1f3      	bne.n	8005d44 <strncmp+0xa>
 8005d5c:	e7fa      	b.n	8005d54 <strncmp+0x1a>
 8005d5e:	4610      	mov	r0, r2
 8005d60:	e7f9      	b.n	8005d56 <strncmp+0x1c>

08005d62 <sulp>:
 8005d62:	b570      	push	{r4, r5, r6, lr}
 8005d64:	4604      	mov	r4, r0
 8005d66:	460d      	mov	r5, r1
 8005d68:	ec45 4b10 	vmov	d0, r4, r5
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	f002 f951 	bl	8008014 <__ulp>
 8005d72:	ec51 0b10 	vmov	r0, r1, d0
 8005d76:	b17e      	cbz	r6, 8005d98 <sulp+0x36>
 8005d78:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005d7c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dd09      	ble.n	8005d98 <sulp+0x36>
 8005d84:	051b      	lsls	r3, r3, #20
 8005d86:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005d8a:	2400      	movs	r4, #0
 8005d8c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	f7fa fc48 	bl	8000628 <__aeabi_dmul>
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	0000      	movs	r0, r0
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <_strtod_l>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	ed2d 8b02 	vpush	{d8}
 8005da8:	b09d      	sub	sp, #116	; 0x74
 8005daa:	461f      	mov	r7, r3
 8005dac:	2300      	movs	r3, #0
 8005dae:	9318      	str	r3, [sp, #96]	; 0x60
 8005db0:	4ba2      	ldr	r3, [pc, #648]	; (800603c <_strtod_l+0x29c>)
 8005db2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	9305      	str	r3, [sp, #20]
 8005db8:	4604      	mov	r4, r0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	4688      	mov	r8, r1
 8005dbe:	f7fa fa19 	bl	80001f4 <strlen>
 8005dc2:	f04f 0a00 	mov.w	sl, #0
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	f04f 0b00 	mov.w	fp, #0
 8005dcc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dd2:	781a      	ldrb	r2, [r3, #0]
 8005dd4:	2a2b      	cmp	r2, #43	; 0x2b
 8005dd6:	d04e      	beq.n	8005e76 <_strtod_l+0xd6>
 8005dd8:	d83b      	bhi.n	8005e52 <_strtod_l+0xb2>
 8005dda:	2a0d      	cmp	r2, #13
 8005ddc:	d834      	bhi.n	8005e48 <_strtod_l+0xa8>
 8005dde:	2a08      	cmp	r2, #8
 8005de0:	d834      	bhi.n	8005e4c <_strtod_l+0xac>
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d03e      	beq.n	8005e64 <_strtod_l+0xc4>
 8005de6:	2300      	movs	r3, #0
 8005de8:	930a      	str	r3, [sp, #40]	; 0x28
 8005dea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005dec:	7833      	ldrb	r3, [r6, #0]
 8005dee:	2b30      	cmp	r3, #48	; 0x30
 8005df0:	f040 80b0 	bne.w	8005f54 <_strtod_l+0x1b4>
 8005df4:	7873      	ldrb	r3, [r6, #1]
 8005df6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005dfa:	2b58      	cmp	r3, #88	; 0x58
 8005dfc:	d168      	bne.n	8005ed0 <_strtod_l+0x130>
 8005dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	ab18      	add	r3, sp, #96	; 0x60
 8005e04:	9702      	str	r7, [sp, #8]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4a8d      	ldr	r2, [pc, #564]	; (8006040 <_strtod_l+0x2a0>)
 8005e0a:	ab19      	add	r3, sp, #100	; 0x64
 8005e0c:	a917      	add	r1, sp, #92	; 0x5c
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f001 fa00 	bl	8007214 <__gethex>
 8005e14:	f010 0707 	ands.w	r7, r0, #7
 8005e18:	4605      	mov	r5, r0
 8005e1a:	d005      	beq.n	8005e28 <_strtod_l+0x88>
 8005e1c:	2f06      	cmp	r7, #6
 8005e1e:	d12c      	bne.n	8005e7a <_strtod_l+0xda>
 8005e20:	3601      	adds	r6, #1
 8005e22:	2300      	movs	r3, #0
 8005e24:	9617      	str	r6, [sp, #92]	; 0x5c
 8005e26:	930a      	str	r3, [sp, #40]	; 0x28
 8005e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 8590 	bne.w	8006950 <_strtod_l+0xbb0>
 8005e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e32:	b1eb      	cbz	r3, 8005e70 <_strtod_l+0xd0>
 8005e34:	4652      	mov	r2, sl
 8005e36:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e3a:	ec43 2b10 	vmov	d0, r2, r3
 8005e3e:	b01d      	add	sp, #116	; 0x74
 8005e40:	ecbd 8b02 	vpop	{d8}
 8005e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e48:	2a20      	cmp	r2, #32
 8005e4a:	d1cc      	bne.n	8005de6 <_strtod_l+0x46>
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e50:	e7be      	b.n	8005dd0 <_strtod_l+0x30>
 8005e52:	2a2d      	cmp	r2, #45	; 0x2d
 8005e54:	d1c7      	bne.n	8005de6 <_strtod_l+0x46>
 8005e56:	2201      	movs	r2, #1
 8005e58:	920a      	str	r2, [sp, #40]	; 0x28
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1c2      	bne.n	8005dea <_strtod_l+0x4a>
 8005e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e66:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 856e 	bne.w	800694c <_strtod_l+0xbac>
 8005e70:	4652      	mov	r2, sl
 8005e72:	465b      	mov	r3, fp
 8005e74:	e7e1      	b.n	8005e3a <_strtod_l+0x9a>
 8005e76:	2200      	movs	r2, #0
 8005e78:	e7ee      	b.n	8005e58 <_strtod_l+0xb8>
 8005e7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005e7c:	b13a      	cbz	r2, 8005e8e <_strtod_l+0xee>
 8005e7e:	2135      	movs	r1, #53	; 0x35
 8005e80:	a81a      	add	r0, sp, #104	; 0x68
 8005e82:	f002 f9d2 	bl	800822a <__copybits>
 8005e86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f001 fd91 	bl	80079b0 <_Bfree>
 8005e8e:	3f01      	subs	r7, #1
 8005e90:	2f04      	cmp	r7, #4
 8005e92:	d806      	bhi.n	8005ea2 <_strtod_l+0x102>
 8005e94:	e8df f007 	tbb	[pc, r7]
 8005e98:	1714030a 	.word	0x1714030a
 8005e9c:	0a          	.byte	0x0a
 8005e9d:	00          	.byte	0x00
 8005e9e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005ea2:	0728      	lsls	r0, r5, #28
 8005ea4:	d5c0      	bpl.n	8005e28 <_strtod_l+0x88>
 8005ea6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005eaa:	e7bd      	b.n	8005e28 <_strtod_l+0x88>
 8005eac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005eb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005eb2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005eb6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005eba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ebe:	e7f0      	b.n	8005ea2 <_strtod_l+0x102>
 8005ec0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006044 <_strtod_l+0x2a4>
 8005ec4:	e7ed      	b.n	8005ea2 <_strtod_l+0x102>
 8005ec6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005eca:	f04f 3aff 	mov.w	sl, #4294967295
 8005ece:	e7e8      	b.n	8005ea2 <_strtod_l+0x102>
 8005ed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ed6:	785b      	ldrb	r3, [r3, #1]
 8005ed8:	2b30      	cmp	r3, #48	; 0x30
 8005eda:	d0f9      	beq.n	8005ed0 <_strtod_l+0x130>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0a3      	beq.n	8005e28 <_strtod_l+0x88>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f04f 0900 	mov.w	r9, #0
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ef0:	464f      	mov	r7, r9
 8005ef2:	220a      	movs	r2, #10
 8005ef4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005ef6:	7806      	ldrb	r6, [r0, #0]
 8005ef8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005efc:	b2d9      	uxtb	r1, r3
 8005efe:	2909      	cmp	r1, #9
 8005f00:	d92a      	bls.n	8005f58 <_strtod_l+0x1b8>
 8005f02:	9905      	ldr	r1, [sp, #20]
 8005f04:	462a      	mov	r2, r5
 8005f06:	f7ff ff18 	bl	8005d3a <strncmp>
 8005f0a:	b398      	cbz	r0, 8005f74 <_strtod_l+0x1d4>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4632      	mov	r2, r6
 8005f10:	463d      	mov	r5, r7
 8005f12:	9005      	str	r0, [sp, #20]
 8005f14:	4603      	mov	r3, r0
 8005f16:	2a65      	cmp	r2, #101	; 0x65
 8005f18:	d001      	beq.n	8005f1e <_strtod_l+0x17e>
 8005f1a:	2a45      	cmp	r2, #69	; 0x45
 8005f1c:	d118      	bne.n	8005f50 <_strtod_l+0x1b0>
 8005f1e:	b91d      	cbnz	r5, 8005f28 <_strtod_l+0x188>
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	4302      	orrs	r2, r0
 8005f24:	d09e      	beq.n	8005e64 <_strtod_l+0xc4>
 8005f26:	2500      	movs	r5, #0
 8005f28:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005f2c:	f108 0201 	add.w	r2, r8, #1
 8005f30:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f32:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005f36:	2a2b      	cmp	r2, #43	; 0x2b
 8005f38:	d075      	beq.n	8006026 <_strtod_l+0x286>
 8005f3a:	2a2d      	cmp	r2, #45	; 0x2d
 8005f3c:	d07b      	beq.n	8006036 <_strtod_l+0x296>
 8005f3e:	f04f 0c00 	mov.w	ip, #0
 8005f42:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005f46:	2909      	cmp	r1, #9
 8005f48:	f240 8082 	bls.w	8006050 <_strtod_l+0x2b0>
 8005f4c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f50:	2600      	movs	r6, #0
 8005f52:	e09d      	b.n	8006090 <_strtod_l+0x2f0>
 8005f54:	2300      	movs	r3, #0
 8005f56:	e7c4      	b.n	8005ee2 <_strtod_l+0x142>
 8005f58:	2f08      	cmp	r7, #8
 8005f5a:	bfd8      	it	le
 8005f5c:	9907      	ldrle	r1, [sp, #28]
 8005f5e:	f100 0001 	add.w	r0, r0, #1
 8005f62:	bfda      	itte	le
 8005f64:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f68:	9307      	strle	r3, [sp, #28]
 8005f6a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005f6e:	3701      	adds	r7, #1
 8005f70:	9017      	str	r0, [sp, #92]	; 0x5c
 8005f72:	e7bf      	b.n	8005ef4 <_strtod_l+0x154>
 8005f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f76:	195a      	adds	r2, r3, r5
 8005f78:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f7a:	5d5a      	ldrb	r2, [r3, r5]
 8005f7c:	2f00      	cmp	r7, #0
 8005f7e:	d037      	beq.n	8005ff0 <_strtod_l+0x250>
 8005f80:	9005      	str	r0, [sp, #20]
 8005f82:	463d      	mov	r5, r7
 8005f84:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d912      	bls.n	8005fb2 <_strtod_l+0x212>
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e7c2      	b.n	8005f16 <_strtod_l+0x176>
 8005f90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f96:	785a      	ldrb	r2, [r3, #1]
 8005f98:	3001      	adds	r0, #1
 8005f9a:	2a30      	cmp	r2, #48	; 0x30
 8005f9c:	d0f8      	beq.n	8005f90 <_strtod_l+0x1f0>
 8005f9e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005fa2:	2b08      	cmp	r3, #8
 8005fa4:	f200 84d9 	bhi.w	800695a <_strtod_l+0xbba>
 8005fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005faa:	9005      	str	r0, [sp, #20]
 8005fac:	2000      	movs	r0, #0
 8005fae:	9308      	str	r3, [sp, #32]
 8005fb0:	4605      	mov	r5, r0
 8005fb2:	3a30      	subs	r2, #48	; 0x30
 8005fb4:	f100 0301 	add.w	r3, r0, #1
 8005fb8:	d014      	beq.n	8005fe4 <_strtod_l+0x244>
 8005fba:	9905      	ldr	r1, [sp, #20]
 8005fbc:	4419      	add	r1, r3
 8005fbe:	9105      	str	r1, [sp, #20]
 8005fc0:	462b      	mov	r3, r5
 8005fc2:	eb00 0e05 	add.w	lr, r0, r5
 8005fc6:	210a      	movs	r1, #10
 8005fc8:	4573      	cmp	r3, lr
 8005fca:	d113      	bne.n	8005ff4 <_strtod_l+0x254>
 8005fcc:	182b      	adds	r3, r5, r0
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	f105 0501 	add.w	r5, r5, #1
 8005fd4:	4405      	add	r5, r0
 8005fd6:	dc1c      	bgt.n	8006012 <_strtod_l+0x272>
 8005fd8:	9907      	ldr	r1, [sp, #28]
 8005fda:	230a      	movs	r3, #10
 8005fdc:	fb03 2301 	mla	r3, r3, r1, r2
 8005fe0:	9307      	str	r3, [sp, #28]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fe6:	1c51      	adds	r1, r2, #1
 8005fe8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005fea:	7852      	ldrb	r2, [r2, #1]
 8005fec:	4618      	mov	r0, r3
 8005fee:	e7c9      	b.n	8005f84 <_strtod_l+0x1e4>
 8005ff0:	4638      	mov	r0, r7
 8005ff2:	e7d2      	b.n	8005f9a <_strtod_l+0x1fa>
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	dc04      	bgt.n	8006002 <_strtod_l+0x262>
 8005ff8:	9e07      	ldr	r6, [sp, #28]
 8005ffa:	434e      	muls	r6, r1
 8005ffc:	9607      	str	r6, [sp, #28]
 8005ffe:	3301      	adds	r3, #1
 8006000:	e7e2      	b.n	8005fc8 <_strtod_l+0x228>
 8006002:	f103 0c01 	add.w	ip, r3, #1
 8006006:	f1bc 0f10 	cmp.w	ip, #16
 800600a:	bfd8      	it	le
 800600c:	fb01 f909 	mulle.w	r9, r1, r9
 8006010:	e7f5      	b.n	8005ffe <_strtod_l+0x25e>
 8006012:	2d10      	cmp	r5, #16
 8006014:	bfdc      	itt	le
 8006016:	230a      	movle	r3, #10
 8006018:	fb03 2909 	mlale	r9, r3, r9, r2
 800601c:	e7e1      	b.n	8005fe2 <_strtod_l+0x242>
 800601e:	2300      	movs	r3, #0
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	2301      	movs	r3, #1
 8006024:	e77c      	b.n	8005f20 <_strtod_l+0x180>
 8006026:	f04f 0c00 	mov.w	ip, #0
 800602a:	f108 0202 	add.w	r2, r8, #2
 800602e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006030:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006034:	e785      	b.n	8005f42 <_strtod_l+0x1a2>
 8006036:	f04f 0c01 	mov.w	ip, #1
 800603a:	e7f6      	b.n	800602a <_strtod_l+0x28a>
 800603c:	08008b04 	.word	0x08008b04
 8006040:	080088d4 	.word	0x080088d4
 8006044:	7ff00000 	.word	0x7ff00000
 8006048:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800604a:	1c51      	adds	r1, r2, #1
 800604c:	9117      	str	r1, [sp, #92]	; 0x5c
 800604e:	7852      	ldrb	r2, [r2, #1]
 8006050:	2a30      	cmp	r2, #48	; 0x30
 8006052:	d0f9      	beq.n	8006048 <_strtod_l+0x2a8>
 8006054:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006058:	2908      	cmp	r1, #8
 800605a:	f63f af79 	bhi.w	8005f50 <_strtod_l+0x1b0>
 800605e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006064:	9206      	str	r2, [sp, #24]
 8006066:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006068:	1c51      	adds	r1, r2, #1
 800606a:	9117      	str	r1, [sp, #92]	; 0x5c
 800606c:	7852      	ldrb	r2, [r2, #1]
 800606e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006072:	2e09      	cmp	r6, #9
 8006074:	d937      	bls.n	80060e6 <_strtod_l+0x346>
 8006076:	9e06      	ldr	r6, [sp, #24]
 8006078:	1b89      	subs	r1, r1, r6
 800607a:	2908      	cmp	r1, #8
 800607c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006080:	dc02      	bgt.n	8006088 <_strtod_l+0x2e8>
 8006082:	4576      	cmp	r6, lr
 8006084:	bfa8      	it	ge
 8006086:	4676      	movge	r6, lr
 8006088:	f1bc 0f00 	cmp.w	ip, #0
 800608c:	d000      	beq.n	8006090 <_strtod_l+0x2f0>
 800608e:	4276      	negs	r6, r6
 8006090:	2d00      	cmp	r5, #0
 8006092:	d14d      	bne.n	8006130 <_strtod_l+0x390>
 8006094:	9904      	ldr	r1, [sp, #16]
 8006096:	4301      	orrs	r1, r0
 8006098:	f47f aec6 	bne.w	8005e28 <_strtod_l+0x88>
 800609c:	2b00      	cmp	r3, #0
 800609e:	f47f aee1 	bne.w	8005e64 <_strtod_l+0xc4>
 80060a2:	2a69      	cmp	r2, #105	; 0x69
 80060a4:	d027      	beq.n	80060f6 <_strtod_l+0x356>
 80060a6:	dc24      	bgt.n	80060f2 <_strtod_l+0x352>
 80060a8:	2a49      	cmp	r2, #73	; 0x49
 80060aa:	d024      	beq.n	80060f6 <_strtod_l+0x356>
 80060ac:	2a4e      	cmp	r2, #78	; 0x4e
 80060ae:	f47f aed9 	bne.w	8005e64 <_strtod_l+0xc4>
 80060b2:	499f      	ldr	r1, [pc, #636]	; (8006330 <_strtod_l+0x590>)
 80060b4:	a817      	add	r0, sp, #92	; 0x5c
 80060b6:	f001 fb05 	bl	80076c4 <__match>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f43f aed2 	beq.w	8005e64 <_strtod_l+0xc4>
 80060c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b28      	cmp	r3, #40	; 0x28
 80060c6:	d12d      	bne.n	8006124 <_strtod_l+0x384>
 80060c8:	499a      	ldr	r1, [pc, #616]	; (8006334 <_strtod_l+0x594>)
 80060ca:	aa1a      	add	r2, sp, #104	; 0x68
 80060cc:	a817      	add	r0, sp, #92	; 0x5c
 80060ce:	f001 fb0d 	bl	80076ec <__hexnan>
 80060d2:	2805      	cmp	r0, #5
 80060d4:	d126      	bne.n	8006124 <_strtod_l+0x384>
 80060d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80060dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80060e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80060e4:	e6a0      	b.n	8005e28 <_strtod_l+0x88>
 80060e6:	210a      	movs	r1, #10
 80060e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80060ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80060f0:	e7b9      	b.n	8006066 <_strtod_l+0x2c6>
 80060f2:	2a6e      	cmp	r2, #110	; 0x6e
 80060f4:	e7db      	b.n	80060ae <_strtod_l+0x30e>
 80060f6:	4990      	ldr	r1, [pc, #576]	; (8006338 <_strtod_l+0x598>)
 80060f8:	a817      	add	r0, sp, #92	; 0x5c
 80060fa:	f001 fae3 	bl	80076c4 <__match>
 80060fe:	2800      	cmp	r0, #0
 8006100:	f43f aeb0 	beq.w	8005e64 <_strtod_l+0xc4>
 8006104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006106:	498d      	ldr	r1, [pc, #564]	; (800633c <_strtod_l+0x59c>)
 8006108:	3b01      	subs	r3, #1
 800610a:	a817      	add	r0, sp, #92	; 0x5c
 800610c:	9317      	str	r3, [sp, #92]	; 0x5c
 800610e:	f001 fad9 	bl	80076c4 <__match>
 8006112:	b910      	cbnz	r0, 800611a <_strtod_l+0x37a>
 8006114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006116:	3301      	adds	r3, #1
 8006118:	9317      	str	r3, [sp, #92]	; 0x5c
 800611a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800634c <_strtod_l+0x5ac>
 800611e:	f04f 0a00 	mov.w	sl, #0
 8006122:	e681      	b.n	8005e28 <_strtod_l+0x88>
 8006124:	4886      	ldr	r0, [pc, #536]	; (8006340 <_strtod_l+0x5a0>)
 8006126:	f002 f8c7 	bl	80082b8 <nan>
 800612a:	ec5b ab10 	vmov	sl, fp, d0
 800612e:	e67b      	b.n	8005e28 <_strtod_l+0x88>
 8006130:	9b05      	ldr	r3, [sp, #20]
 8006132:	9807      	ldr	r0, [sp, #28]
 8006134:	1af3      	subs	r3, r6, r3
 8006136:	2f00      	cmp	r7, #0
 8006138:	bf08      	it	eq
 800613a:	462f      	moveq	r7, r5
 800613c:	2d10      	cmp	r5, #16
 800613e:	9306      	str	r3, [sp, #24]
 8006140:	46a8      	mov	r8, r5
 8006142:	bfa8      	it	ge
 8006144:	f04f 0810 	movge.w	r8, #16
 8006148:	f7fa f9f4 	bl	8000534 <__aeabi_ui2d>
 800614c:	2d09      	cmp	r5, #9
 800614e:	4682      	mov	sl, r0
 8006150:	468b      	mov	fp, r1
 8006152:	dd13      	ble.n	800617c <_strtod_l+0x3dc>
 8006154:	4b7b      	ldr	r3, [pc, #492]	; (8006344 <_strtod_l+0x5a4>)
 8006156:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800615a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800615e:	f7fa fa63 	bl	8000628 <__aeabi_dmul>
 8006162:	4682      	mov	sl, r0
 8006164:	4648      	mov	r0, r9
 8006166:	468b      	mov	fp, r1
 8006168:	f7fa f9e4 	bl	8000534 <__aeabi_ui2d>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4650      	mov	r0, sl
 8006172:	4659      	mov	r1, fp
 8006174:	f7fa f8a2 	bl	80002bc <__adddf3>
 8006178:	4682      	mov	sl, r0
 800617a:	468b      	mov	fp, r1
 800617c:	2d0f      	cmp	r5, #15
 800617e:	dc38      	bgt.n	80061f2 <_strtod_l+0x452>
 8006180:	9b06      	ldr	r3, [sp, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f43f ae50 	beq.w	8005e28 <_strtod_l+0x88>
 8006188:	dd24      	ble.n	80061d4 <_strtod_l+0x434>
 800618a:	2b16      	cmp	r3, #22
 800618c:	dc0b      	bgt.n	80061a6 <_strtod_l+0x406>
 800618e:	496d      	ldr	r1, [pc, #436]	; (8006344 <_strtod_l+0x5a4>)
 8006190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006198:	4652      	mov	r2, sl
 800619a:	465b      	mov	r3, fp
 800619c:	f7fa fa44 	bl	8000628 <__aeabi_dmul>
 80061a0:	4682      	mov	sl, r0
 80061a2:	468b      	mov	fp, r1
 80061a4:	e640      	b.n	8005e28 <_strtod_l+0x88>
 80061a6:	9a06      	ldr	r2, [sp, #24]
 80061a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80061ac:	4293      	cmp	r3, r2
 80061ae:	db20      	blt.n	80061f2 <_strtod_l+0x452>
 80061b0:	4c64      	ldr	r4, [pc, #400]	; (8006344 <_strtod_l+0x5a4>)
 80061b2:	f1c5 050f 	rsb	r5, r5, #15
 80061b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80061ba:	4652      	mov	r2, sl
 80061bc:	465b      	mov	r3, fp
 80061be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061c2:	f7fa fa31 	bl	8000628 <__aeabi_dmul>
 80061c6:	9b06      	ldr	r3, [sp, #24]
 80061c8:	1b5d      	subs	r5, r3, r5
 80061ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80061ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80061d2:	e7e3      	b.n	800619c <_strtod_l+0x3fc>
 80061d4:	9b06      	ldr	r3, [sp, #24]
 80061d6:	3316      	adds	r3, #22
 80061d8:	db0b      	blt.n	80061f2 <_strtod_l+0x452>
 80061da:	9b05      	ldr	r3, [sp, #20]
 80061dc:	1b9e      	subs	r6, r3, r6
 80061de:	4b59      	ldr	r3, [pc, #356]	; (8006344 <_strtod_l+0x5a4>)
 80061e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80061e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80061e8:	4650      	mov	r0, sl
 80061ea:	4659      	mov	r1, fp
 80061ec:	f7fa fb46 	bl	800087c <__aeabi_ddiv>
 80061f0:	e7d6      	b.n	80061a0 <_strtod_l+0x400>
 80061f2:	9b06      	ldr	r3, [sp, #24]
 80061f4:	eba5 0808 	sub.w	r8, r5, r8
 80061f8:	4498      	add	r8, r3
 80061fa:	f1b8 0f00 	cmp.w	r8, #0
 80061fe:	dd74      	ble.n	80062ea <_strtod_l+0x54a>
 8006200:	f018 030f 	ands.w	r3, r8, #15
 8006204:	d00a      	beq.n	800621c <_strtod_l+0x47c>
 8006206:	494f      	ldr	r1, [pc, #316]	; (8006344 <_strtod_l+0x5a4>)
 8006208:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800620c:	4652      	mov	r2, sl
 800620e:	465b      	mov	r3, fp
 8006210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006214:	f7fa fa08 	bl	8000628 <__aeabi_dmul>
 8006218:	4682      	mov	sl, r0
 800621a:	468b      	mov	fp, r1
 800621c:	f038 080f 	bics.w	r8, r8, #15
 8006220:	d04f      	beq.n	80062c2 <_strtod_l+0x522>
 8006222:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006226:	dd22      	ble.n	800626e <_strtod_l+0x4ce>
 8006228:	2500      	movs	r5, #0
 800622a:	462e      	mov	r6, r5
 800622c:	9507      	str	r5, [sp, #28]
 800622e:	9505      	str	r5, [sp, #20]
 8006230:	2322      	movs	r3, #34	; 0x22
 8006232:	f8df b118 	ldr.w	fp, [pc, #280]	; 800634c <_strtod_l+0x5ac>
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	f04f 0a00 	mov.w	sl, #0
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f43f adf2 	beq.w	8005e28 <_strtod_l+0x88>
 8006244:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006246:	4620      	mov	r0, r4
 8006248:	f001 fbb2 	bl	80079b0 <_Bfree>
 800624c:	9905      	ldr	r1, [sp, #20]
 800624e:	4620      	mov	r0, r4
 8006250:	f001 fbae 	bl	80079b0 <_Bfree>
 8006254:	4631      	mov	r1, r6
 8006256:	4620      	mov	r0, r4
 8006258:	f001 fbaa 	bl	80079b0 <_Bfree>
 800625c:	9907      	ldr	r1, [sp, #28]
 800625e:	4620      	mov	r0, r4
 8006260:	f001 fba6 	bl	80079b0 <_Bfree>
 8006264:	4629      	mov	r1, r5
 8006266:	4620      	mov	r0, r4
 8006268:	f001 fba2 	bl	80079b0 <_Bfree>
 800626c:	e5dc      	b.n	8005e28 <_strtod_l+0x88>
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <_strtod_l+0x5a8>)
 8006270:	9304      	str	r3, [sp, #16]
 8006272:	2300      	movs	r3, #0
 8006274:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006278:	4650      	mov	r0, sl
 800627a:	4659      	mov	r1, fp
 800627c:	4699      	mov	r9, r3
 800627e:	f1b8 0f01 	cmp.w	r8, #1
 8006282:	dc21      	bgt.n	80062c8 <_strtod_l+0x528>
 8006284:	b10b      	cbz	r3, 800628a <_strtod_l+0x4ea>
 8006286:	4682      	mov	sl, r0
 8006288:	468b      	mov	fp, r1
 800628a:	4b2f      	ldr	r3, [pc, #188]	; (8006348 <_strtod_l+0x5a8>)
 800628c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006290:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006294:	4652      	mov	r2, sl
 8006296:	465b      	mov	r3, fp
 8006298:	e9d9 0100 	ldrd	r0, r1, [r9]
 800629c:	f7fa f9c4 	bl	8000628 <__aeabi_dmul>
 80062a0:	4b2a      	ldr	r3, [pc, #168]	; (800634c <_strtod_l+0x5ac>)
 80062a2:	460a      	mov	r2, r1
 80062a4:	400b      	ands	r3, r1
 80062a6:	492a      	ldr	r1, [pc, #168]	; (8006350 <_strtod_l+0x5b0>)
 80062a8:	428b      	cmp	r3, r1
 80062aa:	4682      	mov	sl, r0
 80062ac:	d8bc      	bhi.n	8006228 <_strtod_l+0x488>
 80062ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80062b2:	428b      	cmp	r3, r1
 80062b4:	bf86      	itte	hi
 80062b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006354 <_strtod_l+0x5b4>
 80062ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80062be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80062c2:	2300      	movs	r3, #0
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	e084      	b.n	80063d2 <_strtod_l+0x632>
 80062c8:	f018 0f01 	tst.w	r8, #1
 80062cc:	d005      	beq.n	80062da <_strtod_l+0x53a>
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa f9a8 	bl	8000628 <__aeabi_dmul>
 80062d8:	2301      	movs	r3, #1
 80062da:	9a04      	ldr	r2, [sp, #16]
 80062dc:	3208      	adds	r2, #8
 80062de:	f109 0901 	add.w	r9, r9, #1
 80062e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80062e6:	9204      	str	r2, [sp, #16]
 80062e8:	e7c9      	b.n	800627e <_strtod_l+0x4de>
 80062ea:	d0ea      	beq.n	80062c2 <_strtod_l+0x522>
 80062ec:	f1c8 0800 	rsb	r8, r8, #0
 80062f0:	f018 020f 	ands.w	r2, r8, #15
 80062f4:	d00a      	beq.n	800630c <_strtod_l+0x56c>
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <_strtod_l+0x5a4>)
 80062f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062fc:	4650      	mov	r0, sl
 80062fe:	4659      	mov	r1, fp
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	f7fa faba 	bl	800087c <__aeabi_ddiv>
 8006308:	4682      	mov	sl, r0
 800630a:	468b      	mov	fp, r1
 800630c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006310:	d0d7      	beq.n	80062c2 <_strtod_l+0x522>
 8006312:	f1b8 0f1f 	cmp.w	r8, #31
 8006316:	dd1f      	ble.n	8006358 <_strtod_l+0x5b8>
 8006318:	2500      	movs	r5, #0
 800631a:	462e      	mov	r6, r5
 800631c:	9507      	str	r5, [sp, #28]
 800631e:	9505      	str	r5, [sp, #20]
 8006320:	2322      	movs	r3, #34	; 0x22
 8006322:	f04f 0a00 	mov.w	sl, #0
 8006326:	f04f 0b00 	mov.w	fp, #0
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	e786      	b.n	800623c <_strtod_l+0x49c>
 800632e:	bf00      	nop
 8006330:	080088d0 	.word	0x080088d0
 8006334:	080088e8 	.word	0x080088e8
 8006338:	080088c7 	.word	0x080088c7
 800633c:	080088ca 	.word	0x080088ca
 8006340:	0800888f 	.word	0x0800888f
 8006344:	08008bb8 	.word	0x08008bb8
 8006348:	08008b90 	.word	0x08008b90
 800634c:	7ff00000 	.word	0x7ff00000
 8006350:	7ca00000 	.word	0x7ca00000
 8006354:	7fefffff 	.word	0x7fefffff
 8006358:	f018 0310 	ands.w	r3, r8, #16
 800635c:	bf18      	it	ne
 800635e:	236a      	movne	r3, #106	; 0x6a
 8006360:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006710 <_strtod_l+0x970>
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	4650      	mov	r0, sl
 8006368:	4659      	mov	r1, fp
 800636a:	2300      	movs	r3, #0
 800636c:	f018 0f01 	tst.w	r8, #1
 8006370:	d004      	beq.n	800637c <_strtod_l+0x5dc>
 8006372:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006376:	f7fa f957 	bl	8000628 <__aeabi_dmul>
 800637a:	2301      	movs	r3, #1
 800637c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006380:	f109 0908 	add.w	r9, r9, #8
 8006384:	d1f2      	bne.n	800636c <_strtod_l+0x5cc>
 8006386:	b10b      	cbz	r3, 800638c <_strtod_l+0x5ec>
 8006388:	4682      	mov	sl, r0
 800638a:	468b      	mov	fp, r1
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	b1c3      	cbz	r3, 80063c2 <_strtod_l+0x622>
 8006390:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006394:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006398:	2b00      	cmp	r3, #0
 800639a:	4659      	mov	r1, fp
 800639c:	dd11      	ble.n	80063c2 <_strtod_l+0x622>
 800639e:	2b1f      	cmp	r3, #31
 80063a0:	f340 8124 	ble.w	80065ec <_strtod_l+0x84c>
 80063a4:	2b34      	cmp	r3, #52	; 0x34
 80063a6:	bfde      	ittt	le
 80063a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80063ac:	f04f 33ff 	movle.w	r3, #4294967295
 80063b0:	fa03 f202 	lslle.w	r2, r3, r2
 80063b4:	f04f 0a00 	mov.w	sl, #0
 80063b8:	bfcc      	ite	gt
 80063ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80063be:	ea02 0b01 	andle.w	fp, r2, r1
 80063c2:	2200      	movs	r2, #0
 80063c4:	2300      	movs	r3, #0
 80063c6:	4650      	mov	r0, sl
 80063c8:	4659      	mov	r1, fp
 80063ca:	f7fa fb95 	bl	8000af8 <__aeabi_dcmpeq>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d1a2      	bne.n	8006318 <_strtod_l+0x578>
 80063d2:	9b07      	ldr	r3, [sp, #28]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	9908      	ldr	r1, [sp, #32]
 80063d8:	462b      	mov	r3, r5
 80063da:	463a      	mov	r2, r7
 80063dc:	4620      	mov	r0, r4
 80063de:	f001 fb4f 	bl	8007a80 <__s2b>
 80063e2:	9007      	str	r0, [sp, #28]
 80063e4:	2800      	cmp	r0, #0
 80063e6:	f43f af1f 	beq.w	8006228 <_strtod_l+0x488>
 80063ea:	9b05      	ldr	r3, [sp, #20]
 80063ec:	1b9e      	subs	r6, r3, r6
 80063ee:	9b06      	ldr	r3, [sp, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bfb4      	ite	lt
 80063f4:	4633      	movlt	r3, r6
 80063f6:	2300      	movge	r3, #0
 80063f8:	930c      	str	r3, [sp, #48]	; 0x30
 80063fa:	9b06      	ldr	r3, [sp, #24]
 80063fc:	2500      	movs	r5, #0
 80063fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006402:	9312      	str	r3, [sp, #72]	; 0x48
 8006404:	462e      	mov	r6, r5
 8006406:	9b07      	ldr	r3, [sp, #28]
 8006408:	4620      	mov	r0, r4
 800640a:	6859      	ldr	r1, [r3, #4]
 800640c:	f001 fa90 	bl	8007930 <_Balloc>
 8006410:	9005      	str	r0, [sp, #20]
 8006412:	2800      	cmp	r0, #0
 8006414:	f43f af0c 	beq.w	8006230 <_strtod_l+0x490>
 8006418:	9b07      	ldr	r3, [sp, #28]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	3202      	adds	r2, #2
 800641e:	f103 010c 	add.w	r1, r3, #12
 8006422:	0092      	lsls	r2, r2, #2
 8006424:	300c      	adds	r0, #12
 8006426:	f7ff f871 	bl	800550c <memcpy>
 800642a:	ec4b ab10 	vmov	d0, sl, fp
 800642e:	aa1a      	add	r2, sp, #104	; 0x68
 8006430:	a919      	add	r1, sp, #100	; 0x64
 8006432:	4620      	mov	r0, r4
 8006434:	f001 fe6a 	bl	800810c <__d2b>
 8006438:	ec4b ab18 	vmov	d8, sl, fp
 800643c:	9018      	str	r0, [sp, #96]	; 0x60
 800643e:	2800      	cmp	r0, #0
 8006440:	f43f aef6 	beq.w	8006230 <_strtod_l+0x490>
 8006444:	2101      	movs	r1, #1
 8006446:	4620      	mov	r0, r4
 8006448:	f001 fbb4 	bl	8007bb4 <__i2b>
 800644c:	4606      	mov	r6, r0
 800644e:	2800      	cmp	r0, #0
 8006450:	f43f aeee 	beq.w	8006230 <_strtod_l+0x490>
 8006454:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006456:	9904      	ldr	r1, [sp, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	bfab      	itete	ge
 800645c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800645e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006460:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006462:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006466:	bfac      	ite	ge
 8006468:	eb03 0902 	addge.w	r9, r3, r2
 800646c:	1ad7      	sublt	r7, r2, r3
 800646e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006470:	eba3 0801 	sub.w	r8, r3, r1
 8006474:	4490      	add	r8, r2
 8006476:	4ba1      	ldr	r3, [pc, #644]	; (80066fc <_strtod_l+0x95c>)
 8006478:	f108 38ff 	add.w	r8, r8, #4294967295
 800647c:	4598      	cmp	r8, r3
 800647e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006482:	f280 80c7 	bge.w	8006614 <_strtod_l+0x874>
 8006486:	eba3 0308 	sub.w	r3, r3, r8
 800648a:	2b1f      	cmp	r3, #31
 800648c:	eba2 0203 	sub.w	r2, r2, r3
 8006490:	f04f 0101 	mov.w	r1, #1
 8006494:	f300 80b1 	bgt.w	80065fa <_strtod_l+0x85a>
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	930d      	str	r3, [sp, #52]	; 0x34
 800649e:	2300      	movs	r3, #0
 80064a0:	9308      	str	r3, [sp, #32]
 80064a2:	eb09 0802 	add.w	r8, r9, r2
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	45c1      	cmp	r9, r8
 80064aa:	4417      	add	r7, r2
 80064ac:	441f      	add	r7, r3
 80064ae:	464b      	mov	r3, r9
 80064b0:	bfa8      	it	ge
 80064b2:	4643      	movge	r3, r8
 80064b4:	42bb      	cmp	r3, r7
 80064b6:	bfa8      	it	ge
 80064b8:	463b      	movge	r3, r7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfc2      	ittt	gt
 80064be:	eba8 0803 	subgt.w	r8, r8, r3
 80064c2:	1aff      	subgt	r7, r7, r3
 80064c4:	eba9 0903 	subgt.w	r9, r9, r3
 80064c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	dd17      	ble.n	80064fe <_strtod_l+0x75e>
 80064ce:	4631      	mov	r1, r6
 80064d0:	461a      	mov	r2, r3
 80064d2:	4620      	mov	r0, r4
 80064d4:	f001 fc2e 	bl	8007d34 <__pow5mult>
 80064d8:	4606      	mov	r6, r0
 80064da:	2800      	cmp	r0, #0
 80064dc:	f43f aea8 	beq.w	8006230 <_strtod_l+0x490>
 80064e0:	4601      	mov	r1, r0
 80064e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064e4:	4620      	mov	r0, r4
 80064e6:	f001 fb7b 	bl	8007be0 <__multiply>
 80064ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f43f ae9f 	beq.w	8006230 <_strtod_l+0x490>
 80064f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80064f4:	4620      	mov	r0, r4
 80064f6:	f001 fa5b 	bl	80079b0 <_Bfree>
 80064fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fc:	9318      	str	r3, [sp, #96]	; 0x60
 80064fe:	f1b8 0f00 	cmp.w	r8, #0
 8006502:	f300 808c 	bgt.w	800661e <_strtod_l+0x87e>
 8006506:	9b06      	ldr	r3, [sp, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dd08      	ble.n	800651e <_strtod_l+0x77e>
 800650c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800650e:	9905      	ldr	r1, [sp, #20]
 8006510:	4620      	mov	r0, r4
 8006512:	f001 fc0f 	bl	8007d34 <__pow5mult>
 8006516:	9005      	str	r0, [sp, #20]
 8006518:	2800      	cmp	r0, #0
 800651a:	f43f ae89 	beq.w	8006230 <_strtod_l+0x490>
 800651e:	2f00      	cmp	r7, #0
 8006520:	dd08      	ble.n	8006534 <_strtod_l+0x794>
 8006522:	9905      	ldr	r1, [sp, #20]
 8006524:	463a      	mov	r2, r7
 8006526:	4620      	mov	r0, r4
 8006528:	f001 fc5e 	bl	8007de8 <__lshift>
 800652c:	9005      	str	r0, [sp, #20]
 800652e:	2800      	cmp	r0, #0
 8006530:	f43f ae7e 	beq.w	8006230 <_strtod_l+0x490>
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	dd08      	ble.n	800654c <_strtod_l+0x7ac>
 800653a:	4631      	mov	r1, r6
 800653c:	464a      	mov	r2, r9
 800653e:	4620      	mov	r0, r4
 8006540:	f001 fc52 	bl	8007de8 <__lshift>
 8006544:	4606      	mov	r6, r0
 8006546:	2800      	cmp	r0, #0
 8006548:	f43f ae72 	beq.w	8006230 <_strtod_l+0x490>
 800654c:	9a05      	ldr	r2, [sp, #20]
 800654e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006550:	4620      	mov	r0, r4
 8006552:	f001 fcd5 	bl	8007f00 <__mdiff>
 8006556:	4605      	mov	r5, r0
 8006558:	2800      	cmp	r0, #0
 800655a:	f43f ae69 	beq.w	8006230 <_strtod_l+0x490>
 800655e:	68c3      	ldr	r3, [r0, #12]
 8006560:	930b      	str	r3, [sp, #44]	; 0x2c
 8006562:	2300      	movs	r3, #0
 8006564:	60c3      	str	r3, [r0, #12]
 8006566:	4631      	mov	r1, r6
 8006568:	f001 fcae 	bl	8007ec8 <__mcmp>
 800656c:	2800      	cmp	r0, #0
 800656e:	da60      	bge.n	8006632 <_strtod_l+0x892>
 8006570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006572:	ea53 030a 	orrs.w	r3, r3, sl
 8006576:	f040 8082 	bne.w	800667e <_strtod_l+0x8de>
 800657a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800657e:	2b00      	cmp	r3, #0
 8006580:	d17d      	bne.n	800667e <_strtod_l+0x8de>
 8006582:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006586:	0d1b      	lsrs	r3, r3, #20
 8006588:	051b      	lsls	r3, r3, #20
 800658a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800658e:	d976      	bls.n	800667e <_strtod_l+0x8de>
 8006590:	696b      	ldr	r3, [r5, #20]
 8006592:	b913      	cbnz	r3, 800659a <_strtod_l+0x7fa>
 8006594:	692b      	ldr	r3, [r5, #16]
 8006596:	2b01      	cmp	r3, #1
 8006598:	dd71      	ble.n	800667e <_strtod_l+0x8de>
 800659a:	4629      	mov	r1, r5
 800659c:	2201      	movs	r2, #1
 800659e:	4620      	mov	r0, r4
 80065a0:	f001 fc22 	bl	8007de8 <__lshift>
 80065a4:	4631      	mov	r1, r6
 80065a6:	4605      	mov	r5, r0
 80065a8:	f001 fc8e 	bl	8007ec8 <__mcmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dd66      	ble.n	800667e <_strtod_l+0x8de>
 80065b0:	9904      	ldr	r1, [sp, #16]
 80065b2:	4a53      	ldr	r2, [pc, #332]	; (8006700 <_strtod_l+0x960>)
 80065b4:	465b      	mov	r3, fp
 80065b6:	2900      	cmp	r1, #0
 80065b8:	f000 8081 	beq.w	80066be <_strtod_l+0x91e>
 80065bc:	ea02 010b 	and.w	r1, r2, fp
 80065c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80065c4:	dc7b      	bgt.n	80066be <_strtod_l+0x91e>
 80065c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80065ca:	f77f aea9 	ble.w	8006320 <_strtod_l+0x580>
 80065ce:	4b4d      	ldr	r3, [pc, #308]	; (8006704 <_strtod_l+0x964>)
 80065d0:	4650      	mov	r0, sl
 80065d2:	4659      	mov	r1, fp
 80065d4:	2200      	movs	r2, #0
 80065d6:	f7fa f827 	bl	8000628 <__aeabi_dmul>
 80065da:	460b      	mov	r3, r1
 80065dc:	4303      	orrs	r3, r0
 80065de:	bf08      	it	eq
 80065e0:	2322      	moveq	r3, #34	; 0x22
 80065e2:	4682      	mov	sl, r0
 80065e4:	468b      	mov	fp, r1
 80065e6:	bf08      	it	eq
 80065e8:	6023      	streq	r3, [r4, #0]
 80065ea:	e62b      	b.n	8006244 <_strtod_l+0x4a4>
 80065ec:	f04f 32ff 	mov.w	r2, #4294967295
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	ea03 0a0a 	and.w	sl, r3, sl
 80065f8:	e6e3      	b.n	80063c2 <_strtod_l+0x622>
 80065fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80065fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006602:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006606:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800660a:	fa01 f308 	lsl.w	r3, r1, r8
 800660e:	9308      	str	r3, [sp, #32]
 8006610:	910d      	str	r1, [sp, #52]	; 0x34
 8006612:	e746      	b.n	80064a2 <_strtod_l+0x702>
 8006614:	2300      	movs	r3, #0
 8006616:	9308      	str	r3, [sp, #32]
 8006618:	2301      	movs	r3, #1
 800661a:	930d      	str	r3, [sp, #52]	; 0x34
 800661c:	e741      	b.n	80064a2 <_strtod_l+0x702>
 800661e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006620:	4642      	mov	r2, r8
 8006622:	4620      	mov	r0, r4
 8006624:	f001 fbe0 	bl	8007de8 <__lshift>
 8006628:	9018      	str	r0, [sp, #96]	; 0x60
 800662a:	2800      	cmp	r0, #0
 800662c:	f47f af6b 	bne.w	8006506 <_strtod_l+0x766>
 8006630:	e5fe      	b.n	8006230 <_strtod_l+0x490>
 8006632:	465f      	mov	r7, fp
 8006634:	d16e      	bne.n	8006714 <_strtod_l+0x974>
 8006636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800663c:	b342      	cbz	r2, 8006690 <_strtod_l+0x8f0>
 800663e:	4a32      	ldr	r2, [pc, #200]	; (8006708 <_strtod_l+0x968>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d128      	bne.n	8006696 <_strtod_l+0x8f6>
 8006644:	9b04      	ldr	r3, [sp, #16]
 8006646:	4651      	mov	r1, sl
 8006648:	b1eb      	cbz	r3, 8006686 <_strtod_l+0x8e6>
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <_strtod_l+0x960>)
 800664c:	403b      	ands	r3, r7
 800664e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006652:	f04f 32ff 	mov.w	r2, #4294967295
 8006656:	d819      	bhi.n	800668c <_strtod_l+0x8ec>
 8006658:	0d1b      	lsrs	r3, r3, #20
 800665a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	4299      	cmp	r1, r3
 8006664:	d117      	bne.n	8006696 <_strtod_l+0x8f6>
 8006666:	4b29      	ldr	r3, [pc, #164]	; (800670c <_strtod_l+0x96c>)
 8006668:	429f      	cmp	r7, r3
 800666a:	d102      	bne.n	8006672 <_strtod_l+0x8d2>
 800666c:	3101      	adds	r1, #1
 800666e:	f43f addf 	beq.w	8006230 <_strtod_l+0x490>
 8006672:	4b23      	ldr	r3, [pc, #140]	; (8006700 <_strtod_l+0x960>)
 8006674:	403b      	ands	r3, r7
 8006676:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800667a:	f04f 0a00 	mov.w	sl, #0
 800667e:	9b04      	ldr	r3, [sp, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1a4      	bne.n	80065ce <_strtod_l+0x82e>
 8006684:	e5de      	b.n	8006244 <_strtod_l+0x4a4>
 8006686:	f04f 33ff 	mov.w	r3, #4294967295
 800668a:	e7ea      	b.n	8006662 <_strtod_l+0x8c2>
 800668c:	4613      	mov	r3, r2
 800668e:	e7e8      	b.n	8006662 <_strtod_l+0x8c2>
 8006690:	ea53 030a 	orrs.w	r3, r3, sl
 8006694:	d08c      	beq.n	80065b0 <_strtod_l+0x810>
 8006696:	9b08      	ldr	r3, [sp, #32]
 8006698:	b1db      	cbz	r3, 80066d2 <_strtod_l+0x932>
 800669a:	423b      	tst	r3, r7
 800669c:	d0ef      	beq.n	800667e <_strtod_l+0x8de>
 800669e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066a0:	9a04      	ldr	r2, [sp, #16]
 80066a2:	4650      	mov	r0, sl
 80066a4:	4659      	mov	r1, fp
 80066a6:	b1c3      	cbz	r3, 80066da <_strtod_l+0x93a>
 80066a8:	f7ff fb5b 	bl	8005d62 <sulp>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	ec51 0b18 	vmov	r0, r1, d8
 80066b4:	f7f9 fe02 	bl	80002bc <__adddf3>
 80066b8:	4682      	mov	sl, r0
 80066ba:	468b      	mov	fp, r1
 80066bc:	e7df      	b.n	800667e <_strtod_l+0x8de>
 80066be:	4013      	ands	r3, r2
 80066c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80066c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80066c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80066cc:	f04f 3aff 	mov.w	sl, #4294967295
 80066d0:	e7d5      	b.n	800667e <_strtod_l+0x8de>
 80066d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d4:	ea13 0f0a 	tst.w	r3, sl
 80066d8:	e7e0      	b.n	800669c <_strtod_l+0x8fc>
 80066da:	f7ff fb42 	bl	8005d62 <sulp>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	ec51 0b18 	vmov	r0, r1, d8
 80066e6:	f7f9 fde7 	bl	80002b8 <__aeabi_dsub>
 80066ea:	2200      	movs	r2, #0
 80066ec:	2300      	movs	r3, #0
 80066ee:	4682      	mov	sl, r0
 80066f0:	468b      	mov	fp, r1
 80066f2:	f7fa fa01 	bl	8000af8 <__aeabi_dcmpeq>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d0c1      	beq.n	800667e <_strtod_l+0x8de>
 80066fa:	e611      	b.n	8006320 <_strtod_l+0x580>
 80066fc:	fffffc02 	.word	0xfffffc02
 8006700:	7ff00000 	.word	0x7ff00000
 8006704:	39500000 	.word	0x39500000
 8006708:	000fffff 	.word	0x000fffff
 800670c:	7fefffff 	.word	0x7fefffff
 8006710:	08008900 	.word	0x08008900
 8006714:	4631      	mov	r1, r6
 8006716:	4628      	mov	r0, r5
 8006718:	f001 fd54 	bl	80081c4 <__ratio>
 800671c:	ec59 8b10 	vmov	r8, r9, d0
 8006720:	ee10 0a10 	vmov	r0, s0
 8006724:	2200      	movs	r2, #0
 8006726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800672a:	4649      	mov	r1, r9
 800672c:	f7fa f9f8 	bl	8000b20 <__aeabi_dcmple>
 8006730:	2800      	cmp	r0, #0
 8006732:	d07a      	beq.n	800682a <_strtod_l+0xa8a>
 8006734:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d04a      	beq.n	80067d0 <_strtod_l+0xa30>
 800673a:	4b95      	ldr	r3, [pc, #596]	; (8006990 <_strtod_l+0xbf0>)
 800673c:	2200      	movs	r2, #0
 800673e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006742:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006990 <_strtod_l+0xbf0>
 8006746:	f04f 0800 	mov.w	r8, #0
 800674a:	4b92      	ldr	r3, [pc, #584]	; (8006994 <_strtod_l+0xbf4>)
 800674c:	403b      	ands	r3, r7
 800674e:	930d      	str	r3, [sp, #52]	; 0x34
 8006750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006752:	4b91      	ldr	r3, [pc, #580]	; (8006998 <_strtod_l+0xbf8>)
 8006754:	429a      	cmp	r2, r3
 8006756:	f040 80b0 	bne.w	80068ba <_strtod_l+0xb1a>
 800675a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800675e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006762:	ec4b ab10 	vmov	d0, sl, fp
 8006766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800676a:	f001 fc53 	bl	8008014 <__ulp>
 800676e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006772:	ec53 2b10 	vmov	r2, r3, d0
 8006776:	f7f9 ff57 	bl	8000628 <__aeabi_dmul>
 800677a:	4652      	mov	r2, sl
 800677c:	465b      	mov	r3, fp
 800677e:	f7f9 fd9d 	bl	80002bc <__adddf3>
 8006782:	460b      	mov	r3, r1
 8006784:	4983      	ldr	r1, [pc, #524]	; (8006994 <_strtod_l+0xbf4>)
 8006786:	4a85      	ldr	r2, [pc, #532]	; (800699c <_strtod_l+0xbfc>)
 8006788:	4019      	ands	r1, r3
 800678a:	4291      	cmp	r1, r2
 800678c:	4682      	mov	sl, r0
 800678e:	d960      	bls.n	8006852 <_strtod_l+0xab2>
 8006790:	ee18 3a90 	vmov	r3, s17
 8006794:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006798:	4293      	cmp	r3, r2
 800679a:	d104      	bne.n	80067a6 <_strtod_l+0xa06>
 800679c:	ee18 3a10 	vmov	r3, s16
 80067a0:	3301      	adds	r3, #1
 80067a2:	f43f ad45 	beq.w	8006230 <_strtod_l+0x490>
 80067a6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80069a8 <_strtod_l+0xc08>
 80067aa:	f04f 3aff 	mov.w	sl, #4294967295
 80067ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80067b0:	4620      	mov	r0, r4
 80067b2:	f001 f8fd 	bl	80079b0 <_Bfree>
 80067b6:	9905      	ldr	r1, [sp, #20]
 80067b8:	4620      	mov	r0, r4
 80067ba:	f001 f8f9 	bl	80079b0 <_Bfree>
 80067be:	4631      	mov	r1, r6
 80067c0:	4620      	mov	r0, r4
 80067c2:	f001 f8f5 	bl	80079b0 <_Bfree>
 80067c6:	4629      	mov	r1, r5
 80067c8:	4620      	mov	r0, r4
 80067ca:	f001 f8f1 	bl	80079b0 <_Bfree>
 80067ce:	e61a      	b.n	8006406 <_strtod_l+0x666>
 80067d0:	f1ba 0f00 	cmp.w	sl, #0
 80067d4:	d11b      	bne.n	800680e <_strtod_l+0xa6e>
 80067d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067da:	b9f3      	cbnz	r3, 800681a <_strtod_l+0xa7a>
 80067dc:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <_strtod_l+0xbf0>)
 80067de:	2200      	movs	r2, #0
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7fa f992 	bl	8000b0c <__aeabi_dcmplt>
 80067e8:	b9d0      	cbnz	r0, 8006820 <_strtod_l+0xa80>
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	4b6c      	ldr	r3, [pc, #432]	; (80069a0 <_strtod_l+0xc00>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	f7f9 ff19 	bl	8000628 <__aeabi_dmul>
 80067f6:	4680      	mov	r8, r0
 80067f8:	4689      	mov	r9, r1
 80067fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067fe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006802:	9315      	str	r3, [sp, #84]	; 0x54
 8006804:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006808:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800680c:	e79d      	b.n	800674a <_strtod_l+0x9aa>
 800680e:	f1ba 0f01 	cmp.w	sl, #1
 8006812:	d102      	bne.n	800681a <_strtod_l+0xa7a>
 8006814:	2f00      	cmp	r7, #0
 8006816:	f43f ad83 	beq.w	8006320 <_strtod_l+0x580>
 800681a:	4b62      	ldr	r3, [pc, #392]	; (80069a4 <_strtod_l+0xc04>)
 800681c:	2200      	movs	r2, #0
 800681e:	e78e      	b.n	800673e <_strtod_l+0x99e>
 8006820:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80069a0 <_strtod_l+0xc00>
 8006824:	f04f 0800 	mov.w	r8, #0
 8006828:	e7e7      	b.n	80067fa <_strtod_l+0xa5a>
 800682a:	4b5d      	ldr	r3, [pc, #372]	; (80069a0 <_strtod_l+0xc00>)
 800682c:	4640      	mov	r0, r8
 800682e:	4649      	mov	r1, r9
 8006830:	2200      	movs	r2, #0
 8006832:	f7f9 fef9 	bl	8000628 <__aeabi_dmul>
 8006836:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006838:	4680      	mov	r8, r0
 800683a:	4689      	mov	r9, r1
 800683c:	b933      	cbnz	r3, 800684c <_strtod_l+0xaac>
 800683e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006842:	900e      	str	r0, [sp, #56]	; 0x38
 8006844:	930f      	str	r3, [sp, #60]	; 0x3c
 8006846:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800684a:	e7dd      	b.n	8006808 <_strtod_l+0xa68>
 800684c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006850:	e7f9      	b.n	8006846 <_strtod_l+0xaa6>
 8006852:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1a8      	bne.n	80067ae <_strtod_l+0xa0e>
 800685c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006860:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006862:	0d1b      	lsrs	r3, r3, #20
 8006864:	051b      	lsls	r3, r3, #20
 8006866:	429a      	cmp	r2, r3
 8006868:	d1a1      	bne.n	80067ae <_strtod_l+0xa0e>
 800686a:	4640      	mov	r0, r8
 800686c:	4649      	mov	r1, r9
 800686e:	f7fa f9ad 	bl	8000bcc <__aeabi_d2lz>
 8006872:	f7f9 feab 	bl	80005cc <__aeabi_l2d>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7f9 fd1b 	bl	80002b8 <__aeabi_dsub>
 8006882:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006884:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006888:	ea43 030a 	orr.w	r3, r3, sl
 800688c:	4313      	orrs	r3, r2
 800688e:	4680      	mov	r8, r0
 8006890:	4689      	mov	r9, r1
 8006892:	d055      	beq.n	8006940 <_strtod_l+0xba0>
 8006894:	a336      	add	r3, pc, #216	; (adr r3, 8006970 <_strtod_l+0xbd0>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7fa f937 	bl	8000b0c <__aeabi_dcmplt>
 800689e:	2800      	cmp	r0, #0
 80068a0:	f47f acd0 	bne.w	8006244 <_strtod_l+0x4a4>
 80068a4:	a334      	add	r3, pc, #208	; (adr r3, 8006978 <_strtod_l+0xbd8>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	4640      	mov	r0, r8
 80068ac:	4649      	mov	r1, r9
 80068ae:	f7fa f94b 	bl	8000b48 <__aeabi_dcmpgt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	f43f af7b 	beq.w	80067ae <_strtod_l+0xa0e>
 80068b8:	e4c4      	b.n	8006244 <_strtod_l+0x4a4>
 80068ba:	9b04      	ldr	r3, [sp, #16]
 80068bc:	b333      	cbz	r3, 800690c <_strtod_l+0xb6c>
 80068be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80068c4:	d822      	bhi.n	800690c <_strtod_l+0xb6c>
 80068c6:	a32e      	add	r3, pc, #184	; (adr r3, 8006980 <_strtod_l+0xbe0>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	4640      	mov	r0, r8
 80068ce:	4649      	mov	r1, r9
 80068d0:	f7fa f926 	bl	8000b20 <__aeabi_dcmple>
 80068d4:	b1a0      	cbz	r0, 8006900 <_strtod_l+0xb60>
 80068d6:	4649      	mov	r1, r9
 80068d8:	4640      	mov	r0, r8
 80068da:	f7fa f93f 	bl	8000b5c <__aeabi_d2uiz>
 80068de:	2801      	cmp	r0, #1
 80068e0:	bf38      	it	cc
 80068e2:	2001      	movcc	r0, #1
 80068e4:	f7f9 fe26 	bl	8000534 <__aeabi_ui2d>
 80068e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	bb23      	cbnz	r3, 800693a <_strtod_l+0xb9a>
 80068f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068f4:	9010      	str	r0, [sp, #64]	; 0x40
 80068f6:	9311      	str	r3, [sp, #68]	; 0x44
 80068f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068fc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006904:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	9309      	str	r3, [sp, #36]	; 0x24
 800690c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006910:	eeb0 0a48 	vmov.f32	s0, s16
 8006914:	eef0 0a68 	vmov.f32	s1, s17
 8006918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800691c:	f001 fb7a 	bl	8008014 <__ulp>
 8006920:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006924:	ec53 2b10 	vmov	r2, r3, d0
 8006928:	f7f9 fe7e 	bl	8000628 <__aeabi_dmul>
 800692c:	ec53 2b18 	vmov	r2, r3, d8
 8006930:	f7f9 fcc4 	bl	80002bc <__adddf3>
 8006934:	4682      	mov	sl, r0
 8006936:	468b      	mov	fp, r1
 8006938:	e78d      	b.n	8006856 <_strtod_l+0xab6>
 800693a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800693e:	e7db      	b.n	80068f8 <_strtod_l+0xb58>
 8006940:	a311      	add	r3, pc, #68	; (adr r3, 8006988 <_strtod_l+0xbe8>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7fa f8e1 	bl	8000b0c <__aeabi_dcmplt>
 800694a:	e7b2      	b.n	80068b2 <_strtod_l+0xb12>
 800694c:	2300      	movs	r3, #0
 800694e:	930a      	str	r3, [sp, #40]	; 0x28
 8006950:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	f7ff ba6b 	b.w	8005e30 <_strtod_l+0x90>
 800695a:	2a65      	cmp	r2, #101	; 0x65
 800695c:	f43f ab5f 	beq.w	800601e <_strtod_l+0x27e>
 8006960:	2a45      	cmp	r2, #69	; 0x45
 8006962:	f43f ab5c 	beq.w	800601e <_strtod_l+0x27e>
 8006966:	2301      	movs	r3, #1
 8006968:	f7ff bb94 	b.w	8006094 <_strtod_l+0x2f4>
 800696c:	f3af 8000 	nop.w
 8006970:	94a03595 	.word	0x94a03595
 8006974:	3fdfffff 	.word	0x3fdfffff
 8006978:	35afe535 	.word	0x35afe535
 800697c:	3fe00000 	.word	0x3fe00000
 8006980:	ffc00000 	.word	0xffc00000
 8006984:	41dfffff 	.word	0x41dfffff
 8006988:	94a03595 	.word	0x94a03595
 800698c:	3fcfffff 	.word	0x3fcfffff
 8006990:	3ff00000 	.word	0x3ff00000
 8006994:	7ff00000 	.word	0x7ff00000
 8006998:	7fe00000 	.word	0x7fe00000
 800699c:	7c9fffff 	.word	0x7c9fffff
 80069a0:	3fe00000 	.word	0x3fe00000
 80069a4:	bff00000 	.word	0xbff00000
 80069a8:	7fefffff 	.word	0x7fefffff

080069ac <strtod>:
 80069ac:	460a      	mov	r2, r1
 80069ae:	4601      	mov	r1, r0
 80069b0:	4802      	ldr	r0, [pc, #8]	; (80069bc <strtod+0x10>)
 80069b2:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <strtod+0x14>)
 80069b4:	6800      	ldr	r0, [r0, #0]
 80069b6:	f7ff b9f3 	b.w	8005da0 <_strtod_l>
 80069ba:	bf00      	nop
 80069bc:	2000000c 	.word	0x2000000c
 80069c0:	20000074 	.word	0x20000074

080069c4 <_strtoll_l.constprop.0>:
 80069c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c8:	b085      	sub	sp, #20
 80069ca:	4688      	mov	r8, r1
 80069cc:	9201      	str	r2, [sp, #4]
 80069ce:	4a47      	ldr	r2, [pc, #284]	; (8006aec <_strtoll_l.constprop.0+0x128>)
 80069d0:	9003      	str	r0, [sp, #12]
 80069d2:	461e      	mov	r6, r3
 80069d4:	460d      	mov	r5, r1
 80069d6:	462b      	mov	r3, r5
 80069d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80069dc:	5ca7      	ldrb	r7, [r4, r2]
 80069de:	f017 0708 	ands.w	r7, r7, #8
 80069e2:	d1f8      	bne.n	80069d6 <_strtoll_l.constprop.0+0x12>
 80069e4:	2c2d      	cmp	r4, #45	; 0x2d
 80069e6:	d147      	bne.n	8006a78 <_strtoll_l.constprop.0+0xb4>
 80069e8:	782c      	ldrb	r4, [r5, #0]
 80069ea:	2701      	movs	r7, #1
 80069ec:	1c9d      	adds	r5, r3, #2
 80069ee:	2e00      	cmp	r6, #0
 80069f0:	d077      	beq.n	8006ae2 <_strtoll_l.constprop.0+0x11e>
 80069f2:	2e10      	cmp	r6, #16
 80069f4:	d109      	bne.n	8006a0a <_strtoll_l.constprop.0+0x46>
 80069f6:	2c30      	cmp	r4, #48	; 0x30
 80069f8:	d107      	bne.n	8006a0a <_strtoll_l.constprop.0+0x46>
 80069fa:	782b      	ldrb	r3, [r5, #0]
 80069fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a00:	2b58      	cmp	r3, #88	; 0x58
 8006a02:	d169      	bne.n	8006ad8 <_strtoll_l.constprop.0+0x114>
 8006a04:	786c      	ldrb	r4, [r5, #1]
 8006a06:	2610      	movs	r6, #16
 8006a08:	3502      	adds	r5, #2
 8006a0a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 8006a0e:	f107 3bff 	add.w	fp, r7, #4294967295
 8006a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a16:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8006a1a:	4632      	mov	r2, r6
 8006a1c:	464b      	mov	r3, r9
 8006a1e:	4658      	mov	r0, fp
 8006a20:	4651      	mov	r1, sl
 8006a22:	f7fa f8bb 	bl	8000b9c <__aeabi_uldivmod>
 8006a26:	2300      	movs	r3, #0
 8006a28:	9202      	str	r2, [sp, #8]
 8006a2a:	468c      	mov	ip, r1
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4618      	mov	r0, r3
 8006a32:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006a36:	f1be 0f09 	cmp.w	lr, #9
 8006a3a:	d822      	bhi.n	8006a82 <_strtoll_l.constprop.0+0xbe>
 8006a3c:	4674      	mov	r4, lr
 8006a3e:	42a6      	cmp	r6, r4
 8006a40:	dd30      	ble.n	8006aa4 <_strtoll_l.constprop.0+0xe0>
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d014      	beq.n	8006a72 <_strtoll_l.constprop.0+0xae>
 8006a48:	4282      	cmp	r2, r0
 8006a4a:	eb7c 0301 	sbcs.w	r3, ip, r1
 8006a4e:	d326      	bcc.n	8006a9e <_strtoll_l.constprop.0+0xda>
 8006a50:	458c      	cmp	ip, r1
 8006a52:	bf08      	it	eq
 8006a54:	4282      	cmpeq	r2, r0
 8006a56:	d102      	bne.n	8006a5e <_strtoll_l.constprop.0+0x9a>
 8006a58:	9b02      	ldr	r3, [sp, #8]
 8006a5a:	42a3      	cmp	r3, r4
 8006a5c:	db1f      	blt.n	8006a9e <_strtoll_l.constprop.0+0xda>
 8006a5e:	4371      	muls	r1, r6
 8006a60:	fb00 1109 	mla	r1, r0, r9, r1
 8006a64:	fba6 0300 	umull	r0, r3, r6, r0
 8006a68:	4419      	add	r1, r3
 8006a6a:	1820      	adds	r0, r4, r0
 8006a6c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8006a70:	2301      	movs	r3, #1
 8006a72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a76:	e7dc      	b.n	8006a32 <_strtoll_l.constprop.0+0x6e>
 8006a78:	2c2b      	cmp	r4, #43	; 0x2b
 8006a7a:	bf04      	itt	eq
 8006a7c:	782c      	ldrbeq	r4, [r5, #0]
 8006a7e:	1c9d      	addeq	r5, r3, #2
 8006a80:	e7b5      	b.n	80069ee <_strtoll_l.constprop.0+0x2a>
 8006a82:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006a86:	f1be 0f19 	cmp.w	lr, #25
 8006a8a:	d801      	bhi.n	8006a90 <_strtoll_l.constprop.0+0xcc>
 8006a8c:	3c37      	subs	r4, #55	; 0x37
 8006a8e:	e7d6      	b.n	8006a3e <_strtoll_l.constprop.0+0x7a>
 8006a90:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006a94:	f1be 0f19 	cmp.w	lr, #25
 8006a98:	d804      	bhi.n	8006aa4 <_strtoll_l.constprop.0+0xe0>
 8006a9a:	3c57      	subs	r4, #87	; 0x57
 8006a9c:	e7cf      	b.n	8006a3e <_strtoll_l.constprop.0+0x7a>
 8006a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa2:	e7e6      	b.n	8006a72 <_strtoll_l.constprop.0+0xae>
 8006aa4:	1c5a      	adds	r2, r3, #1
 8006aa6:	d109      	bne.n	8006abc <_strtoll_l.constprop.0+0xf8>
 8006aa8:	9a03      	ldr	r2, [sp, #12]
 8006aaa:	2322      	movs	r3, #34	; 0x22
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	9b01      	ldr	r3, [sp, #4]
 8006ab0:	4658      	mov	r0, fp
 8006ab2:	4651      	mov	r1, sl
 8006ab4:	b953      	cbnz	r3, 8006acc <_strtoll_l.constprop.0+0x108>
 8006ab6:	b005      	add	sp, #20
 8006ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abc:	b117      	cbz	r7, 8006ac4 <_strtoll_l.constprop.0+0x100>
 8006abe:	4240      	negs	r0, r0
 8006ac0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006ac4:	9a01      	ldr	r2, [sp, #4]
 8006ac6:	2a00      	cmp	r2, #0
 8006ac8:	d0f5      	beq.n	8006ab6 <_strtoll_l.constprop.0+0xf2>
 8006aca:	b10b      	cbz	r3, 8006ad0 <_strtoll_l.constprop.0+0x10c>
 8006acc:	f105 38ff 	add.w	r8, r5, #4294967295
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	f8c3 8000 	str.w	r8, [r3]
 8006ad6:	e7ee      	b.n	8006ab6 <_strtoll_l.constprop.0+0xf2>
 8006ad8:	2430      	movs	r4, #48	; 0x30
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d195      	bne.n	8006a0a <_strtoll_l.constprop.0+0x46>
 8006ade:	2608      	movs	r6, #8
 8006ae0:	e793      	b.n	8006a0a <_strtoll_l.constprop.0+0x46>
 8006ae2:	2c30      	cmp	r4, #48	; 0x30
 8006ae4:	d089      	beq.n	80069fa <_strtoll_l.constprop.0+0x36>
 8006ae6:	260a      	movs	r6, #10
 8006ae8:	e78f      	b.n	8006a0a <_strtoll_l.constprop.0+0x46>
 8006aea:	bf00      	nop
 8006aec:	08008929 	.word	0x08008929

08006af0 <strtoll>:
 8006af0:	4613      	mov	r3, r2
 8006af2:	460a      	mov	r2, r1
 8006af4:	4601      	mov	r1, r0
 8006af6:	4802      	ldr	r0, [pc, #8]	; (8006b00 <strtoll+0x10>)
 8006af8:	6800      	ldr	r0, [r0, #0]
 8006afa:	f7ff bf63 	b.w	80069c4 <_strtoll_l.constprop.0>
 8006afe:	bf00      	nop
 8006b00:	2000000c 	.word	0x2000000c

08006b04 <_strtoull_l.constprop.0>:
 8006b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	4692      	mov	sl, r2
 8006b0a:	4a49      	ldr	r2, [pc, #292]	; (8006c30 <_strtoull_l.constprop.0+0x12c>)
 8006b0c:	9001      	str	r0, [sp, #4]
 8006b0e:	4689      	mov	r9, r1
 8006b10:	461d      	mov	r5, r3
 8006b12:	460e      	mov	r6, r1
 8006b14:	4633      	mov	r3, r6
 8006b16:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006b1a:	5ca7      	ldrb	r7, [r4, r2]
 8006b1c:	f017 0708 	ands.w	r7, r7, #8
 8006b20:	d1f8      	bne.n	8006b14 <_strtoull_l.constprop.0+0x10>
 8006b22:	2c2d      	cmp	r4, #45	; 0x2d
 8006b24:	d14a      	bne.n	8006bbc <_strtoull_l.constprop.0+0xb8>
 8006b26:	7834      	ldrb	r4, [r6, #0]
 8006b28:	2701      	movs	r7, #1
 8006b2a:	1c9e      	adds	r6, r3, #2
 8006b2c:	2d00      	cmp	r5, #0
 8006b2e:	d07b      	beq.n	8006c28 <_strtoull_l.constprop.0+0x124>
 8006b30:	2d10      	cmp	r5, #16
 8006b32:	d109      	bne.n	8006b48 <_strtoull_l.constprop.0+0x44>
 8006b34:	2c30      	cmp	r4, #48	; 0x30
 8006b36:	d107      	bne.n	8006b48 <_strtoull_l.constprop.0+0x44>
 8006b38:	7833      	ldrb	r3, [r6, #0]
 8006b3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006b3e:	2b58      	cmp	r3, #88	; 0x58
 8006b40:	d16d      	bne.n	8006c1e <_strtoull_l.constprop.0+0x11a>
 8006b42:	7874      	ldrb	r4, [r6, #1]
 8006b44:	2510      	movs	r5, #16
 8006b46:	3602      	adds	r6, #2
 8006b48:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8006b4c:	462a      	mov	r2, r5
 8006b4e:	465b      	mov	r3, fp
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	f04f 31ff 	mov.w	r1, #4294967295
 8006b58:	f7fa f820 	bl	8000b9c <__aeabi_uldivmod>
 8006b5c:	462a      	mov	r2, r5
 8006b5e:	9000      	str	r0, [sp, #0]
 8006b60:	4688      	mov	r8, r1
 8006b62:	465b      	mov	r3, fp
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	f04f 31ff 	mov.w	r1, #4294967295
 8006b6c:	f7fa f816 	bl	8000b9c <__aeabi_uldivmod>
 8006b70:	2300      	movs	r3, #0
 8006b72:	4618      	mov	r0, r3
 8006b74:	4619      	mov	r1, r3
 8006b76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006b7a:	f1bc 0f09 	cmp.w	ip, #9
 8006b7e:	d822      	bhi.n	8006bc6 <_strtoull_l.constprop.0+0xc2>
 8006b80:	4664      	mov	r4, ip
 8006b82:	42a5      	cmp	r5, r4
 8006b84:	dd30      	ble.n	8006be8 <_strtoull_l.constprop.0+0xe4>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	db2b      	blt.n	8006be2 <_strtoull_l.constprop.0+0xde>
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	4283      	cmp	r3, r0
 8006b8e:	eb78 0301 	sbcs.w	r3, r8, r1
 8006b92:	d326      	bcc.n	8006be2 <_strtoull_l.constprop.0+0xde>
 8006b94:	9b00      	ldr	r3, [sp, #0]
 8006b96:	4588      	cmp	r8, r1
 8006b98:	bf08      	it	eq
 8006b9a:	4283      	cmpeq	r3, r0
 8006b9c:	d101      	bne.n	8006ba2 <_strtoull_l.constprop.0+0x9e>
 8006b9e:	42a2      	cmp	r2, r4
 8006ba0:	db1f      	blt.n	8006be2 <_strtoull_l.constprop.0+0xde>
 8006ba2:	4369      	muls	r1, r5
 8006ba4:	fb00 110b 	mla	r1, r0, fp, r1
 8006ba8:	fba5 0300 	umull	r0, r3, r5, r0
 8006bac:	4419      	add	r1, r3
 8006bae:	1820      	adds	r0, r4, r0
 8006bb0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f816 4b01 	ldrb.w	r4, [r6], #1
 8006bba:	e7dc      	b.n	8006b76 <_strtoull_l.constprop.0+0x72>
 8006bbc:	2c2b      	cmp	r4, #43	; 0x2b
 8006bbe:	bf04      	itt	eq
 8006bc0:	7834      	ldrbeq	r4, [r6, #0]
 8006bc2:	1c9e      	addeq	r6, r3, #2
 8006bc4:	e7b2      	b.n	8006b2c <_strtoull_l.constprop.0+0x28>
 8006bc6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006bca:	f1bc 0f19 	cmp.w	ip, #25
 8006bce:	d801      	bhi.n	8006bd4 <_strtoull_l.constprop.0+0xd0>
 8006bd0:	3c37      	subs	r4, #55	; 0x37
 8006bd2:	e7d6      	b.n	8006b82 <_strtoull_l.constprop.0+0x7e>
 8006bd4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006bd8:	f1bc 0f19 	cmp.w	ip, #25
 8006bdc:	d804      	bhi.n	8006be8 <_strtoull_l.constprop.0+0xe4>
 8006bde:	3c57      	subs	r4, #87	; 0x57
 8006be0:	e7cf      	b.n	8006b82 <_strtoull_l.constprop.0+0x7e>
 8006be2:	f04f 33ff 	mov.w	r3, #4294967295
 8006be6:	e7e6      	b.n	8006bb6 <_strtoull_l.constprop.0+0xb2>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	da0b      	bge.n	8006c04 <_strtoull_l.constprop.0+0x100>
 8006bec:	9a01      	ldr	r2, [sp, #4]
 8006bee:	2322      	movs	r3, #34	; 0x22
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	f1ba 0f00 	cmp.w	sl, #0
 8006bfc:	d10a      	bne.n	8006c14 <_strtoull_l.constprop.0+0x110>
 8006bfe:	b003      	add	sp, #12
 8006c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c04:	b117      	cbz	r7, 8006c0c <_strtoull_l.constprop.0+0x108>
 8006c06:	4240      	negs	r0, r0
 8006c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c0c:	f1ba 0f00 	cmp.w	sl, #0
 8006c10:	d0f5      	beq.n	8006bfe <_strtoull_l.constprop.0+0xfa>
 8006c12:	b10b      	cbz	r3, 8006c18 <_strtoull_l.constprop.0+0x114>
 8006c14:	f106 39ff 	add.w	r9, r6, #4294967295
 8006c18:	f8ca 9000 	str.w	r9, [sl]
 8006c1c:	e7ef      	b.n	8006bfe <_strtoull_l.constprop.0+0xfa>
 8006c1e:	2430      	movs	r4, #48	; 0x30
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	d191      	bne.n	8006b48 <_strtoull_l.constprop.0+0x44>
 8006c24:	2508      	movs	r5, #8
 8006c26:	e78f      	b.n	8006b48 <_strtoull_l.constprop.0+0x44>
 8006c28:	2c30      	cmp	r4, #48	; 0x30
 8006c2a:	d085      	beq.n	8006b38 <_strtoull_l.constprop.0+0x34>
 8006c2c:	250a      	movs	r5, #10
 8006c2e:	e78b      	b.n	8006b48 <_strtoull_l.constprop.0+0x44>
 8006c30:	08008929 	.word	0x08008929

08006c34 <strtoull>:
 8006c34:	4613      	mov	r3, r2
 8006c36:	460a      	mov	r2, r1
 8006c38:	4601      	mov	r1, r0
 8006c3a:	4802      	ldr	r0, [pc, #8]	; (8006c44 <strtoull+0x10>)
 8006c3c:	6800      	ldr	r0, [r0, #0]
 8006c3e:	f7ff bf61 	b.w	8006b04 <_strtoull_l.constprop.0>
 8006c42:	bf00      	nop
 8006c44:	2000000c 	.word	0x2000000c

08006c48 <__swbuf_r>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	460e      	mov	r6, r1
 8006c4c:	4614      	mov	r4, r2
 8006c4e:	4605      	mov	r5, r0
 8006c50:	b118      	cbz	r0, 8006c5a <__swbuf_r+0x12>
 8006c52:	6983      	ldr	r3, [r0, #24]
 8006c54:	b90b      	cbnz	r3, 8006c5a <__swbuf_r+0x12>
 8006c56:	f000 f9d9 	bl	800700c <__sinit>
 8006c5a:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <__swbuf_r+0x98>)
 8006c5c:	429c      	cmp	r4, r3
 8006c5e:	d12b      	bne.n	8006cb8 <__swbuf_r+0x70>
 8006c60:	686c      	ldr	r4, [r5, #4]
 8006c62:	69a3      	ldr	r3, [r4, #24]
 8006c64:	60a3      	str	r3, [r4, #8]
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	071a      	lsls	r2, r3, #28
 8006c6a:	d52f      	bpl.n	8006ccc <__swbuf_r+0x84>
 8006c6c:	6923      	ldr	r3, [r4, #16]
 8006c6e:	b36b      	cbz	r3, 8006ccc <__swbuf_r+0x84>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	6820      	ldr	r0, [r4, #0]
 8006c74:	1ac0      	subs	r0, r0, r3
 8006c76:	6963      	ldr	r3, [r4, #20]
 8006c78:	b2f6      	uxtb	r6, r6
 8006c7a:	4283      	cmp	r3, r0
 8006c7c:	4637      	mov	r7, r6
 8006c7e:	dc04      	bgt.n	8006c8a <__swbuf_r+0x42>
 8006c80:	4621      	mov	r1, r4
 8006c82:	4628      	mov	r0, r5
 8006c84:	f000 f92e 	bl	8006ee4 <_fflush_r>
 8006c88:	bb30      	cbnz	r0, 8006cd8 <__swbuf_r+0x90>
 8006c8a:	68a3      	ldr	r3, [r4, #8]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	60a3      	str	r3, [r4, #8]
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	6022      	str	r2, [r4, #0]
 8006c96:	701e      	strb	r6, [r3, #0]
 8006c98:	6963      	ldr	r3, [r4, #20]
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	4283      	cmp	r3, r0
 8006c9e:	d004      	beq.n	8006caa <__swbuf_r+0x62>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	07db      	lsls	r3, r3, #31
 8006ca4:	d506      	bpl.n	8006cb4 <__swbuf_r+0x6c>
 8006ca6:	2e0a      	cmp	r6, #10
 8006ca8:	d104      	bne.n	8006cb4 <__swbuf_r+0x6c>
 8006caa:	4621      	mov	r1, r4
 8006cac:	4628      	mov	r0, r5
 8006cae:	f000 f919 	bl	8006ee4 <_fflush_r>
 8006cb2:	b988      	cbnz	r0, 8006cd8 <__swbuf_r+0x90>
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <__swbuf_r+0x9c>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d101      	bne.n	8006cc2 <__swbuf_r+0x7a>
 8006cbe:	68ac      	ldr	r4, [r5, #8]
 8006cc0:	e7cf      	b.n	8006c62 <__swbuf_r+0x1a>
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <__swbuf_r+0xa0>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	bf08      	it	eq
 8006cc8:	68ec      	ldreq	r4, [r5, #12]
 8006cca:	e7ca      	b.n	8006c62 <__swbuf_r+0x1a>
 8006ccc:	4621      	mov	r1, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	f000 f80c 	bl	8006cec <__swsetup_r>
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0cb      	beq.n	8006c70 <__swbuf_r+0x28>
 8006cd8:	f04f 37ff 	mov.w	r7, #4294967295
 8006cdc:	e7ea      	b.n	8006cb4 <__swbuf_r+0x6c>
 8006cde:	bf00      	nop
 8006ce0:	08008a4c 	.word	0x08008a4c
 8006ce4:	08008a6c 	.word	0x08008a6c
 8006ce8:	08008a2c 	.word	0x08008a2c

08006cec <__swsetup_r>:
 8006cec:	4b32      	ldr	r3, [pc, #200]	; (8006db8 <__swsetup_r+0xcc>)
 8006cee:	b570      	push	{r4, r5, r6, lr}
 8006cf0:	681d      	ldr	r5, [r3, #0]
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	b125      	cbz	r5, 8006d02 <__swsetup_r+0x16>
 8006cf8:	69ab      	ldr	r3, [r5, #24]
 8006cfa:	b913      	cbnz	r3, 8006d02 <__swsetup_r+0x16>
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f000 f985 	bl	800700c <__sinit>
 8006d02:	4b2e      	ldr	r3, [pc, #184]	; (8006dbc <__swsetup_r+0xd0>)
 8006d04:	429c      	cmp	r4, r3
 8006d06:	d10f      	bne.n	8006d28 <__swsetup_r+0x3c>
 8006d08:	686c      	ldr	r4, [r5, #4]
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d10:	0719      	lsls	r1, r3, #28
 8006d12:	d42c      	bmi.n	8006d6e <__swsetup_r+0x82>
 8006d14:	06dd      	lsls	r5, r3, #27
 8006d16:	d411      	bmi.n	8006d3c <__swsetup_r+0x50>
 8006d18:	2309      	movs	r3, #9
 8006d1a:	6033      	str	r3, [r6, #0]
 8006d1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	f04f 30ff 	mov.w	r0, #4294967295
 8006d26:	e03e      	b.n	8006da6 <__swsetup_r+0xba>
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <__swsetup_r+0xd4>)
 8006d2a:	429c      	cmp	r4, r3
 8006d2c:	d101      	bne.n	8006d32 <__swsetup_r+0x46>
 8006d2e:	68ac      	ldr	r4, [r5, #8]
 8006d30:	e7eb      	b.n	8006d0a <__swsetup_r+0x1e>
 8006d32:	4b24      	ldr	r3, [pc, #144]	; (8006dc4 <__swsetup_r+0xd8>)
 8006d34:	429c      	cmp	r4, r3
 8006d36:	bf08      	it	eq
 8006d38:	68ec      	ldreq	r4, [r5, #12]
 8006d3a:	e7e6      	b.n	8006d0a <__swsetup_r+0x1e>
 8006d3c:	0758      	lsls	r0, r3, #29
 8006d3e:	d512      	bpl.n	8006d66 <__swsetup_r+0x7a>
 8006d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d42:	b141      	cbz	r1, 8006d56 <__swsetup_r+0x6a>
 8006d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d48:	4299      	cmp	r1, r3
 8006d4a:	d002      	beq.n	8006d52 <__swsetup_r+0x66>
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	f7fe fc09 	bl	8005564 <_free_r>
 8006d52:	2300      	movs	r3, #0
 8006d54:	6363      	str	r3, [r4, #52]	; 0x34
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	6023      	str	r3, [r4, #0]
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	f043 0308 	orr.w	r3, r3, #8
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	b94b      	cbnz	r3, 8006d86 <__swsetup_r+0x9a>
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7c:	d003      	beq.n	8006d86 <__swsetup_r+0x9a>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4630      	mov	r0, r6
 8006d82:	f000 fd77 	bl	8007874 <__smakebuf_r>
 8006d86:	89a0      	ldrh	r0, [r4, #12]
 8006d88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d8c:	f010 0301 	ands.w	r3, r0, #1
 8006d90:	d00a      	beq.n	8006da8 <__swsetup_r+0xbc>
 8006d92:	2300      	movs	r3, #0
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	6963      	ldr	r3, [r4, #20]
 8006d98:	425b      	negs	r3, r3
 8006d9a:	61a3      	str	r3, [r4, #24]
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	b943      	cbnz	r3, 8006db2 <__swsetup_r+0xc6>
 8006da0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006da4:	d1ba      	bne.n	8006d1c <__swsetup_r+0x30>
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	0781      	lsls	r1, r0, #30
 8006daa:	bf58      	it	pl
 8006dac:	6963      	ldrpl	r3, [r4, #20]
 8006dae:	60a3      	str	r3, [r4, #8]
 8006db0:	e7f4      	b.n	8006d9c <__swsetup_r+0xb0>
 8006db2:	2000      	movs	r0, #0
 8006db4:	e7f7      	b.n	8006da6 <__swsetup_r+0xba>
 8006db6:	bf00      	nop
 8006db8:	2000000c 	.word	0x2000000c
 8006dbc:	08008a4c 	.word	0x08008a4c
 8006dc0:	08008a6c 	.word	0x08008a6c
 8006dc4:	08008a2c 	.word	0x08008a2c

08006dc8 <abort>:
 8006dc8:	b508      	push	{r3, lr}
 8006dca:	2006      	movs	r0, #6
 8006dcc:	f001 faa4 	bl	8008318 <raise>
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f7fa fc0d 	bl	80015f0 <_exit>
	...

08006dd8 <__sflush_r>:
 8006dd8:	898a      	ldrh	r2, [r1, #12]
 8006dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	4605      	mov	r5, r0
 8006de0:	0710      	lsls	r0, r2, #28
 8006de2:	460c      	mov	r4, r1
 8006de4:	d458      	bmi.n	8006e98 <__sflush_r+0xc0>
 8006de6:	684b      	ldr	r3, [r1, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dc05      	bgt.n	8006df8 <__sflush_r+0x20>
 8006dec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dc02      	bgt.n	8006df8 <__sflush_r+0x20>
 8006df2:	2000      	movs	r0, #0
 8006df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	d0f9      	beq.n	8006df2 <__sflush_r+0x1a>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e04:	682f      	ldr	r7, [r5, #0]
 8006e06:	602b      	str	r3, [r5, #0]
 8006e08:	d032      	beq.n	8006e70 <__sflush_r+0x98>
 8006e0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	075a      	lsls	r2, r3, #29
 8006e10:	d505      	bpl.n	8006e1e <__sflush_r+0x46>
 8006e12:	6863      	ldr	r3, [r4, #4]
 8006e14:	1ac0      	subs	r0, r0, r3
 8006e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e18:	b10b      	cbz	r3, 8006e1e <__sflush_r+0x46>
 8006e1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e1c:	1ac0      	subs	r0, r0, r3
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4602      	mov	r2, r0
 8006e22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e24:	6a21      	ldr	r1, [r4, #32]
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b0      	blx	r6
 8006e2a:	1c43      	adds	r3, r0, #1
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	d106      	bne.n	8006e3e <__sflush_r+0x66>
 8006e30:	6829      	ldr	r1, [r5, #0]
 8006e32:	291d      	cmp	r1, #29
 8006e34:	d82c      	bhi.n	8006e90 <__sflush_r+0xb8>
 8006e36:	4a2a      	ldr	r2, [pc, #168]	; (8006ee0 <__sflush_r+0x108>)
 8006e38:	40ca      	lsrs	r2, r1
 8006e3a:	07d6      	lsls	r6, r2, #31
 8006e3c:	d528      	bpl.n	8006e90 <__sflush_r+0xb8>
 8006e3e:	2200      	movs	r2, #0
 8006e40:	6062      	str	r2, [r4, #4]
 8006e42:	04d9      	lsls	r1, r3, #19
 8006e44:	6922      	ldr	r2, [r4, #16]
 8006e46:	6022      	str	r2, [r4, #0]
 8006e48:	d504      	bpl.n	8006e54 <__sflush_r+0x7c>
 8006e4a:	1c42      	adds	r2, r0, #1
 8006e4c:	d101      	bne.n	8006e52 <__sflush_r+0x7a>
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	b903      	cbnz	r3, 8006e54 <__sflush_r+0x7c>
 8006e52:	6560      	str	r0, [r4, #84]	; 0x54
 8006e54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e56:	602f      	str	r7, [r5, #0]
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d0ca      	beq.n	8006df2 <__sflush_r+0x1a>
 8006e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e60:	4299      	cmp	r1, r3
 8006e62:	d002      	beq.n	8006e6a <__sflush_r+0x92>
 8006e64:	4628      	mov	r0, r5
 8006e66:	f7fe fb7d 	bl	8005564 <_free_r>
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	6360      	str	r0, [r4, #52]	; 0x34
 8006e6e:	e7c1      	b.n	8006df4 <__sflush_r+0x1c>
 8006e70:	6a21      	ldr	r1, [r4, #32]
 8006e72:	2301      	movs	r3, #1
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b0      	blx	r6
 8006e78:	1c41      	adds	r1, r0, #1
 8006e7a:	d1c7      	bne.n	8006e0c <__sflush_r+0x34>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0c4      	beq.n	8006e0c <__sflush_r+0x34>
 8006e82:	2b1d      	cmp	r3, #29
 8006e84:	d001      	beq.n	8006e8a <__sflush_r+0xb2>
 8006e86:	2b16      	cmp	r3, #22
 8006e88:	d101      	bne.n	8006e8e <__sflush_r+0xb6>
 8006e8a:	602f      	str	r7, [r5, #0]
 8006e8c:	e7b1      	b.n	8006df2 <__sflush_r+0x1a>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	e7ad      	b.n	8006df4 <__sflush_r+0x1c>
 8006e98:	690f      	ldr	r7, [r1, #16]
 8006e9a:	2f00      	cmp	r7, #0
 8006e9c:	d0a9      	beq.n	8006df2 <__sflush_r+0x1a>
 8006e9e:	0793      	lsls	r3, r2, #30
 8006ea0:	680e      	ldr	r6, [r1, #0]
 8006ea2:	bf08      	it	eq
 8006ea4:	694b      	ldreq	r3, [r1, #20]
 8006ea6:	600f      	str	r7, [r1, #0]
 8006ea8:	bf18      	it	ne
 8006eaa:	2300      	movne	r3, #0
 8006eac:	eba6 0807 	sub.w	r8, r6, r7
 8006eb0:	608b      	str	r3, [r1, #8]
 8006eb2:	f1b8 0f00 	cmp.w	r8, #0
 8006eb6:	dd9c      	ble.n	8006df2 <__sflush_r+0x1a>
 8006eb8:	6a21      	ldr	r1, [r4, #32]
 8006eba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ebc:	4643      	mov	r3, r8
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b0      	blx	r6
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	dc06      	bgt.n	8006ed6 <__sflush_r+0xfe>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ece:	81a3      	strh	r3, [r4, #12]
 8006ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed4:	e78e      	b.n	8006df4 <__sflush_r+0x1c>
 8006ed6:	4407      	add	r7, r0
 8006ed8:	eba8 0800 	sub.w	r8, r8, r0
 8006edc:	e7e9      	b.n	8006eb2 <__sflush_r+0xda>
 8006ede:	bf00      	nop
 8006ee0:	20400001 	.word	0x20400001

08006ee4 <_fflush_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	690b      	ldr	r3, [r1, #16]
 8006ee8:	4605      	mov	r5, r0
 8006eea:	460c      	mov	r4, r1
 8006eec:	b913      	cbnz	r3, 8006ef4 <_fflush_r+0x10>
 8006eee:	2500      	movs	r5, #0
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	b118      	cbz	r0, 8006efe <_fflush_r+0x1a>
 8006ef6:	6983      	ldr	r3, [r0, #24]
 8006ef8:	b90b      	cbnz	r3, 8006efe <_fflush_r+0x1a>
 8006efa:	f000 f887 	bl	800700c <__sinit>
 8006efe:	4b14      	ldr	r3, [pc, #80]	; (8006f50 <_fflush_r+0x6c>)
 8006f00:	429c      	cmp	r4, r3
 8006f02:	d11b      	bne.n	8006f3c <_fflush_r+0x58>
 8006f04:	686c      	ldr	r4, [r5, #4]
 8006f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0ef      	beq.n	8006eee <_fflush_r+0xa>
 8006f0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f10:	07d0      	lsls	r0, r2, #31
 8006f12:	d404      	bmi.n	8006f1e <_fflush_r+0x3a>
 8006f14:	0599      	lsls	r1, r3, #22
 8006f16:	d402      	bmi.n	8006f1e <_fflush_r+0x3a>
 8006f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1a:	f000 fc84 	bl	8007826 <__retarget_lock_acquire_recursive>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	4621      	mov	r1, r4
 8006f22:	f7ff ff59 	bl	8006dd8 <__sflush_r>
 8006f26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f28:	07da      	lsls	r2, r3, #31
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	d4e0      	bmi.n	8006ef0 <_fflush_r+0xc>
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	059b      	lsls	r3, r3, #22
 8006f32:	d4dd      	bmi.n	8006ef0 <_fflush_r+0xc>
 8006f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f36:	f000 fc77 	bl	8007828 <__retarget_lock_release_recursive>
 8006f3a:	e7d9      	b.n	8006ef0 <_fflush_r+0xc>
 8006f3c:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <_fflush_r+0x70>)
 8006f3e:	429c      	cmp	r4, r3
 8006f40:	d101      	bne.n	8006f46 <_fflush_r+0x62>
 8006f42:	68ac      	ldr	r4, [r5, #8]
 8006f44:	e7df      	b.n	8006f06 <_fflush_r+0x22>
 8006f46:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <_fflush_r+0x74>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	bf08      	it	eq
 8006f4c:	68ec      	ldreq	r4, [r5, #12]
 8006f4e:	e7da      	b.n	8006f06 <_fflush_r+0x22>
 8006f50:	08008a4c 	.word	0x08008a4c
 8006f54:	08008a6c 	.word	0x08008a6c
 8006f58:	08008a2c 	.word	0x08008a2c

08006f5c <std>:
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	e9c0 3300 	strd	r3, r3, [r0]
 8006f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f6a:	6083      	str	r3, [r0, #8]
 8006f6c:	8181      	strh	r1, [r0, #12]
 8006f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006f70:	81c2      	strh	r2, [r0, #14]
 8006f72:	6183      	str	r3, [r0, #24]
 8006f74:	4619      	mov	r1, r3
 8006f76:	2208      	movs	r2, #8
 8006f78:	305c      	adds	r0, #92	; 0x5c
 8006f7a:	f7fe fad5 	bl	8005528 <memset>
 8006f7e:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <std+0x38>)
 8006f80:	6263      	str	r3, [r4, #36]	; 0x24
 8006f82:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <std+0x3c>)
 8006f84:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <std+0x40>)
 8006f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <std+0x44>)
 8006f8c:	6224      	str	r4, [r4, #32]
 8006f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	bf00      	nop
 8006f94:	08008351 	.word	0x08008351
 8006f98:	08008373 	.word	0x08008373
 8006f9c:	080083ab 	.word	0x080083ab
 8006fa0:	080083cf 	.word	0x080083cf

08006fa4 <_cleanup_r>:
 8006fa4:	4901      	ldr	r1, [pc, #4]	; (8006fac <_cleanup_r+0x8>)
 8006fa6:	f000 b8af 	b.w	8007108 <_fwalk_reent>
 8006faa:	bf00      	nop
 8006fac:	08006ee5 	.word	0x08006ee5

08006fb0 <__sfmoreglue>:
 8006fb0:	b570      	push	{r4, r5, r6, lr}
 8006fb2:	2268      	movs	r2, #104	; 0x68
 8006fb4:	1e4d      	subs	r5, r1, #1
 8006fb6:	4355      	muls	r5, r2
 8006fb8:	460e      	mov	r6, r1
 8006fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fbe:	f7fe fb3d 	bl	800563c <_malloc_r>
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	b140      	cbz	r0, 8006fd8 <__sfmoreglue+0x28>
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8006fcc:	300c      	adds	r0, #12
 8006fce:	60a0      	str	r0, [r4, #8]
 8006fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fd4:	f7fe faa8 	bl	8005528 <memset>
 8006fd8:	4620      	mov	r0, r4
 8006fda:	bd70      	pop	{r4, r5, r6, pc}

08006fdc <__sfp_lock_acquire>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sfp_lock_acquire+0x8>)
 8006fde:	f000 bc22 	b.w	8007826 <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20000581 	.word	0x20000581

08006fe8 <__sfp_lock_release>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__sfp_lock_release+0x8>)
 8006fea:	f000 bc1d 	b.w	8007828 <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20000581 	.word	0x20000581

08006ff4 <__sinit_lock_acquire>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__sinit_lock_acquire+0x8>)
 8006ff6:	f000 bc16 	b.w	8007826 <__retarget_lock_acquire_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20000582 	.word	0x20000582

08007000 <__sinit_lock_release>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__sinit_lock_release+0x8>)
 8007002:	f000 bc11 	b.w	8007828 <__retarget_lock_release_recursive>
 8007006:	bf00      	nop
 8007008:	20000582 	.word	0x20000582

0800700c <__sinit>:
 800700c:	b510      	push	{r4, lr}
 800700e:	4604      	mov	r4, r0
 8007010:	f7ff fff0 	bl	8006ff4 <__sinit_lock_acquire>
 8007014:	69a3      	ldr	r3, [r4, #24]
 8007016:	b11b      	cbz	r3, 8007020 <__sinit+0x14>
 8007018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800701c:	f7ff bff0 	b.w	8007000 <__sinit_lock_release>
 8007020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007024:	6523      	str	r3, [r4, #80]	; 0x50
 8007026:	4b13      	ldr	r3, [pc, #76]	; (8007074 <__sinit+0x68>)
 8007028:	4a13      	ldr	r2, [pc, #76]	; (8007078 <__sinit+0x6c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	62a2      	str	r2, [r4, #40]	; 0x28
 800702e:	42a3      	cmp	r3, r4
 8007030:	bf04      	itt	eq
 8007032:	2301      	moveq	r3, #1
 8007034:	61a3      	streq	r3, [r4, #24]
 8007036:	4620      	mov	r0, r4
 8007038:	f000 f820 	bl	800707c <__sfp>
 800703c:	6060      	str	r0, [r4, #4]
 800703e:	4620      	mov	r0, r4
 8007040:	f000 f81c 	bl	800707c <__sfp>
 8007044:	60a0      	str	r0, [r4, #8]
 8007046:	4620      	mov	r0, r4
 8007048:	f000 f818 	bl	800707c <__sfp>
 800704c:	2200      	movs	r2, #0
 800704e:	60e0      	str	r0, [r4, #12]
 8007050:	2104      	movs	r1, #4
 8007052:	6860      	ldr	r0, [r4, #4]
 8007054:	f7ff ff82 	bl	8006f5c <std>
 8007058:	68a0      	ldr	r0, [r4, #8]
 800705a:	2201      	movs	r2, #1
 800705c:	2109      	movs	r1, #9
 800705e:	f7ff ff7d 	bl	8006f5c <std>
 8007062:	68e0      	ldr	r0, [r4, #12]
 8007064:	2202      	movs	r2, #2
 8007066:	2112      	movs	r1, #18
 8007068:	f7ff ff78 	bl	8006f5c <std>
 800706c:	2301      	movs	r3, #1
 800706e:	61a3      	str	r3, [r4, #24]
 8007070:	e7d2      	b.n	8007018 <__sinit+0xc>
 8007072:	bf00      	nop
 8007074:	08008890 	.word	0x08008890
 8007078:	08006fa5 	.word	0x08006fa5

0800707c <__sfp>:
 800707c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707e:	4607      	mov	r7, r0
 8007080:	f7ff ffac 	bl	8006fdc <__sfp_lock_acquire>
 8007084:	4b1e      	ldr	r3, [pc, #120]	; (8007100 <__sfp+0x84>)
 8007086:	681e      	ldr	r6, [r3, #0]
 8007088:	69b3      	ldr	r3, [r6, #24]
 800708a:	b913      	cbnz	r3, 8007092 <__sfp+0x16>
 800708c:	4630      	mov	r0, r6
 800708e:	f7ff ffbd 	bl	800700c <__sinit>
 8007092:	3648      	adds	r6, #72	; 0x48
 8007094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007098:	3b01      	subs	r3, #1
 800709a:	d503      	bpl.n	80070a4 <__sfp+0x28>
 800709c:	6833      	ldr	r3, [r6, #0]
 800709e:	b30b      	cbz	r3, 80070e4 <__sfp+0x68>
 80070a0:	6836      	ldr	r6, [r6, #0]
 80070a2:	e7f7      	b.n	8007094 <__sfp+0x18>
 80070a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070a8:	b9d5      	cbnz	r5, 80070e0 <__sfp+0x64>
 80070aa:	4b16      	ldr	r3, [pc, #88]	; (8007104 <__sfp+0x88>)
 80070ac:	60e3      	str	r3, [r4, #12]
 80070ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070b2:	6665      	str	r5, [r4, #100]	; 0x64
 80070b4:	f000 fbb6 	bl	8007824 <__retarget_lock_init_recursive>
 80070b8:	f7ff ff96 	bl	8006fe8 <__sfp_lock_release>
 80070bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070c4:	6025      	str	r5, [r4, #0]
 80070c6:	61a5      	str	r5, [r4, #24]
 80070c8:	2208      	movs	r2, #8
 80070ca:	4629      	mov	r1, r5
 80070cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070d0:	f7fe fa2a 	bl	8005528 <memset>
 80070d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070dc:	4620      	mov	r0, r4
 80070de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e0:	3468      	adds	r4, #104	; 0x68
 80070e2:	e7d9      	b.n	8007098 <__sfp+0x1c>
 80070e4:	2104      	movs	r1, #4
 80070e6:	4638      	mov	r0, r7
 80070e8:	f7ff ff62 	bl	8006fb0 <__sfmoreglue>
 80070ec:	4604      	mov	r4, r0
 80070ee:	6030      	str	r0, [r6, #0]
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d1d5      	bne.n	80070a0 <__sfp+0x24>
 80070f4:	f7ff ff78 	bl	8006fe8 <__sfp_lock_release>
 80070f8:	230c      	movs	r3, #12
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	e7ee      	b.n	80070dc <__sfp+0x60>
 80070fe:	bf00      	nop
 8007100:	08008890 	.word	0x08008890
 8007104:	ffff0001 	.word	0xffff0001

08007108 <_fwalk_reent>:
 8007108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800710c:	4606      	mov	r6, r0
 800710e:	4688      	mov	r8, r1
 8007110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007114:	2700      	movs	r7, #0
 8007116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800711a:	f1b9 0901 	subs.w	r9, r9, #1
 800711e:	d505      	bpl.n	800712c <_fwalk_reent+0x24>
 8007120:	6824      	ldr	r4, [r4, #0]
 8007122:	2c00      	cmp	r4, #0
 8007124:	d1f7      	bne.n	8007116 <_fwalk_reent+0xe>
 8007126:	4638      	mov	r0, r7
 8007128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800712c:	89ab      	ldrh	r3, [r5, #12]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d907      	bls.n	8007142 <_fwalk_reent+0x3a>
 8007132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007136:	3301      	adds	r3, #1
 8007138:	d003      	beq.n	8007142 <_fwalk_reent+0x3a>
 800713a:	4629      	mov	r1, r5
 800713c:	4630      	mov	r0, r6
 800713e:	47c0      	blx	r8
 8007140:	4307      	orrs	r7, r0
 8007142:	3568      	adds	r5, #104	; 0x68
 8007144:	e7e9      	b.n	800711a <_fwalk_reent+0x12>

08007146 <rshift>:
 8007146:	6903      	ldr	r3, [r0, #16]
 8007148:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800714c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007150:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007154:	f100 0414 	add.w	r4, r0, #20
 8007158:	dd45      	ble.n	80071e6 <rshift+0xa0>
 800715a:	f011 011f 	ands.w	r1, r1, #31
 800715e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007162:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007166:	d10c      	bne.n	8007182 <rshift+0x3c>
 8007168:	f100 0710 	add.w	r7, r0, #16
 800716c:	4629      	mov	r1, r5
 800716e:	42b1      	cmp	r1, r6
 8007170:	d334      	bcc.n	80071dc <rshift+0x96>
 8007172:	1a9b      	subs	r3, r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	1eea      	subs	r2, r5, #3
 8007178:	4296      	cmp	r6, r2
 800717a:	bf38      	it	cc
 800717c:	2300      	movcc	r3, #0
 800717e:	4423      	add	r3, r4
 8007180:	e015      	b.n	80071ae <rshift+0x68>
 8007182:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007186:	f1c1 0820 	rsb	r8, r1, #32
 800718a:	40cf      	lsrs	r7, r1
 800718c:	f105 0e04 	add.w	lr, r5, #4
 8007190:	46a1      	mov	r9, r4
 8007192:	4576      	cmp	r6, lr
 8007194:	46f4      	mov	ip, lr
 8007196:	d815      	bhi.n	80071c4 <rshift+0x7e>
 8007198:	1a9a      	subs	r2, r3, r2
 800719a:	0092      	lsls	r2, r2, #2
 800719c:	3a04      	subs	r2, #4
 800719e:	3501      	adds	r5, #1
 80071a0:	42ae      	cmp	r6, r5
 80071a2:	bf38      	it	cc
 80071a4:	2200      	movcc	r2, #0
 80071a6:	18a3      	adds	r3, r4, r2
 80071a8:	50a7      	str	r7, [r4, r2]
 80071aa:	b107      	cbz	r7, 80071ae <rshift+0x68>
 80071ac:	3304      	adds	r3, #4
 80071ae:	1b1a      	subs	r2, r3, r4
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80071b6:	bf08      	it	eq
 80071b8:	2300      	moveq	r3, #0
 80071ba:	6102      	str	r2, [r0, #16]
 80071bc:	bf08      	it	eq
 80071be:	6143      	streq	r3, [r0, #20]
 80071c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071c4:	f8dc c000 	ldr.w	ip, [ip]
 80071c8:	fa0c fc08 	lsl.w	ip, ip, r8
 80071cc:	ea4c 0707 	orr.w	r7, ip, r7
 80071d0:	f849 7b04 	str.w	r7, [r9], #4
 80071d4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071d8:	40cf      	lsrs	r7, r1
 80071da:	e7da      	b.n	8007192 <rshift+0x4c>
 80071dc:	f851 cb04 	ldr.w	ip, [r1], #4
 80071e0:	f847 cf04 	str.w	ip, [r7, #4]!
 80071e4:	e7c3      	b.n	800716e <rshift+0x28>
 80071e6:	4623      	mov	r3, r4
 80071e8:	e7e1      	b.n	80071ae <rshift+0x68>

080071ea <__hexdig_fun>:
 80071ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	d802      	bhi.n	80071f8 <__hexdig_fun+0xe>
 80071f2:	3820      	subs	r0, #32
 80071f4:	b2c0      	uxtb	r0, r0
 80071f6:	4770      	bx	lr
 80071f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80071fc:	2b05      	cmp	r3, #5
 80071fe:	d801      	bhi.n	8007204 <__hexdig_fun+0x1a>
 8007200:	3847      	subs	r0, #71	; 0x47
 8007202:	e7f7      	b.n	80071f4 <__hexdig_fun+0xa>
 8007204:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007208:	2b05      	cmp	r3, #5
 800720a:	d801      	bhi.n	8007210 <__hexdig_fun+0x26>
 800720c:	3827      	subs	r0, #39	; 0x27
 800720e:	e7f1      	b.n	80071f4 <__hexdig_fun+0xa>
 8007210:	2000      	movs	r0, #0
 8007212:	4770      	bx	lr

08007214 <__gethex>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	ed2d 8b02 	vpush	{d8}
 800721c:	b089      	sub	sp, #36	; 0x24
 800721e:	ee08 0a10 	vmov	s16, r0
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	4bb4      	ldr	r3, [pc, #720]	; (80074f8 <__gethex+0x2e4>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	4618      	mov	r0, r3
 800722c:	468b      	mov	fp, r1
 800722e:	4690      	mov	r8, r2
 8007230:	f7f8 ffe0 	bl	80001f4 <strlen>
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	f8db 2000 	ldr.w	r2, [fp]
 800723a:	4403      	add	r3, r0
 800723c:	4682      	mov	sl, r0
 800723e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	1c93      	adds	r3, r2, #2
 8007246:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800724a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800724e:	32fe      	adds	r2, #254	; 0xfe
 8007250:	18d1      	adds	r1, r2, r3
 8007252:	461f      	mov	r7, r3
 8007254:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007258:	9100      	str	r1, [sp, #0]
 800725a:	2830      	cmp	r0, #48	; 0x30
 800725c:	d0f8      	beq.n	8007250 <__gethex+0x3c>
 800725e:	f7ff ffc4 	bl	80071ea <__hexdig_fun>
 8007262:	4604      	mov	r4, r0
 8007264:	2800      	cmp	r0, #0
 8007266:	d13a      	bne.n	80072de <__gethex+0xca>
 8007268:	9901      	ldr	r1, [sp, #4]
 800726a:	4652      	mov	r2, sl
 800726c:	4638      	mov	r0, r7
 800726e:	f7fe fd64 	bl	8005d3a <strncmp>
 8007272:	4605      	mov	r5, r0
 8007274:	2800      	cmp	r0, #0
 8007276:	d168      	bne.n	800734a <__gethex+0x136>
 8007278:	f817 000a 	ldrb.w	r0, [r7, sl]
 800727c:	eb07 060a 	add.w	r6, r7, sl
 8007280:	f7ff ffb3 	bl	80071ea <__hexdig_fun>
 8007284:	2800      	cmp	r0, #0
 8007286:	d062      	beq.n	800734e <__gethex+0x13a>
 8007288:	4633      	mov	r3, r6
 800728a:	7818      	ldrb	r0, [r3, #0]
 800728c:	2830      	cmp	r0, #48	; 0x30
 800728e:	461f      	mov	r7, r3
 8007290:	f103 0301 	add.w	r3, r3, #1
 8007294:	d0f9      	beq.n	800728a <__gethex+0x76>
 8007296:	f7ff ffa8 	bl	80071ea <__hexdig_fun>
 800729a:	2301      	movs	r3, #1
 800729c:	fab0 f480 	clz	r4, r0
 80072a0:	0964      	lsrs	r4, r4, #5
 80072a2:	4635      	mov	r5, r6
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	463a      	mov	r2, r7
 80072a8:	4616      	mov	r6, r2
 80072aa:	3201      	adds	r2, #1
 80072ac:	7830      	ldrb	r0, [r6, #0]
 80072ae:	f7ff ff9c 	bl	80071ea <__hexdig_fun>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d1f8      	bne.n	80072a8 <__gethex+0x94>
 80072b6:	9901      	ldr	r1, [sp, #4]
 80072b8:	4652      	mov	r2, sl
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7fe fd3d 	bl	8005d3a <strncmp>
 80072c0:	b980      	cbnz	r0, 80072e4 <__gethex+0xd0>
 80072c2:	b94d      	cbnz	r5, 80072d8 <__gethex+0xc4>
 80072c4:	eb06 050a 	add.w	r5, r6, sl
 80072c8:	462a      	mov	r2, r5
 80072ca:	4616      	mov	r6, r2
 80072cc:	3201      	adds	r2, #1
 80072ce:	7830      	ldrb	r0, [r6, #0]
 80072d0:	f7ff ff8b 	bl	80071ea <__hexdig_fun>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d1f8      	bne.n	80072ca <__gethex+0xb6>
 80072d8:	1bad      	subs	r5, r5, r6
 80072da:	00ad      	lsls	r5, r5, #2
 80072dc:	e004      	b.n	80072e8 <__gethex+0xd4>
 80072de:	2400      	movs	r4, #0
 80072e0:	4625      	mov	r5, r4
 80072e2:	e7e0      	b.n	80072a6 <__gethex+0x92>
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	d1f7      	bne.n	80072d8 <__gethex+0xc4>
 80072e8:	7833      	ldrb	r3, [r6, #0]
 80072ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072ee:	2b50      	cmp	r3, #80	; 0x50
 80072f0:	d13b      	bne.n	800736a <__gethex+0x156>
 80072f2:	7873      	ldrb	r3, [r6, #1]
 80072f4:	2b2b      	cmp	r3, #43	; 0x2b
 80072f6:	d02c      	beq.n	8007352 <__gethex+0x13e>
 80072f8:	2b2d      	cmp	r3, #45	; 0x2d
 80072fa:	d02e      	beq.n	800735a <__gethex+0x146>
 80072fc:	1c71      	adds	r1, r6, #1
 80072fe:	f04f 0900 	mov.w	r9, #0
 8007302:	7808      	ldrb	r0, [r1, #0]
 8007304:	f7ff ff71 	bl	80071ea <__hexdig_fun>
 8007308:	1e43      	subs	r3, r0, #1
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b18      	cmp	r3, #24
 800730e:	d82c      	bhi.n	800736a <__gethex+0x156>
 8007310:	f1a0 0210 	sub.w	r2, r0, #16
 8007314:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007318:	f7ff ff67 	bl	80071ea <__hexdig_fun>
 800731c:	1e43      	subs	r3, r0, #1
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b18      	cmp	r3, #24
 8007322:	d91d      	bls.n	8007360 <__gethex+0x14c>
 8007324:	f1b9 0f00 	cmp.w	r9, #0
 8007328:	d000      	beq.n	800732c <__gethex+0x118>
 800732a:	4252      	negs	r2, r2
 800732c:	4415      	add	r5, r2
 800732e:	f8cb 1000 	str.w	r1, [fp]
 8007332:	b1e4      	cbz	r4, 800736e <__gethex+0x15a>
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	bf14      	ite	ne
 800733a:	2700      	movne	r7, #0
 800733c:	2706      	moveq	r7, #6
 800733e:	4638      	mov	r0, r7
 8007340:	b009      	add	sp, #36	; 0x24
 8007342:	ecbd 8b02 	vpop	{d8}
 8007346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734a:	463e      	mov	r6, r7
 800734c:	4625      	mov	r5, r4
 800734e:	2401      	movs	r4, #1
 8007350:	e7ca      	b.n	80072e8 <__gethex+0xd4>
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	1cb1      	adds	r1, r6, #2
 8007358:	e7d3      	b.n	8007302 <__gethex+0xee>
 800735a:	f04f 0901 	mov.w	r9, #1
 800735e:	e7fa      	b.n	8007356 <__gethex+0x142>
 8007360:	230a      	movs	r3, #10
 8007362:	fb03 0202 	mla	r2, r3, r2, r0
 8007366:	3a10      	subs	r2, #16
 8007368:	e7d4      	b.n	8007314 <__gethex+0x100>
 800736a:	4631      	mov	r1, r6
 800736c:	e7df      	b.n	800732e <__gethex+0x11a>
 800736e:	1bf3      	subs	r3, r6, r7
 8007370:	3b01      	subs	r3, #1
 8007372:	4621      	mov	r1, r4
 8007374:	2b07      	cmp	r3, #7
 8007376:	dc0b      	bgt.n	8007390 <__gethex+0x17c>
 8007378:	ee18 0a10 	vmov	r0, s16
 800737c:	f000 fad8 	bl	8007930 <_Balloc>
 8007380:	4604      	mov	r4, r0
 8007382:	b940      	cbnz	r0, 8007396 <__gethex+0x182>
 8007384:	4b5d      	ldr	r3, [pc, #372]	; (80074fc <__gethex+0x2e8>)
 8007386:	4602      	mov	r2, r0
 8007388:	21de      	movs	r1, #222	; 0xde
 800738a:	485d      	ldr	r0, [pc, #372]	; (8007500 <__gethex+0x2ec>)
 800738c:	f7fe f83c 	bl	8005408 <__assert_func>
 8007390:	3101      	adds	r1, #1
 8007392:	105b      	asrs	r3, r3, #1
 8007394:	e7ee      	b.n	8007374 <__gethex+0x160>
 8007396:	f100 0914 	add.w	r9, r0, #20
 800739a:	f04f 0b00 	mov.w	fp, #0
 800739e:	f1ca 0301 	rsb	r3, sl, #1
 80073a2:	f8cd 9008 	str.w	r9, [sp, #8]
 80073a6:	f8cd b000 	str.w	fp, [sp]
 80073aa:	9306      	str	r3, [sp, #24]
 80073ac:	42b7      	cmp	r7, r6
 80073ae:	d340      	bcc.n	8007432 <__gethex+0x21e>
 80073b0:	9802      	ldr	r0, [sp, #8]
 80073b2:	9b00      	ldr	r3, [sp, #0]
 80073b4:	f840 3b04 	str.w	r3, [r0], #4
 80073b8:	eba0 0009 	sub.w	r0, r0, r9
 80073bc:	1080      	asrs	r0, r0, #2
 80073be:	0146      	lsls	r6, r0, #5
 80073c0:	6120      	str	r0, [r4, #16]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fba6 	bl	8007b14 <__hi0bits>
 80073c8:	1a30      	subs	r0, r6, r0
 80073ca:	f8d8 6000 	ldr.w	r6, [r8]
 80073ce:	42b0      	cmp	r0, r6
 80073d0:	dd63      	ble.n	800749a <__gethex+0x286>
 80073d2:	1b87      	subs	r7, r0, r6
 80073d4:	4639      	mov	r1, r7
 80073d6:	4620      	mov	r0, r4
 80073d8:	f000 ff4a 	bl	8008270 <__any_on>
 80073dc:	4682      	mov	sl, r0
 80073de:	b1a8      	cbz	r0, 800740c <__gethex+0x1f8>
 80073e0:	1e7b      	subs	r3, r7, #1
 80073e2:	1159      	asrs	r1, r3, #5
 80073e4:	f003 021f 	and.w	r2, r3, #31
 80073e8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80073ec:	f04f 0a01 	mov.w	sl, #1
 80073f0:	fa0a f202 	lsl.w	r2, sl, r2
 80073f4:	420a      	tst	r2, r1
 80073f6:	d009      	beq.n	800740c <__gethex+0x1f8>
 80073f8:	4553      	cmp	r3, sl
 80073fa:	dd05      	ble.n	8007408 <__gethex+0x1f4>
 80073fc:	1eb9      	subs	r1, r7, #2
 80073fe:	4620      	mov	r0, r4
 8007400:	f000 ff36 	bl	8008270 <__any_on>
 8007404:	2800      	cmp	r0, #0
 8007406:	d145      	bne.n	8007494 <__gethex+0x280>
 8007408:	f04f 0a02 	mov.w	sl, #2
 800740c:	4639      	mov	r1, r7
 800740e:	4620      	mov	r0, r4
 8007410:	f7ff fe99 	bl	8007146 <rshift>
 8007414:	443d      	add	r5, r7
 8007416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800741a:	42ab      	cmp	r3, r5
 800741c:	da4c      	bge.n	80074b8 <__gethex+0x2a4>
 800741e:	ee18 0a10 	vmov	r0, s16
 8007422:	4621      	mov	r1, r4
 8007424:	f000 fac4 	bl	80079b0 <_Bfree>
 8007428:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800742a:	2300      	movs	r3, #0
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	27a3      	movs	r7, #163	; 0xa3
 8007430:	e785      	b.n	800733e <__gethex+0x12a>
 8007432:	1e73      	subs	r3, r6, #1
 8007434:	9a05      	ldr	r2, [sp, #20]
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800743c:	4293      	cmp	r3, r2
 800743e:	d019      	beq.n	8007474 <__gethex+0x260>
 8007440:	f1bb 0f20 	cmp.w	fp, #32
 8007444:	d107      	bne.n	8007456 <__gethex+0x242>
 8007446:	9b02      	ldr	r3, [sp, #8]
 8007448:	9a00      	ldr	r2, [sp, #0]
 800744a:	f843 2b04 	str.w	r2, [r3], #4
 800744e:	9302      	str	r3, [sp, #8]
 8007450:	2300      	movs	r3, #0
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	469b      	mov	fp, r3
 8007456:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800745a:	f7ff fec6 	bl	80071ea <__hexdig_fun>
 800745e:	9b00      	ldr	r3, [sp, #0]
 8007460:	f000 000f 	and.w	r0, r0, #15
 8007464:	fa00 f00b 	lsl.w	r0, r0, fp
 8007468:	4303      	orrs	r3, r0
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	f10b 0b04 	add.w	fp, fp, #4
 8007470:	9b03      	ldr	r3, [sp, #12]
 8007472:	e00d      	b.n	8007490 <__gethex+0x27c>
 8007474:	9b03      	ldr	r3, [sp, #12]
 8007476:	9a06      	ldr	r2, [sp, #24]
 8007478:	4413      	add	r3, r2
 800747a:	42bb      	cmp	r3, r7
 800747c:	d3e0      	bcc.n	8007440 <__gethex+0x22c>
 800747e:	4618      	mov	r0, r3
 8007480:	9901      	ldr	r1, [sp, #4]
 8007482:	9307      	str	r3, [sp, #28]
 8007484:	4652      	mov	r2, sl
 8007486:	f7fe fc58 	bl	8005d3a <strncmp>
 800748a:	9b07      	ldr	r3, [sp, #28]
 800748c:	2800      	cmp	r0, #0
 800748e:	d1d7      	bne.n	8007440 <__gethex+0x22c>
 8007490:	461e      	mov	r6, r3
 8007492:	e78b      	b.n	80073ac <__gethex+0x198>
 8007494:	f04f 0a03 	mov.w	sl, #3
 8007498:	e7b8      	b.n	800740c <__gethex+0x1f8>
 800749a:	da0a      	bge.n	80074b2 <__gethex+0x29e>
 800749c:	1a37      	subs	r7, r6, r0
 800749e:	4621      	mov	r1, r4
 80074a0:	ee18 0a10 	vmov	r0, s16
 80074a4:	463a      	mov	r2, r7
 80074a6:	f000 fc9f 	bl	8007de8 <__lshift>
 80074aa:	1bed      	subs	r5, r5, r7
 80074ac:	4604      	mov	r4, r0
 80074ae:	f100 0914 	add.w	r9, r0, #20
 80074b2:	f04f 0a00 	mov.w	sl, #0
 80074b6:	e7ae      	b.n	8007416 <__gethex+0x202>
 80074b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80074bc:	42a8      	cmp	r0, r5
 80074be:	dd72      	ble.n	80075a6 <__gethex+0x392>
 80074c0:	1b45      	subs	r5, r0, r5
 80074c2:	42ae      	cmp	r6, r5
 80074c4:	dc36      	bgt.n	8007534 <__gethex+0x320>
 80074c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d02a      	beq.n	8007524 <__gethex+0x310>
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d02c      	beq.n	800752c <__gethex+0x318>
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d11c      	bne.n	8007510 <__gethex+0x2fc>
 80074d6:	42ae      	cmp	r6, r5
 80074d8:	d11a      	bne.n	8007510 <__gethex+0x2fc>
 80074da:	2e01      	cmp	r6, #1
 80074dc:	d112      	bne.n	8007504 <__gethex+0x2f0>
 80074de:	9a04      	ldr	r2, [sp, #16]
 80074e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	2301      	movs	r3, #1
 80074e8:	6123      	str	r3, [r4, #16]
 80074ea:	f8c9 3000 	str.w	r3, [r9]
 80074ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074f0:	2762      	movs	r7, #98	; 0x62
 80074f2:	601c      	str	r4, [r3, #0]
 80074f4:	e723      	b.n	800733e <__gethex+0x12a>
 80074f6:	bf00      	nop
 80074f8:	08008b04 	.word	0x08008b04
 80074fc:	08008a8c 	.word	0x08008a8c
 8007500:	08008a9d 	.word	0x08008a9d
 8007504:	1e71      	subs	r1, r6, #1
 8007506:	4620      	mov	r0, r4
 8007508:	f000 feb2 	bl	8008270 <__any_on>
 800750c:	2800      	cmp	r0, #0
 800750e:	d1e6      	bne.n	80074de <__gethex+0x2ca>
 8007510:	ee18 0a10 	vmov	r0, s16
 8007514:	4621      	mov	r1, r4
 8007516:	f000 fa4b 	bl	80079b0 <_Bfree>
 800751a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800751c:	2300      	movs	r3, #0
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	2750      	movs	r7, #80	; 0x50
 8007522:	e70c      	b.n	800733e <__gethex+0x12a>
 8007524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f2      	bne.n	8007510 <__gethex+0x2fc>
 800752a:	e7d8      	b.n	80074de <__gethex+0x2ca>
 800752c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1d5      	bne.n	80074de <__gethex+0x2ca>
 8007532:	e7ed      	b.n	8007510 <__gethex+0x2fc>
 8007534:	1e6f      	subs	r7, r5, #1
 8007536:	f1ba 0f00 	cmp.w	sl, #0
 800753a:	d131      	bne.n	80075a0 <__gethex+0x38c>
 800753c:	b127      	cbz	r7, 8007548 <__gethex+0x334>
 800753e:	4639      	mov	r1, r7
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fe95 	bl	8008270 <__any_on>
 8007546:	4682      	mov	sl, r0
 8007548:	117b      	asrs	r3, r7, #5
 800754a:	2101      	movs	r1, #1
 800754c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007550:	f007 071f 	and.w	r7, r7, #31
 8007554:	fa01 f707 	lsl.w	r7, r1, r7
 8007558:	421f      	tst	r7, r3
 800755a:	4629      	mov	r1, r5
 800755c:	4620      	mov	r0, r4
 800755e:	bf18      	it	ne
 8007560:	f04a 0a02 	orrne.w	sl, sl, #2
 8007564:	1b76      	subs	r6, r6, r5
 8007566:	f7ff fdee 	bl	8007146 <rshift>
 800756a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800756e:	2702      	movs	r7, #2
 8007570:	f1ba 0f00 	cmp.w	sl, #0
 8007574:	d048      	beq.n	8007608 <__gethex+0x3f4>
 8007576:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d015      	beq.n	80075aa <__gethex+0x396>
 800757e:	2b03      	cmp	r3, #3
 8007580:	d017      	beq.n	80075b2 <__gethex+0x39e>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d109      	bne.n	800759a <__gethex+0x386>
 8007586:	f01a 0f02 	tst.w	sl, #2
 800758a:	d006      	beq.n	800759a <__gethex+0x386>
 800758c:	f8d9 0000 	ldr.w	r0, [r9]
 8007590:	ea4a 0a00 	orr.w	sl, sl, r0
 8007594:	f01a 0f01 	tst.w	sl, #1
 8007598:	d10e      	bne.n	80075b8 <__gethex+0x3a4>
 800759a:	f047 0710 	orr.w	r7, r7, #16
 800759e:	e033      	b.n	8007608 <__gethex+0x3f4>
 80075a0:	f04f 0a01 	mov.w	sl, #1
 80075a4:	e7d0      	b.n	8007548 <__gethex+0x334>
 80075a6:	2701      	movs	r7, #1
 80075a8:	e7e2      	b.n	8007570 <__gethex+0x35c>
 80075aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075ac:	f1c3 0301 	rsb	r3, r3, #1
 80075b0:	9315      	str	r3, [sp, #84]	; 0x54
 80075b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f0      	beq.n	800759a <__gethex+0x386>
 80075b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80075bc:	f104 0314 	add.w	r3, r4, #20
 80075c0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80075c4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80075c8:	f04f 0c00 	mov.w	ip, #0
 80075cc:	4618      	mov	r0, r3
 80075ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80075d6:	d01c      	beq.n	8007612 <__gethex+0x3fe>
 80075d8:	3201      	adds	r2, #1
 80075da:	6002      	str	r2, [r0, #0]
 80075dc:	2f02      	cmp	r7, #2
 80075de:	f104 0314 	add.w	r3, r4, #20
 80075e2:	d13f      	bne.n	8007664 <__gethex+0x450>
 80075e4:	f8d8 2000 	ldr.w	r2, [r8]
 80075e8:	3a01      	subs	r2, #1
 80075ea:	42b2      	cmp	r2, r6
 80075ec:	d10a      	bne.n	8007604 <__gethex+0x3f0>
 80075ee:	1171      	asrs	r1, r6, #5
 80075f0:	2201      	movs	r2, #1
 80075f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80075f6:	f006 061f 	and.w	r6, r6, #31
 80075fa:	fa02 f606 	lsl.w	r6, r2, r6
 80075fe:	421e      	tst	r6, r3
 8007600:	bf18      	it	ne
 8007602:	4617      	movne	r7, r2
 8007604:	f047 0720 	orr.w	r7, r7, #32
 8007608:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800760a:	601c      	str	r4, [r3, #0]
 800760c:	9b04      	ldr	r3, [sp, #16]
 800760e:	601d      	str	r5, [r3, #0]
 8007610:	e695      	b.n	800733e <__gethex+0x12a>
 8007612:	4299      	cmp	r1, r3
 8007614:	f843 cc04 	str.w	ip, [r3, #-4]
 8007618:	d8d8      	bhi.n	80075cc <__gethex+0x3b8>
 800761a:	68a3      	ldr	r3, [r4, #8]
 800761c:	459b      	cmp	fp, r3
 800761e:	db19      	blt.n	8007654 <__gethex+0x440>
 8007620:	6861      	ldr	r1, [r4, #4]
 8007622:	ee18 0a10 	vmov	r0, s16
 8007626:	3101      	adds	r1, #1
 8007628:	f000 f982 	bl	8007930 <_Balloc>
 800762c:	4681      	mov	r9, r0
 800762e:	b918      	cbnz	r0, 8007638 <__gethex+0x424>
 8007630:	4b1a      	ldr	r3, [pc, #104]	; (800769c <__gethex+0x488>)
 8007632:	4602      	mov	r2, r0
 8007634:	2184      	movs	r1, #132	; 0x84
 8007636:	e6a8      	b.n	800738a <__gethex+0x176>
 8007638:	6922      	ldr	r2, [r4, #16]
 800763a:	3202      	adds	r2, #2
 800763c:	f104 010c 	add.w	r1, r4, #12
 8007640:	0092      	lsls	r2, r2, #2
 8007642:	300c      	adds	r0, #12
 8007644:	f7fd ff62 	bl	800550c <memcpy>
 8007648:	4621      	mov	r1, r4
 800764a:	ee18 0a10 	vmov	r0, s16
 800764e:	f000 f9af 	bl	80079b0 <_Bfree>
 8007652:	464c      	mov	r4, r9
 8007654:	6923      	ldr	r3, [r4, #16]
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800765c:	6122      	str	r2, [r4, #16]
 800765e:	2201      	movs	r2, #1
 8007660:	615a      	str	r2, [r3, #20]
 8007662:	e7bb      	b.n	80075dc <__gethex+0x3c8>
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	455a      	cmp	r2, fp
 8007668:	dd0b      	ble.n	8007682 <__gethex+0x46e>
 800766a:	2101      	movs	r1, #1
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff fd6a 	bl	8007146 <rshift>
 8007672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007676:	3501      	adds	r5, #1
 8007678:	42ab      	cmp	r3, r5
 800767a:	f6ff aed0 	blt.w	800741e <__gethex+0x20a>
 800767e:	2701      	movs	r7, #1
 8007680:	e7c0      	b.n	8007604 <__gethex+0x3f0>
 8007682:	f016 061f 	ands.w	r6, r6, #31
 8007686:	d0fa      	beq.n	800767e <__gethex+0x46a>
 8007688:	4453      	add	r3, sl
 800768a:	f1c6 0620 	rsb	r6, r6, #32
 800768e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007692:	f000 fa3f 	bl	8007b14 <__hi0bits>
 8007696:	42b0      	cmp	r0, r6
 8007698:	dbe7      	blt.n	800766a <__gethex+0x456>
 800769a:	e7f0      	b.n	800767e <__gethex+0x46a>
 800769c:	08008a8c 	.word	0x08008a8c

080076a0 <L_shift>:
 80076a0:	f1c2 0208 	rsb	r2, r2, #8
 80076a4:	0092      	lsls	r2, r2, #2
 80076a6:	b570      	push	{r4, r5, r6, lr}
 80076a8:	f1c2 0620 	rsb	r6, r2, #32
 80076ac:	6843      	ldr	r3, [r0, #4]
 80076ae:	6804      	ldr	r4, [r0, #0]
 80076b0:	fa03 f506 	lsl.w	r5, r3, r6
 80076b4:	432c      	orrs	r4, r5
 80076b6:	40d3      	lsrs	r3, r2
 80076b8:	6004      	str	r4, [r0, #0]
 80076ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80076be:	4288      	cmp	r0, r1
 80076c0:	d3f4      	bcc.n	80076ac <L_shift+0xc>
 80076c2:	bd70      	pop	{r4, r5, r6, pc}

080076c4 <__match>:
 80076c4:	b530      	push	{r4, r5, lr}
 80076c6:	6803      	ldr	r3, [r0, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ce:	b914      	cbnz	r4, 80076d6 <__match+0x12>
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	2001      	movs	r0, #1
 80076d4:	bd30      	pop	{r4, r5, pc}
 80076d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80076de:	2d19      	cmp	r5, #25
 80076e0:	bf98      	it	ls
 80076e2:	3220      	addls	r2, #32
 80076e4:	42a2      	cmp	r2, r4
 80076e6:	d0f0      	beq.n	80076ca <__match+0x6>
 80076e8:	2000      	movs	r0, #0
 80076ea:	e7f3      	b.n	80076d4 <__match+0x10>

080076ec <__hexnan>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	680b      	ldr	r3, [r1, #0]
 80076f2:	115e      	asrs	r6, r3, #5
 80076f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80076f8:	f013 031f 	ands.w	r3, r3, #31
 80076fc:	b087      	sub	sp, #28
 80076fe:	bf18      	it	ne
 8007700:	3604      	addne	r6, #4
 8007702:	2500      	movs	r5, #0
 8007704:	1f37      	subs	r7, r6, #4
 8007706:	4690      	mov	r8, r2
 8007708:	6802      	ldr	r2, [r0, #0]
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	4682      	mov	sl, r0
 800770e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007712:	46b9      	mov	r9, r7
 8007714:	463c      	mov	r4, r7
 8007716:	9502      	str	r5, [sp, #8]
 8007718:	46ab      	mov	fp, r5
 800771a:	7851      	ldrb	r1, [r2, #1]
 800771c:	1c53      	adds	r3, r2, #1
 800771e:	9303      	str	r3, [sp, #12]
 8007720:	b341      	cbz	r1, 8007774 <__hexnan+0x88>
 8007722:	4608      	mov	r0, r1
 8007724:	9205      	str	r2, [sp, #20]
 8007726:	9104      	str	r1, [sp, #16]
 8007728:	f7ff fd5f 	bl	80071ea <__hexdig_fun>
 800772c:	2800      	cmp	r0, #0
 800772e:	d14f      	bne.n	80077d0 <__hexnan+0xe4>
 8007730:	9904      	ldr	r1, [sp, #16]
 8007732:	9a05      	ldr	r2, [sp, #20]
 8007734:	2920      	cmp	r1, #32
 8007736:	d818      	bhi.n	800776a <__hexnan+0x7e>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	459b      	cmp	fp, r3
 800773c:	dd13      	ble.n	8007766 <__hexnan+0x7a>
 800773e:	454c      	cmp	r4, r9
 8007740:	d206      	bcs.n	8007750 <__hexnan+0x64>
 8007742:	2d07      	cmp	r5, #7
 8007744:	dc04      	bgt.n	8007750 <__hexnan+0x64>
 8007746:	462a      	mov	r2, r5
 8007748:	4649      	mov	r1, r9
 800774a:	4620      	mov	r0, r4
 800774c:	f7ff ffa8 	bl	80076a0 <L_shift>
 8007750:	4544      	cmp	r4, r8
 8007752:	d950      	bls.n	80077f6 <__hexnan+0x10a>
 8007754:	2300      	movs	r3, #0
 8007756:	f1a4 0904 	sub.w	r9, r4, #4
 800775a:	f844 3c04 	str.w	r3, [r4, #-4]
 800775e:	f8cd b008 	str.w	fp, [sp, #8]
 8007762:	464c      	mov	r4, r9
 8007764:	461d      	mov	r5, r3
 8007766:	9a03      	ldr	r2, [sp, #12]
 8007768:	e7d7      	b.n	800771a <__hexnan+0x2e>
 800776a:	2929      	cmp	r1, #41	; 0x29
 800776c:	d156      	bne.n	800781c <__hexnan+0x130>
 800776e:	3202      	adds	r2, #2
 8007770:	f8ca 2000 	str.w	r2, [sl]
 8007774:	f1bb 0f00 	cmp.w	fp, #0
 8007778:	d050      	beq.n	800781c <__hexnan+0x130>
 800777a:	454c      	cmp	r4, r9
 800777c:	d206      	bcs.n	800778c <__hexnan+0xa0>
 800777e:	2d07      	cmp	r5, #7
 8007780:	dc04      	bgt.n	800778c <__hexnan+0xa0>
 8007782:	462a      	mov	r2, r5
 8007784:	4649      	mov	r1, r9
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff ff8a 	bl	80076a0 <L_shift>
 800778c:	4544      	cmp	r4, r8
 800778e:	d934      	bls.n	80077fa <__hexnan+0x10e>
 8007790:	f1a8 0204 	sub.w	r2, r8, #4
 8007794:	4623      	mov	r3, r4
 8007796:	f853 1b04 	ldr.w	r1, [r3], #4
 800779a:	f842 1f04 	str.w	r1, [r2, #4]!
 800779e:	429f      	cmp	r7, r3
 80077a0:	d2f9      	bcs.n	8007796 <__hexnan+0xaa>
 80077a2:	1b3b      	subs	r3, r7, r4
 80077a4:	f023 0303 	bic.w	r3, r3, #3
 80077a8:	3304      	adds	r3, #4
 80077aa:	3401      	adds	r4, #1
 80077ac:	3e03      	subs	r6, #3
 80077ae:	42b4      	cmp	r4, r6
 80077b0:	bf88      	it	hi
 80077b2:	2304      	movhi	r3, #4
 80077b4:	4443      	add	r3, r8
 80077b6:	2200      	movs	r2, #0
 80077b8:	f843 2b04 	str.w	r2, [r3], #4
 80077bc:	429f      	cmp	r7, r3
 80077be:	d2fb      	bcs.n	80077b8 <__hexnan+0xcc>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	b91b      	cbnz	r3, 80077cc <__hexnan+0xe0>
 80077c4:	4547      	cmp	r7, r8
 80077c6:	d127      	bne.n	8007818 <__hexnan+0x12c>
 80077c8:	2301      	movs	r3, #1
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	2005      	movs	r0, #5
 80077ce:	e026      	b.n	800781e <__hexnan+0x132>
 80077d0:	3501      	adds	r5, #1
 80077d2:	2d08      	cmp	r5, #8
 80077d4:	f10b 0b01 	add.w	fp, fp, #1
 80077d8:	dd06      	ble.n	80077e8 <__hexnan+0xfc>
 80077da:	4544      	cmp	r4, r8
 80077dc:	d9c3      	bls.n	8007766 <__hexnan+0x7a>
 80077de:	2300      	movs	r3, #0
 80077e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80077e4:	2501      	movs	r5, #1
 80077e6:	3c04      	subs	r4, #4
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	f000 000f 	and.w	r0, r0, #15
 80077ee:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80077f2:	6022      	str	r2, [r4, #0]
 80077f4:	e7b7      	b.n	8007766 <__hexnan+0x7a>
 80077f6:	2508      	movs	r5, #8
 80077f8:	e7b5      	b.n	8007766 <__hexnan+0x7a>
 80077fa:	9b01      	ldr	r3, [sp, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0df      	beq.n	80077c0 <__hexnan+0xd4>
 8007800:	f04f 32ff 	mov.w	r2, #4294967295
 8007804:	f1c3 0320 	rsb	r3, r3, #32
 8007808:	fa22 f303 	lsr.w	r3, r2, r3
 800780c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007810:	401a      	ands	r2, r3
 8007812:	f846 2c04 	str.w	r2, [r6, #-4]
 8007816:	e7d3      	b.n	80077c0 <__hexnan+0xd4>
 8007818:	3f04      	subs	r7, #4
 800781a:	e7d1      	b.n	80077c0 <__hexnan+0xd4>
 800781c:	2004      	movs	r0, #4
 800781e:	b007      	add	sp, #28
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007824 <__retarget_lock_init_recursive>:
 8007824:	4770      	bx	lr

08007826 <__retarget_lock_acquire_recursive>:
 8007826:	4770      	bx	lr

08007828 <__retarget_lock_release_recursive>:
 8007828:	4770      	bx	lr

0800782a <__swhatbuf_r>:
 800782a:	b570      	push	{r4, r5, r6, lr}
 800782c:	460e      	mov	r6, r1
 800782e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007832:	2900      	cmp	r1, #0
 8007834:	b096      	sub	sp, #88	; 0x58
 8007836:	4614      	mov	r4, r2
 8007838:	461d      	mov	r5, r3
 800783a:	da08      	bge.n	800784e <__swhatbuf_r+0x24>
 800783c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	602a      	str	r2, [r5, #0]
 8007844:	061a      	lsls	r2, r3, #24
 8007846:	d410      	bmi.n	800786a <__swhatbuf_r+0x40>
 8007848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784c:	e00e      	b.n	800786c <__swhatbuf_r+0x42>
 800784e:	466a      	mov	r2, sp
 8007850:	f000 fdf0 	bl	8008434 <_fstat_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	dbf1      	blt.n	800783c <__swhatbuf_r+0x12>
 8007858:	9a01      	ldr	r2, [sp, #4]
 800785a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800785e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007862:	425a      	negs	r2, r3
 8007864:	415a      	adcs	r2, r3
 8007866:	602a      	str	r2, [r5, #0]
 8007868:	e7ee      	b.n	8007848 <__swhatbuf_r+0x1e>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	2000      	movs	r0, #0
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	b016      	add	sp, #88	; 0x58
 8007872:	bd70      	pop	{r4, r5, r6, pc}

08007874 <__smakebuf_r>:
 8007874:	898b      	ldrh	r3, [r1, #12]
 8007876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007878:	079d      	lsls	r5, r3, #30
 800787a:	4606      	mov	r6, r0
 800787c:	460c      	mov	r4, r1
 800787e:	d507      	bpl.n	8007890 <__smakebuf_r+0x1c>
 8007880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	2301      	movs	r3, #1
 800788a:	6163      	str	r3, [r4, #20]
 800788c:	b002      	add	sp, #8
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	ab01      	add	r3, sp, #4
 8007892:	466a      	mov	r2, sp
 8007894:	f7ff ffc9 	bl	800782a <__swhatbuf_r>
 8007898:	9900      	ldr	r1, [sp, #0]
 800789a:	4605      	mov	r5, r0
 800789c:	4630      	mov	r0, r6
 800789e:	f7fd fecd 	bl	800563c <_malloc_r>
 80078a2:	b948      	cbnz	r0, 80078b8 <__smakebuf_r+0x44>
 80078a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d4ef      	bmi.n	800788c <__smakebuf_r+0x18>
 80078ac:	f023 0303 	bic.w	r3, r3, #3
 80078b0:	f043 0302 	orr.w	r3, r3, #2
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	e7e3      	b.n	8007880 <__smakebuf_r+0xc>
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <__smakebuf_r+0x7c>)
 80078ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	6163      	str	r3, [r4, #20]
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	6120      	str	r0, [r4, #16]
 80078ce:	b15b      	cbz	r3, 80078e8 <__smakebuf_r+0x74>
 80078d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 fdbf 	bl	8008458 <_isatty_r>
 80078da:	b128      	cbz	r0, 80078e8 <__smakebuf_r+0x74>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f023 0303 	bic.w	r3, r3, #3
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	89a0      	ldrh	r0, [r4, #12]
 80078ea:	4305      	orrs	r5, r0
 80078ec:	81a5      	strh	r5, [r4, #12]
 80078ee:	e7cd      	b.n	800788c <__smakebuf_r+0x18>
 80078f0:	08006fa5 	.word	0x08006fa5

080078f4 <__ascii_mbtowc>:
 80078f4:	b082      	sub	sp, #8
 80078f6:	b901      	cbnz	r1, 80078fa <__ascii_mbtowc+0x6>
 80078f8:	a901      	add	r1, sp, #4
 80078fa:	b142      	cbz	r2, 800790e <__ascii_mbtowc+0x1a>
 80078fc:	b14b      	cbz	r3, 8007912 <__ascii_mbtowc+0x1e>
 80078fe:	7813      	ldrb	r3, [r2, #0]
 8007900:	600b      	str	r3, [r1, #0]
 8007902:	7812      	ldrb	r2, [r2, #0]
 8007904:	1e10      	subs	r0, r2, #0
 8007906:	bf18      	it	ne
 8007908:	2001      	movne	r0, #1
 800790a:	b002      	add	sp, #8
 800790c:	4770      	bx	lr
 800790e:	4610      	mov	r0, r2
 8007910:	e7fb      	b.n	800790a <__ascii_mbtowc+0x16>
 8007912:	f06f 0001 	mvn.w	r0, #1
 8007916:	e7f8      	b.n	800790a <__ascii_mbtowc+0x16>

08007918 <__malloc_lock>:
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <__malloc_lock+0x8>)
 800791a:	f7ff bf84 	b.w	8007826 <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	20000580 	.word	0x20000580

08007924 <__malloc_unlock>:
 8007924:	4801      	ldr	r0, [pc, #4]	; (800792c <__malloc_unlock+0x8>)
 8007926:	f7ff bf7f 	b.w	8007828 <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	20000580 	.word	0x20000580

08007930 <_Balloc>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007934:	4604      	mov	r4, r0
 8007936:	460d      	mov	r5, r1
 8007938:	b976      	cbnz	r6, 8007958 <_Balloc+0x28>
 800793a:	2010      	movs	r0, #16
 800793c:	f7fd fdc6 	bl	80054cc <malloc>
 8007940:	4602      	mov	r2, r0
 8007942:	6260      	str	r0, [r4, #36]	; 0x24
 8007944:	b920      	cbnz	r0, 8007950 <_Balloc+0x20>
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <_Balloc+0x78>)
 8007948:	4818      	ldr	r0, [pc, #96]	; (80079ac <_Balloc+0x7c>)
 800794a:	2166      	movs	r1, #102	; 0x66
 800794c:	f7fd fd5c 	bl	8005408 <__assert_func>
 8007950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007954:	6006      	str	r6, [r0, #0]
 8007956:	60c6      	str	r6, [r0, #12]
 8007958:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800795a:	68f3      	ldr	r3, [r6, #12]
 800795c:	b183      	cbz	r3, 8007980 <_Balloc+0x50>
 800795e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007966:	b9b8      	cbnz	r0, 8007998 <_Balloc+0x68>
 8007968:	2101      	movs	r1, #1
 800796a:	fa01 f605 	lsl.w	r6, r1, r5
 800796e:	1d72      	adds	r2, r6, #5
 8007970:	0092      	lsls	r2, r2, #2
 8007972:	4620      	mov	r0, r4
 8007974:	f7fd fde0 	bl	8005538 <_calloc_r>
 8007978:	b160      	cbz	r0, 8007994 <_Balloc+0x64>
 800797a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800797e:	e00e      	b.n	800799e <_Balloc+0x6e>
 8007980:	2221      	movs	r2, #33	; 0x21
 8007982:	2104      	movs	r1, #4
 8007984:	4620      	mov	r0, r4
 8007986:	f7fd fdd7 	bl	8005538 <_calloc_r>
 800798a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798c:	60f0      	str	r0, [r6, #12]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1e4      	bne.n	800795e <_Balloc+0x2e>
 8007994:	2000      	movs	r0, #0
 8007996:	bd70      	pop	{r4, r5, r6, pc}
 8007998:	6802      	ldr	r2, [r0, #0]
 800799a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800799e:	2300      	movs	r3, #0
 80079a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079a4:	e7f7      	b.n	8007996 <_Balloc+0x66>
 80079a6:	bf00      	nop
 80079a8:	08008b18 	.word	0x08008b18
 80079ac:	08008b2f 	.word	0x08008b2f

080079b0 <_Bfree>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	b976      	cbnz	r6, 80079d8 <_Bfree+0x28>
 80079ba:	2010      	movs	r0, #16
 80079bc:	f7fd fd86 	bl	80054cc <malloc>
 80079c0:	4602      	mov	r2, r0
 80079c2:	6268      	str	r0, [r5, #36]	; 0x24
 80079c4:	b920      	cbnz	r0, 80079d0 <_Bfree+0x20>
 80079c6:	4b09      	ldr	r3, [pc, #36]	; (80079ec <_Bfree+0x3c>)
 80079c8:	4809      	ldr	r0, [pc, #36]	; (80079f0 <_Bfree+0x40>)
 80079ca:	218a      	movs	r1, #138	; 0x8a
 80079cc:	f7fd fd1c 	bl	8005408 <__assert_func>
 80079d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d4:	6006      	str	r6, [r0, #0]
 80079d6:	60c6      	str	r6, [r0, #12]
 80079d8:	b13c      	cbz	r4, 80079ea <_Bfree+0x3a>
 80079da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80079dc:	6862      	ldr	r2, [r4, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80079e4:	6021      	str	r1, [r4, #0]
 80079e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	08008b18 	.word	0x08008b18
 80079f0:	08008b2f 	.word	0x08008b2f

080079f4 <__multadd>:
 80079f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f8:	690d      	ldr	r5, [r1, #16]
 80079fa:	4607      	mov	r7, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	461e      	mov	r6, r3
 8007a00:	f101 0c14 	add.w	ip, r1, #20
 8007a04:	2000      	movs	r0, #0
 8007a06:	f8dc 3000 	ldr.w	r3, [ip]
 8007a0a:	b299      	uxth	r1, r3
 8007a0c:	fb02 6101 	mla	r1, r2, r1, r6
 8007a10:	0c1e      	lsrs	r6, r3, #16
 8007a12:	0c0b      	lsrs	r3, r1, #16
 8007a14:	fb02 3306 	mla	r3, r2, r6, r3
 8007a18:	b289      	uxth	r1, r1
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a20:	4285      	cmp	r5, r0
 8007a22:	f84c 1b04 	str.w	r1, [ip], #4
 8007a26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a2a:	dcec      	bgt.n	8007a06 <__multadd+0x12>
 8007a2c:	b30e      	cbz	r6, 8007a72 <__multadd+0x7e>
 8007a2e:	68a3      	ldr	r3, [r4, #8]
 8007a30:	42ab      	cmp	r3, r5
 8007a32:	dc19      	bgt.n	8007a68 <__multadd+0x74>
 8007a34:	6861      	ldr	r1, [r4, #4]
 8007a36:	4638      	mov	r0, r7
 8007a38:	3101      	adds	r1, #1
 8007a3a:	f7ff ff79 	bl	8007930 <_Balloc>
 8007a3e:	4680      	mov	r8, r0
 8007a40:	b928      	cbnz	r0, 8007a4e <__multadd+0x5a>
 8007a42:	4602      	mov	r2, r0
 8007a44:	4b0c      	ldr	r3, [pc, #48]	; (8007a78 <__multadd+0x84>)
 8007a46:	480d      	ldr	r0, [pc, #52]	; (8007a7c <__multadd+0x88>)
 8007a48:	21b5      	movs	r1, #181	; 0xb5
 8007a4a:	f7fd fcdd 	bl	8005408 <__assert_func>
 8007a4e:	6922      	ldr	r2, [r4, #16]
 8007a50:	3202      	adds	r2, #2
 8007a52:	f104 010c 	add.w	r1, r4, #12
 8007a56:	0092      	lsls	r2, r2, #2
 8007a58:	300c      	adds	r0, #12
 8007a5a:	f7fd fd57 	bl	800550c <memcpy>
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4638      	mov	r0, r7
 8007a62:	f7ff ffa5 	bl	80079b0 <_Bfree>
 8007a66:	4644      	mov	r4, r8
 8007a68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	615e      	str	r6, [r3, #20]
 8007a70:	6125      	str	r5, [r4, #16]
 8007a72:	4620      	mov	r0, r4
 8007a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a78:	08008a8c 	.word	0x08008a8c
 8007a7c:	08008b2f 	.word	0x08008b2f

08007a80 <__s2b>:
 8007a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a84:	460c      	mov	r4, r1
 8007a86:	4615      	mov	r5, r2
 8007a88:	461f      	mov	r7, r3
 8007a8a:	2209      	movs	r2, #9
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	4606      	mov	r6, r0
 8007a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a94:	2100      	movs	r1, #0
 8007a96:	2201      	movs	r2, #1
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	db09      	blt.n	8007ab0 <__s2b+0x30>
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7ff ff47 	bl	8007930 <_Balloc>
 8007aa2:	b940      	cbnz	r0, 8007ab6 <__s2b+0x36>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <__s2b+0x8c>)
 8007aa8:	4819      	ldr	r0, [pc, #100]	; (8007b10 <__s2b+0x90>)
 8007aaa:	21ce      	movs	r1, #206	; 0xce
 8007aac:	f7fd fcac 	bl	8005408 <__assert_func>
 8007ab0:	0052      	lsls	r2, r2, #1
 8007ab2:	3101      	adds	r1, #1
 8007ab4:	e7f0      	b.n	8007a98 <__s2b+0x18>
 8007ab6:	9b08      	ldr	r3, [sp, #32]
 8007ab8:	6143      	str	r3, [r0, #20]
 8007aba:	2d09      	cmp	r5, #9
 8007abc:	f04f 0301 	mov.w	r3, #1
 8007ac0:	6103      	str	r3, [r0, #16]
 8007ac2:	dd16      	ble.n	8007af2 <__s2b+0x72>
 8007ac4:	f104 0909 	add.w	r9, r4, #9
 8007ac8:	46c8      	mov	r8, r9
 8007aca:	442c      	add	r4, r5
 8007acc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ad0:	4601      	mov	r1, r0
 8007ad2:	3b30      	subs	r3, #48	; 0x30
 8007ad4:	220a      	movs	r2, #10
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7ff ff8c 	bl	80079f4 <__multadd>
 8007adc:	45a0      	cmp	r8, r4
 8007ade:	d1f5      	bne.n	8007acc <__s2b+0x4c>
 8007ae0:	f1a5 0408 	sub.w	r4, r5, #8
 8007ae4:	444c      	add	r4, r9
 8007ae6:	1b2d      	subs	r5, r5, r4
 8007ae8:	1963      	adds	r3, r4, r5
 8007aea:	42bb      	cmp	r3, r7
 8007aec:	db04      	blt.n	8007af8 <__s2b+0x78>
 8007aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af2:	340a      	adds	r4, #10
 8007af4:	2509      	movs	r5, #9
 8007af6:	e7f6      	b.n	8007ae6 <__s2b+0x66>
 8007af8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007afc:	4601      	mov	r1, r0
 8007afe:	3b30      	subs	r3, #48	; 0x30
 8007b00:	220a      	movs	r2, #10
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7ff ff76 	bl	80079f4 <__multadd>
 8007b08:	e7ee      	b.n	8007ae8 <__s2b+0x68>
 8007b0a:	bf00      	nop
 8007b0c:	08008a8c 	.word	0x08008a8c
 8007b10:	08008b2f 	.word	0x08008b2f

08007b14 <__hi0bits>:
 8007b14:	0c03      	lsrs	r3, r0, #16
 8007b16:	041b      	lsls	r3, r3, #16
 8007b18:	b9d3      	cbnz	r3, 8007b50 <__hi0bits+0x3c>
 8007b1a:	0400      	lsls	r0, r0, #16
 8007b1c:	2310      	movs	r3, #16
 8007b1e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b22:	bf04      	itt	eq
 8007b24:	0200      	lsleq	r0, r0, #8
 8007b26:	3308      	addeq	r3, #8
 8007b28:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b2c:	bf04      	itt	eq
 8007b2e:	0100      	lsleq	r0, r0, #4
 8007b30:	3304      	addeq	r3, #4
 8007b32:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007b36:	bf04      	itt	eq
 8007b38:	0080      	lsleq	r0, r0, #2
 8007b3a:	3302      	addeq	r3, #2
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	db05      	blt.n	8007b4c <__hi0bits+0x38>
 8007b40:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b44:	f103 0301 	add.w	r3, r3, #1
 8007b48:	bf08      	it	eq
 8007b4a:	2320      	moveq	r3, #32
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	4770      	bx	lr
 8007b50:	2300      	movs	r3, #0
 8007b52:	e7e4      	b.n	8007b1e <__hi0bits+0xa>

08007b54 <__lo0bits>:
 8007b54:	6803      	ldr	r3, [r0, #0]
 8007b56:	f013 0207 	ands.w	r2, r3, #7
 8007b5a:	4601      	mov	r1, r0
 8007b5c:	d00b      	beq.n	8007b76 <__lo0bits+0x22>
 8007b5e:	07da      	lsls	r2, r3, #31
 8007b60:	d423      	bmi.n	8007baa <__lo0bits+0x56>
 8007b62:	0798      	lsls	r0, r3, #30
 8007b64:	bf49      	itett	mi
 8007b66:	085b      	lsrmi	r3, r3, #1
 8007b68:	089b      	lsrpl	r3, r3, #2
 8007b6a:	2001      	movmi	r0, #1
 8007b6c:	600b      	strmi	r3, [r1, #0]
 8007b6e:	bf5c      	itt	pl
 8007b70:	600b      	strpl	r3, [r1, #0]
 8007b72:	2002      	movpl	r0, #2
 8007b74:	4770      	bx	lr
 8007b76:	b298      	uxth	r0, r3
 8007b78:	b9a8      	cbnz	r0, 8007ba6 <__lo0bits+0x52>
 8007b7a:	0c1b      	lsrs	r3, r3, #16
 8007b7c:	2010      	movs	r0, #16
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	b90a      	cbnz	r2, 8007b86 <__lo0bits+0x32>
 8007b82:	3008      	adds	r0, #8
 8007b84:	0a1b      	lsrs	r3, r3, #8
 8007b86:	071a      	lsls	r2, r3, #28
 8007b88:	bf04      	itt	eq
 8007b8a:	091b      	lsreq	r3, r3, #4
 8007b8c:	3004      	addeq	r0, #4
 8007b8e:	079a      	lsls	r2, r3, #30
 8007b90:	bf04      	itt	eq
 8007b92:	089b      	lsreq	r3, r3, #2
 8007b94:	3002      	addeq	r0, #2
 8007b96:	07da      	lsls	r2, r3, #31
 8007b98:	d403      	bmi.n	8007ba2 <__lo0bits+0x4e>
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	f100 0001 	add.w	r0, r0, #1
 8007ba0:	d005      	beq.n	8007bae <__lo0bits+0x5a>
 8007ba2:	600b      	str	r3, [r1, #0]
 8007ba4:	4770      	bx	lr
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	e7e9      	b.n	8007b7e <__lo0bits+0x2a>
 8007baa:	2000      	movs	r0, #0
 8007bac:	4770      	bx	lr
 8007bae:	2020      	movs	r0, #32
 8007bb0:	4770      	bx	lr
	...

08007bb4 <__i2b>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	2101      	movs	r1, #1
 8007bba:	f7ff feb9 	bl	8007930 <_Balloc>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	b928      	cbnz	r0, 8007bce <__i2b+0x1a>
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <__i2b+0x24>)
 8007bc4:	4805      	ldr	r0, [pc, #20]	; (8007bdc <__i2b+0x28>)
 8007bc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007bca:	f7fd fc1d 	bl	8005408 <__assert_func>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	6144      	str	r4, [r0, #20]
 8007bd2:	6103      	str	r3, [r0, #16]
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08008a8c 	.word	0x08008a8c
 8007bdc:	08008b2f 	.word	0x08008b2f

08007be0 <__multiply>:
 8007be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be4:	4691      	mov	r9, r2
 8007be6:	690a      	ldr	r2, [r1, #16]
 8007be8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	bfb8      	it	lt
 8007bf0:	460b      	movlt	r3, r1
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	bfbc      	itt	lt
 8007bf6:	464c      	movlt	r4, r9
 8007bf8:	4699      	movlt	r9, r3
 8007bfa:	6927      	ldr	r7, [r4, #16]
 8007bfc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c00:	68a3      	ldr	r3, [r4, #8]
 8007c02:	6861      	ldr	r1, [r4, #4]
 8007c04:	eb07 060a 	add.w	r6, r7, sl
 8007c08:	42b3      	cmp	r3, r6
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	bfb8      	it	lt
 8007c0e:	3101      	addlt	r1, #1
 8007c10:	f7ff fe8e 	bl	8007930 <_Balloc>
 8007c14:	b930      	cbnz	r0, 8007c24 <__multiply+0x44>
 8007c16:	4602      	mov	r2, r0
 8007c18:	4b44      	ldr	r3, [pc, #272]	; (8007d2c <__multiply+0x14c>)
 8007c1a:	4845      	ldr	r0, [pc, #276]	; (8007d30 <__multiply+0x150>)
 8007c1c:	f240 115d 	movw	r1, #349	; 0x15d
 8007c20:	f7fd fbf2 	bl	8005408 <__assert_func>
 8007c24:	f100 0514 	add.w	r5, r0, #20
 8007c28:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c2c:	462b      	mov	r3, r5
 8007c2e:	2200      	movs	r2, #0
 8007c30:	4543      	cmp	r3, r8
 8007c32:	d321      	bcc.n	8007c78 <__multiply+0x98>
 8007c34:	f104 0314 	add.w	r3, r4, #20
 8007c38:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c3c:	f109 0314 	add.w	r3, r9, #20
 8007c40:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c44:	9202      	str	r2, [sp, #8]
 8007c46:	1b3a      	subs	r2, r7, r4
 8007c48:	3a15      	subs	r2, #21
 8007c4a:	f022 0203 	bic.w	r2, r2, #3
 8007c4e:	3204      	adds	r2, #4
 8007c50:	f104 0115 	add.w	r1, r4, #21
 8007c54:	428f      	cmp	r7, r1
 8007c56:	bf38      	it	cc
 8007c58:	2204      	movcc	r2, #4
 8007c5a:	9201      	str	r2, [sp, #4]
 8007c5c:	9a02      	ldr	r2, [sp, #8]
 8007c5e:	9303      	str	r3, [sp, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d80c      	bhi.n	8007c7e <__multiply+0x9e>
 8007c64:	2e00      	cmp	r6, #0
 8007c66:	dd03      	ble.n	8007c70 <__multiply+0x90>
 8007c68:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05a      	beq.n	8007d26 <__multiply+0x146>
 8007c70:	6106      	str	r6, [r0, #16]
 8007c72:	b005      	add	sp, #20
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	f843 2b04 	str.w	r2, [r3], #4
 8007c7c:	e7d8      	b.n	8007c30 <__multiply+0x50>
 8007c7e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c82:	f1ba 0f00 	cmp.w	sl, #0
 8007c86:	d024      	beq.n	8007cd2 <__multiply+0xf2>
 8007c88:	f104 0e14 	add.w	lr, r4, #20
 8007c8c:	46a9      	mov	r9, r5
 8007c8e:	f04f 0c00 	mov.w	ip, #0
 8007c92:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c96:	f8d9 1000 	ldr.w	r1, [r9]
 8007c9a:	fa1f fb82 	uxth.w	fp, r2
 8007c9e:	b289      	uxth	r1, r1
 8007ca0:	fb0a 110b 	mla	r1, sl, fp, r1
 8007ca4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8007cac:	4461      	add	r1, ip
 8007cae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cb2:	fb0a c20b 	mla	r2, sl, fp, ip
 8007cb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007cba:	b289      	uxth	r1, r1
 8007cbc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cc0:	4577      	cmp	r7, lr
 8007cc2:	f849 1b04 	str.w	r1, [r9], #4
 8007cc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007cca:	d8e2      	bhi.n	8007c92 <__multiply+0xb2>
 8007ccc:	9a01      	ldr	r2, [sp, #4]
 8007cce:	f845 c002 	str.w	ip, [r5, r2]
 8007cd2:	9a03      	ldr	r2, [sp, #12]
 8007cd4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	f1b9 0f00 	cmp.w	r9, #0
 8007cde:	d020      	beq.n	8007d22 <__multiply+0x142>
 8007ce0:	6829      	ldr	r1, [r5, #0]
 8007ce2:	f104 0c14 	add.w	ip, r4, #20
 8007ce6:	46ae      	mov	lr, r5
 8007ce8:	f04f 0a00 	mov.w	sl, #0
 8007cec:	f8bc b000 	ldrh.w	fp, [ip]
 8007cf0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007cf4:	fb09 220b 	mla	r2, r9, fp, r2
 8007cf8:	4492      	add	sl, r2
 8007cfa:	b289      	uxth	r1, r1
 8007cfc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d00:	f84e 1b04 	str.w	r1, [lr], #4
 8007d04:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d08:	f8be 1000 	ldrh.w	r1, [lr]
 8007d0c:	0c12      	lsrs	r2, r2, #16
 8007d0e:	fb09 1102 	mla	r1, r9, r2, r1
 8007d12:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d16:	4567      	cmp	r7, ip
 8007d18:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d1c:	d8e6      	bhi.n	8007cec <__multiply+0x10c>
 8007d1e:	9a01      	ldr	r2, [sp, #4]
 8007d20:	50a9      	str	r1, [r5, r2]
 8007d22:	3504      	adds	r5, #4
 8007d24:	e79a      	b.n	8007c5c <__multiply+0x7c>
 8007d26:	3e01      	subs	r6, #1
 8007d28:	e79c      	b.n	8007c64 <__multiply+0x84>
 8007d2a:	bf00      	nop
 8007d2c:	08008a8c 	.word	0x08008a8c
 8007d30:	08008b2f 	.word	0x08008b2f

08007d34 <__pow5mult>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	4615      	mov	r5, r2
 8007d3a:	f012 0203 	ands.w	r2, r2, #3
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460f      	mov	r7, r1
 8007d42:	d007      	beq.n	8007d54 <__pow5mult+0x20>
 8007d44:	4c25      	ldr	r4, [pc, #148]	; (8007ddc <__pow5mult+0xa8>)
 8007d46:	3a01      	subs	r2, #1
 8007d48:	2300      	movs	r3, #0
 8007d4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d4e:	f7ff fe51 	bl	80079f4 <__multadd>
 8007d52:	4607      	mov	r7, r0
 8007d54:	10ad      	asrs	r5, r5, #2
 8007d56:	d03d      	beq.n	8007dd4 <__pow5mult+0xa0>
 8007d58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007d5a:	b97c      	cbnz	r4, 8007d7c <__pow5mult+0x48>
 8007d5c:	2010      	movs	r0, #16
 8007d5e:	f7fd fbb5 	bl	80054cc <malloc>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6270      	str	r0, [r6, #36]	; 0x24
 8007d66:	b928      	cbnz	r0, 8007d74 <__pow5mult+0x40>
 8007d68:	4b1d      	ldr	r3, [pc, #116]	; (8007de0 <__pow5mult+0xac>)
 8007d6a:	481e      	ldr	r0, [pc, #120]	; (8007de4 <__pow5mult+0xb0>)
 8007d6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007d70:	f7fd fb4a 	bl	8005408 <__assert_func>
 8007d74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d78:	6004      	str	r4, [r0, #0]
 8007d7a:	60c4      	str	r4, [r0, #12]
 8007d7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d84:	b94c      	cbnz	r4, 8007d9a <__pow5mult+0x66>
 8007d86:	f240 2171 	movw	r1, #625	; 0x271
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff ff12 	bl	8007bb4 <__i2b>
 8007d90:	2300      	movs	r3, #0
 8007d92:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d96:	4604      	mov	r4, r0
 8007d98:	6003      	str	r3, [r0, #0]
 8007d9a:	f04f 0900 	mov.w	r9, #0
 8007d9e:	07eb      	lsls	r3, r5, #31
 8007da0:	d50a      	bpl.n	8007db8 <__pow5mult+0x84>
 8007da2:	4639      	mov	r1, r7
 8007da4:	4622      	mov	r2, r4
 8007da6:	4630      	mov	r0, r6
 8007da8:	f7ff ff1a 	bl	8007be0 <__multiply>
 8007dac:	4639      	mov	r1, r7
 8007dae:	4680      	mov	r8, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff fdfd 	bl	80079b0 <_Bfree>
 8007db6:	4647      	mov	r7, r8
 8007db8:	106d      	asrs	r5, r5, #1
 8007dba:	d00b      	beq.n	8007dd4 <__pow5mult+0xa0>
 8007dbc:	6820      	ldr	r0, [r4, #0]
 8007dbe:	b938      	cbnz	r0, 8007dd0 <__pow5mult+0x9c>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ff0b 	bl	8007be0 <__multiply>
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	f8c0 9000 	str.w	r9, [r0]
 8007dd0:	4604      	mov	r4, r0
 8007dd2:	e7e4      	b.n	8007d9e <__pow5mult+0x6a>
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	bf00      	nop
 8007ddc:	08008c80 	.word	0x08008c80
 8007de0:	08008b18 	.word	0x08008b18
 8007de4:	08008b2f 	.word	0x08008b2f

08007de8 <__lshift>:
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	460c      	mov	r4, r1
 8007dee:	6849      	ldr	r1, [r1, #4]
 8007df0:	6923      	ldr	r3, [r4, #16]
 8007df2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	4607      	mov	r7, r0
 8007dfa:	4691      	mov	r9, r2
 8007dfc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e00:	f108 0601 	add.w	r6, r8, #1
 8007e04:	42b3      	cmp	r3, r6
 8007e06:	db0b      	blt.n	8007e20 <__lshift+0x38>
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff fd91 	bl	8007930 <_Balloc>
 8007e0e:	4605      	mov	r5, r0
 8007e10:	b948      	cbnz	r0, 8007e26 <__lshift+0x3e>
 8007e12:	4602      	mov	r2, r0
 8007e14:	4b2a      	ldr	r3, [pc, #168]	; (8007ec0 <__lshift+0xd8>)
 8007e16:	482b      	ldr	r0, [pc, #172]	; (8007ec4 <__lshift+0xdc>)
 8007e18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e1c:	f7fd faf4 	bl	8005408 <__assert_func>
 8007e20:	3101      	adds	r1, #1
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	e7ee      	b.n	8007e04 <__lshift+0x1c>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f100 0114 	add.w	r1, r0, #20
 8007e2c:	f100 0210 	add.w	r2, r0, #16
 8007e30:	4618      	mov	r0, r3
 8007e32:	4553      	cmp	r3, sl
 8007e34:	db37      	blt.n	8007ea6 <__lshift+0xbe>
 8007e36:	6920      	ldr	r0, [r4, #16]
 8007e38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e3c:	f104 0314 	add.w	r3, r4, #20
 8007e40:	f019 091f 	ands.w	r9, r9, #31
 8007e44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007e4c:	d02f      	beq.n	8007eae <__lshift+0xc6>
 8007e4e:	f1c9 0e20 	rsb	lr, r9, #32
 8007e52:	468a      	mov	sl, r1
 8007e54:	f04f 0c00 	mov.w	ip, #0
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	fa02 f209 	lsl.w	r2, r2, r9
 8007e5e:	ea42 020c 	orr.w	r2, r2, ip
 8007e62:	f84a 2b04 	str.w	r2, [sl], #4
 8007e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e6a:	4298      	cmp	r0, r3
 8007e6c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007e70:	d8f2      	bhi.n	8007e58 <__lshift+0x70>
 8007e72:	1b03      	subs	r3, r0, r4
 8007e74:	3b15      	subs	r3, #21
 8007e76:	f023 0303 	bic.w	r3, r3, #3
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	f104 0215 	add.w	r2, r4, #21
 8007e80:	4290      	cmp	r0, r2
 8007e82:	bf38      	it	cc
 8007e84:	2304      	movcc	r3, #4
 8007e86:	f841 c003 	str.w	ip, [r1, r3]
 8007e8a:	f1bc 0f00 	cmp.w	ip, #0
 8007e8e:	d001      	beq.n	8007e94 <__lshift+0xac>
 8007e90:	f108 0602 	add.w	r6, r8, #2
 8007e94:	3e01      	subs	r6, #1
 8007e96:	4638      	mov	r0, r7
 8007e98:	612e      	str	r6, [r5, #16]
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	f7ff fd88 	bl	80079b0 <_Bfree>
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eaa:	3301      	adds	r3, #1
 8007eac:	e7c1      	b.n	8007e32 <__lshift+0x4a>
 8007eae:	3904      	subs	r1, #4
 8007eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eb8:	4298      	cmp	r0, r3
 8007eba:	d8f9      	bhi.n	8007eb0 <__lshift+0xc8>
 8007ebc:	e7ea      	b.n	8007e94 <__lshift+0xac>
 8007ebe:	bf00      	nop
 8007ec0:	08008a8c 	.word	0x08008a8c
 8007ec4:	08008b2f 	.word	0x08008b2f

08007ec8 <__mcmp>:
 8007ec8:	b530      	push	{r4, r5, lr}
 8007eca:	6902      	ldr	r2, [r0, #16]
 8007ecc:	690c      	ldr	r4, [r1, #16]
 8007ece:	1b12      	subs	r2, r2, r4
 8007ed0:	d10e      	bne.n	8007ef0 <__mcmp+0x28>
 8007ed2:	f100 0314 	add.w	r3, r0, #20
 8007ed6:	3114      	adds	r1, #20
 8007ed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007edc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ee8:	42a5      	cmp	r5, r4
 8007eea:	d003      	beq.n	8007ef4 <__mcmp+0x2c>
 8007eec:	d305      	bcc.n	8007efa <__mcmp+0x32>
 8007eee:	2201      	movs	r2, #1
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	bd30      	pop	{r4, r5, pc}
 8007ef4:	4283      	cmp	r3, r0
 8007ef6:	d3f3      	bcc.n	8007ee0 <__mcmp+0x18>
 8007ef8:	e7fa      	b.n	8007ef0 <__mcmp+0x28>
 8007efa:	f04f 32ff 	mov.w	r2, #4294967295
 8007efe:	e7f7      	b.n	8007ef0 <__mcmp+0x28>

08007f00 <__mdiff>:
 8007f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	4606      	mov	r6, r0
 8007f08:	4611      	mov	r1, r2
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4690      	mov	r8, r2
 8007f0e:	f7ff ffdb 	bl	8007ec8 <__mcmp>
 8007f12:	1e05      	subs	r5, r0, #0
 8007f14:	d110      	bne.n	8007f38 <__mdiff+0x38>
 8007f16:	4629      	mov	r1, r5
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f7ff fd09 	bl	8007930 <_Balloc>
 8007f1e:	b930      	cbnz	r0, 8007f2e <__mdiff+0x2e>
 8007f20:	4b3a      	ldr	r3, [pc, #232]	; (800800c <__mdiff+0x10c>)
 8007f22:	4602      	mov	r2, r0
 8007f24:	f240 2132 	movw	r1, #562	; 0x232
 8007f28:	4839      	ldr	r0, [pc, #228]	; (8008010 <__mdiff+0x110>)
 8007f2a:	f7fd fa6d 	bl	8005408 <__assert_func>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f38:	bfa4      	itt	ge
 8007f3a:	4643      	movge	r3, r8
 8007f3c:	46a0      	movge	r8, r4
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007f44:	bfa6      	itte	ge
 8007f46:	461c      	movge	r4, r3
 8007f48:	2500      	movge	r5, #0
 8007f4a:	2501      	movlt	r5, #1
 8007f4c:	f7ff fcf0 	bl	8007930 <_Balloc>
 8007f50:	b920      	cbnz	r0, 8007f5c <__mdiff+0x5c>
 8007f52:	4b2e      	ldr	r3, [pc, #184]	; (800800c <__mdiff+0x10c>)
 8007f54:	4602      	mov	r2, r0
 8007f56:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007f5a:	e7e5      	b.n	8007f28 <__mdiff+0x28>
 8007f5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007f60:	6926      	ldr	r6, [r4, #16]
 8007f62:	60c5      	str	r5, [r0, #12]
 8007f64:	f104 0914 	add.w	r9, r4, #20
 8007f68:	f108 0514 	add.w	r5, r8, #20
 8007f6c:	f100 0e14 	add.w	lr, r0, #20
 8007f70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007f74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f78:	f108 0210 	add.w	r2, r8, #16
 8007f7c:	46f2      	mov	sl, lr
 8007f7e:	2100      	movs	r1, #0
 8007f80:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007f88:	fa1f f883 	uxth.w	r8, r3
 8007f8c:	fa11 f18b 	uxtah	r1, r1, fp
 8007f90:	0c1b      	lsrs	r3, r3, #16
 8007f92:	eba1 0808 	sub.w	r8, r1, r8
 8007f96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007f9e:	fa1f f888 	uxth.w	r8, r8
 8007fa2:	1419      	asrs	r1, r3, #16
 8007fa4:	454e      	cmp	r6, r9
 8007fa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007faa:	f84a 3b04 	str.w	r3, [sl], #4
 8007fae:	d8e7      	bhi.n	8007f80 <__mdiff+0x80>
 8007fb0:	1b33      	subs	r3, r6, r4
 8007fb2:	3b15      	subs	r3, #21
 8007fb4:	f023 0303 	bic.w	r3, r3, #3
 8007fb8:	3304      	adds	r3, #4
 8007fba:	3415      	adds	r4, #21
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	bf38      	it	cc
 8007fc0:	2304      	movcc	r3, #4
 8007fc2:	441d      	add	r5, r3
 8007fc4:	4473      	add	r3, lr
 8007fc6:	469e      	mov	lr, r3
 8007fc8:	462e      	mov	r6, r5
 8007fca:	4566      	cmp	r6, ip
 8007fcc:	d30e      	bcc.n	8007fec <__mdiff+0xec>
 8007fce:	f10c 0203 	add.w	r2, ip, #3
 8007fd2:	1b52      	subs	r2, r2, r5
 8007fd4:	f022 0203 	bic.w	r2, r2, #3
 8007fd8:	3d03      	subs	r5, #3
 8007fda:	45ac      	cmp	ip, r5
 8007fdc:	bf38      	it	cc
 8007fde:	2200      	movcc	r2, #0
 8007fe0:	441a      	add	r2, r3
 8007fe2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007fe6:	b17b      	cbz	r3, 8008008 <__mdiff+0x108>
 8007fe8:	6107      	str	r7, [r0, #16]
 8007fea:	e7a3      	b.n	8007f34 <__mdiff+0x34>
 8007fec:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ff0:	fa11 f288 	uxtah	r2, r1, r8
 8007ff4:	1414      	asrs	r4, r2, #16
 8007ff6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ffa:	b292      	uxth	r2, r2
 8007ffc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008000:	f84e 2b04 	str.w	r2, [lr], #4
 8008004:	1421      	asrs	r1, r4, #16
 8008006:	e7e0      	b.n	8007fca <__mdiff+0xca>
 8008008:	3f01      	subs	r7, #1
 800800a:	e7ea      	b.n	8007fe2 <__mdiff+0xe2>
 800800c:	08008a8c 	.word	0x08008a8c
 8008010:	08008b2f 	.word	0x08008b2f

08008014 <__ulp>:
 8008014:	b082      	sub	sp, #8
 8008016:	ed8d 0b00 	vstr	d0, [sp]
 800801a:	9b01      	ldr	r3, [sp, #4]
 800801c:	4912      	ldr	r1, [pc, #72]	; (8008068 <__ulp+0x54>)
 800801e:	4019      	ands	r1, r3
 8008020:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008024:	2900      	cmp	r1, #0
 8008026:	dd05      	ble.n	8008034 <__ulp+0x20>
 8008028:	2200      	movs	r2, #0
 800802a:	460b      	mov	r3, r1
 800802c:	ec43 2b10 	vmov	d0, r2, r3
 8008030:	b002      	add	sp, #8
 8008032:	4770      	bx	lr
 8008034:	4249      	negs	r1, r1
 8008036:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800803a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	da04      	bge.n	8008052 <__ulp+0x3e>
 8008048:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800804c:	fa41 f300 	asr.w	r3, r1, r0
 8008050:	e7ec      	b.n	800802c <__ulp+0x18>
 8008052:	f1a0 0114 	sub.w	r1, r0, #20
 8008056:	291e      	cmp	r1, #30
 8008058:	bfda      	itte	le
 800805a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800805e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008062:	2101      	movgt	r1, #1
 8008064:	460a      	mov	r2, r1
 8008066:	e7e1      	b.n	800802c <__ulp+0x18>
 8008068:	7ff00000 	.word	0x7ff00000

0800806c <__b2d>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	6905      	ldr	r5, [r0, #16]
 8008070:	f100 0714 	add.w	r7, r0, #20
 8008074:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008078:	1f2e      	subs	r6, r5, #4
 800807a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800807e:	4620      	mov	r0, r4
 8008080:	f7ff fd48 	bl	8007b14 <__hi0bits>
 8008084:	f1c0 0320 	rsb	r3, r0, #32
 8008088:	280a      	cmp	r0, #10
 800808a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008108 <__b2d+0x9c>
 800808e:	600b      	str	r3, [r1, #0]
 8008090:	dc14      	bgt.n	80080bc <__b2d+0x50>
 8008092:	f1c0 0e0b 	rsb	lr, r0, #11
 8008096:	fa24 f10e 	lsr.w	r1, r4, lr
 800809a:	42b7      	cmp	r7, r6
 800809c:	ea41 030c 	orr.w	r3, r1, ip
 80080a0:	bf34      	ite	cc
 80080a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80080a6:	2100      	movcs	r1, #0
 80080a8:	3015      	adds	r0, #21
 80080aa:	fa04 f000 	lsl.w	r0, r4, r0
 80080ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80080b2:	ea40 0201 	orr.w	r2, r0, r1
 80080b6:	ec43 2b10 	vmov	d0, r2, r3
 80080ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080bc:	42b7      	cmp	r7, r6
 80080be:	bf3a      	itte	cc
 80080c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80080c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80080c8:	2100      	movcs	r1, #0
 80080ca:	380b      	subs	r0, #11
 80080cc:	d017      	beq.n	80080fe <__b2d+0x92>
 80080ce:	f1c0 0c20 	rsb	ip, r0, #32
 80080d2:	fa04 f500 	lsl.w	r5, r4, r0
 80080d6:	42be      	cmp	r6, r7
 80080d8:	fa21 f40c 	lsr.w	r4, r1, ip
 80080dc:	ea45 0504 	orr.w	r5, r5, r4
 80080e0:	bf8c      	ite	hi
 80080e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80080e6:	2400      	movls	r4, #0
 80080e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80080ec:	fa01 f000 	lsl.w	r0, r1, r0
 80080f0:	fa24 f40c 	lsr.w	r4, r4, ip
 80080f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80080f8:	ea40 0204 	orr.w	r2, r0, r4
 80080fc:	e7db      	b.n	80080b6 <__b2d+0x4a>
 80080fe:	ea44 030c 	orr.w	r3, r4, ip
 8008102:	460a      	mov	r2, r1
 8008104:	e7d7      	b.n	80080b6 <__b2d+0x4a>
 8008106:	bf00      	nop
 8008108:	3ff00000 	.word	0x3ff00000

0800810c <__d2b>:
 800810c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008110:	4689      	mov	r9, r1
 8008112:	2101      	movs	r1, #1
 8008114:	ec57 6b10 	vmov	r6, r7, d0
 8008118:	4690      	mov	r8, r2
 800811a:	f7ff fc09 	bl	8007930 <_Balloc>
 800811e:	4604      	mov	r4, r0
 8008120:	b930      	cbnz	r0, 8008130 <__d2b+0x24>
 8008122:	4602      	mov	r2, r0
 8008124:	4b25      	ldr	r3, [pc, #148]	; (80081bc <__d2b+0xb0>)
 8008126:	4826      	ldr	r0, [pc, #152]	; (80081c0 <__d2b+0xb4>)
 8008128:	f240 310a 	movw	r1, #778	; 0x30a
 800812c:	f7fd f96c 	bl	8005408 <__assert_func>
 8008130:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008134:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008138:	bb35      	cbnz	r5, 8008188 <__d2b+0x7c>
 800813a:	2e00      	cmp	r6, #0
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	d028      	beq.n	8008192 <__d2b+0x86>
 8008140:	4668      	mov	r0, sp
 8008142:	9600      	str	r6, [sp, #0]
 8008144:	f7ff fd06 	bl	8007b54 <__lo0bits>
 8008148:	9900      	ldr	r1, [sp, #0]
 800814a:	b300      	cbz	r0, 800818e <__d2b+0x82>
 800814c:	9a01      	ldr	r2, [sp, #4]
 800814e:	f1c0 0320 	rsb	r3, r0, #32
 8008152:	fa02 f303 	lsl.w	r3, r2, r3
 8008156:	430b      	orrs	r3, r1
 8008158:	40c2      	lsrs	r2, r0
 800815a:	6163      	str	r3, [r4, #20]
 800815c:	9201      	str	r2, [sp, #4]
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	61a3      	str	r3, [r4, #24]
 8008162:	2b00      	cmp	r3, #0
 8008164:	bf14      	ite	ne
 8008166:	2202      	movne	r2, #2
 8008168:	2201      	moveq	r2, #1
 800816a:	6122      	str	r2, [r4, #16]
 800816c:	b1d5      	cbz	r5, 80081a4 <__d2b+0x98>
 800816e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008172:	4405      	add	r5, r0
 8008174:	f8c9 5000 	str.w	r5, [r9]
 8008178:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800817c:	f8c8 0000 	str.w	r0, [r8]
 8008180:	4620      	mov	r0, r4
 8008182:	b003      	add	sp, #12
 8008184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800818c:	e7d5      	b.n	800813a <__d2b+0x2e>
 800818e:	6161      	str	r1, [r4, #20]
 8008190:	e7e5      	b.n	800815e <__d2b+0x52>
 8008192:	a801      	add	r0, sp, #4
 8008194:	f7ff fcde 	bl	8007b54 <__lo0bits>
 8008198:	9b01      	ldr	r3, [sp, #4]
 800819a:	6163      	str	r3, [r4, #20]
 800819c:	2201      	movs	r2, #1
 800819e:	6122      	str	r2, [r4, #16]
 80081a0:	3020      	adds	r0, #32
 80081a2:	e7e3      	b.n	800816c <__d2b+0x60>
 80081a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081ac:	f8c9 0000 	str.w	r0, [r9]
 80081b0:	6918      	ldr	r0, [r3, #16]
 80081b2:	f7ff fcaf 	bl	8007b14 <__hi0bits>
 80081b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081ba:	e7df      	b.n	800817c <__d2b+0x70>
 80081bc:	08008a8c 	.word	0x08008a8c
 80081c0:	08008b2f 	.word	0x08008b2f

080081c4 <__ratio>:
 80081c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	4688      	mov	r8, r1
 80081ca:	4669      	mov	r1, sp
 80081cc:	4681      	mov	r9, r0
 80081ce:	f7ff ff4d 	bl	800806c <__b2d>
 80081d2:	a901      	add	r1, sp, #4
 80081d4:	4640      	mov	r0, r8
 80081d6:	ec55 4b10 	vmov	r4, r5, d0
 80081da:	f7ff ff47 	bl	800806c <__b2d>
 80081de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80081e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80081e6:	eba3 0c02 	sub.w	ip, r3, r2
 80081ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80081f4:	ec51 0b10 	vmov	r0, r1, d0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bfd6      	itet	le
 80081fc:	460a      	movle	r2, r1
 80081fe:	462a      	movgt	r2, r5
 8008200:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008204:	468b      	mov	fp, r1
 8008206:	462f      	mov	r7, r5
 8008208:	bfd4      	ite	le
 800820a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800820e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008212:	4620      	mov	r0, r4
 8008214:	ee10 2a10 	vmov	r2, s0
 8008218:	465b      	mov	r3, fp
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 fb2e 	bl	800087c <__aeabi_ddiv>
 8008220:	ec41 0b10 	vmov	d0, r0, r1
 8008224:	b003      	add	sp, #12
 8008226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800822a <__copybits>:
 800822a:	3901      	subs	r1, #1
 800822c:	b570      	push	{r4, r5, r6, lr}
 800822e:	1149      	asrs	r1, r1, #5
 8008230:	6914      	ldr	r4, [r2, #16]
 8008232:	3101      	adds	r1, #1
 8008234:	f102 0314 	add.w	r3, r2, #20
 8008238:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800823c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008240:	1f05      	subs	r5, r0, #4
 8008242:	42a3      	cmp	r3, r4
 8008244:	d30c      	bcc.n	8008260 <__copybits+0x36>
 8008246:	1aa3      	subs	r3, r4, r2
 8008248:	3b11      	subs	r3, #17
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	3211      	adds	r2, #17
 8008250:	42a2      	cmp	r2, r4
 8008252:	bf88      	it	hi
 8008254:	2300      	movhi	r3, #0
 8008256:	4418      	add	r0, r3
 8008258:	2300      	movs	r3, #0
 800825a:	4288      	cmp	r0, r1
 800825c:	d305      	bcc.n	800826a <__copybits+0x40>
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	f853 6b04 	ldr.w	r6, [r3], #4
 8008264:	f845 6f04 	str.w	r6, [r5, #4]!
 8008268:	e7eb      	b.n	8008242 <__copybits+0x18>
 800826a:	f840 3b04 	str.w	r3, [r0], #4
 800826e:	e7f4      	b.n	800825a <__copybits+0x30>

08008270 <__any_on>:
 8008270:	f100 0214 	add.w	r2, r0, #20
 8008274:	6900      	ldr	r0, [r0, #16]
 8008276:	114b      	asrs	r3, r1, #5
 8008278:	4298      	cmp	r0, r3
 800827a:	b510      	push	{r4, lr}
 800827c:	db11      	blt.n	80082a2 <__any_on+0x32>
 800827e:	dd0a      	ble.n	8008296 <__any_on+0x26>
 8008280:	f011 011f 	ands.w	r1, r1, #31
 8008284:	d007      	beq.n	8008296 <__any_on+0x26>
 8008286:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800828a:	fa24 f001 	lsr.w	r0, r4, r1
 800828e:	fa00 f101 	lsl.w	r1, r0, r1
 8008292:	428c      	cmp	r4, r1
 8008294:	d10b      	bne.n	80082ae <__any_on+0x3e>
 8008296:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800829a:	4293      	cmp	r3, r2
 800829c:	d803      	bhi.n	80082a6 <__any_on+0x36>
 800829e:	2000      	movs	r0, #0
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	4603      	mov	r3, r0
 80082a4:	e7f7      	b.n	8008296 <__any_on+0x26>
 80082a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082aa:	2900      	cmp	r1, #0
 80082ac:	d0f5      	beq.n	800829a <__any_on+0x2a>
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7f6      	b.n	80082a0 <__any_on+0x30>
 80082b2:	0000      	movs	r0, r0
 80082b4:	0000      	movs	r0, r0
	...

080082b8 <nan>:
 80082b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80082c0 <nan+0x8>
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	00000000 	.word	0x00000000
 80082c4:	7ff80000 	.word	0x7ff80000

080082c8 <_raise_r>:
 80082c8:	291f      	cmp	r1, #31
 80082ca:	b538      	push	{r3, r4, r5, lr}
 80082cc:	4604      	mov	r4, r0
 80082ce:	460d      	mov	r5, r1
 80082d0:	d904      	bls.n	80082dc <_raise_r+0x14>
 80082d2:	2316      	movs	r3, #22
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	f04f 30ff 	mov.w	r0, #4294967295
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082de:	b112      	cbz	r2, 80082e6 <_raise_r+0x1e>
 80082e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e4:	b94b      	cbnz	r3, 80082fa <_raise_r+0x32>
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 f830 	bl	800834c <_getpid_r>
 80082ec:	462a      	mov	r2, r5
 80082ee:	4601      	mov	r1, r0
 80082f0:	4620      	mov	r0, r4
 80082f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f6:	f000 b817 	b.w	8008328 <_kill_r>
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d00a      	beq.n	8008314 <_raise_r+0x4c>
 80082fe:	1c59      	adds	r1, r3, #1
 8008300:	d103      	bne.n	800830a <_raise_r+0x42>
 8008302:	2316      	movs	r3, #22
 8008304:	6003      	str	r3, [r0, #0]
 8008306:	2001      	movs	r0, #1
 8008308:	e7e7      	b.n	80082da <_raise_r+0x12>
 800830a:	2400      	movs	r4, #0
 800830c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008310:	4628      	mov	r0, r5
 8008312:	4798      	blx	r3
 8008314:	2000      	movs	r0, #0
 8008316:	e7e0      	b.n	80082da <_raise_r+0x12>

08008318 <raise>:
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <raise+0xc>)
 800831a:	4601      	mov	r1, r0
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f7ff bfd3 	b.w	80082c8 <_raise_r>
 8008322:	bf00      	nop
 8008324:	2000000c 	.word	0x2000000c

08008328 <_kill_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	; (8008348 <_kill_r+0x20>)
 800832c:	2300      	movs	r3, #0
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	602b      	str	r3, [r5, #0]
 8008336:	f7f9 f94b 	bl	80015d0 <_kill>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d102      	bne.n	8008344 <_kill_r+0x1c>
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	b103      	cbz	r3, 8008344 <_kill_r+0x1c>
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	bd38      	pop	{r3, r4, r5, pc}
 8008346:	bf00      	nop
 8008348:	20000584 	.word	0x20000584

0800834c <_getpid_r>:
 800834c:	f7f9 b938 	b.w	80015c0 <_getpid>

08008350 <__sread>:
 8008350:	b510      	push	{r4, lr}
 8008352:	460c      	mov	r4, r1
 8008354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008358:	f000 f8a0 	bl	800849c <_read_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	bfab      	itete	ge
 8008360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008362:	89a3      	ldrhlt	r3, [r4, #12]
 8008364:	181b      	addge	r3, r3, r0
 8008366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800836a:	bfac      	ite	ge
 800836c:	6563      	strge	r3, [r4, #84]	; 0x54
 800836e:	81a3      	strhlt	r3, [r4, #12]
 8008370:	bd10      	pop	{r4, pc}

08008372 <__swrite>:
 8008372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	461f      	mov	r7, r3
 8008378:	898b      	ldrh	r3, [r1, #12]
 800837a:	05db      	lsls	r3, r3, #23
 800837c:	4605      	mov	r5, r0
 800837e:	460c      	mov	r4, r1
 8008380:	4616      	mov	r6, r2
 8008382:	d505      	bpl.n	8008390 <__swrite+0x1e>
 8008384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008388:	2302      	movs	r3, #2
 800838a:	2200      	movs	r2, #0
 800838c:	f000 f874 	bl	8008478 <_lseek_r>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	4632      	mov	r2, r6
 800839e:	463b      	mov	r3, r7
 80083a0:	4628      	mov	r0, r5
 80083a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083a6:	f000 b823 	b.w	80083f0 <_write_r>

080083aa <__sseek>:
 80083aa:	b510      	push	{r4, lr}
 80083ac:	460c      	mov	r4, r1
 80083ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b2:	f000 f861 	bl	8008478 <_lseek_r>
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	bf15      	itete	ne
 80083bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80083be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083c6:	81a3      	strheq	r3, [r4, #12]
 80083c8:	bf18      	it	ne
 80083ca:	81a3      	strhne	r3, [r4, #12]
 80083cc:	bd10      	pop	{r4, pc}

080083ce <__sclose>:
 80083ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d2:	f000 b81f 	b.w	8008414 <_close_r>

080083d6 <__ascii_wctomb>:
 80083d6:	b149      	cbz	r1, 80083ec <__ascii_wctomb+0x16>
 80083d8:	2aff      	cmp	r2, #255	; 0xff
 80083da:	bf85      	ittet	hi
 80083dc:	238a      	movhi	r3, #138	; 0x8a
 80083de:	6003      	strhi	r3, [r0, #0]
 80083e0:	700a      	strbls	r2, [r1, #0]
 80083e2:	f04f 30ff 	movhi.w	r0, #4294967295
 80083e6:	bf98      	it	ls
 80083e8:	2001      	movls	r0, #1
 80083ea:	4770      	bx	lr
 80083ec:	4608      	mov	r0, r1
 80083ee:	4770      	bx	lr

080083f0 <_write_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_write_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7f9 f91d 	bl	800163e <_write>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_write_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_write_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20000584 	.word	0x20000584

08008414 <_close_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_close_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7f9 f929 	bl	8001676 <_close>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_close_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_close_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20000584 	.word	0x20000584

08008434 <_fstat_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	; (8008454 <_fstat_r+0x20>)
 8008438:	2300      	movs	r3, #0
 800843a:	4604      	mov	r4, r0
 800843c:	4608      	mov	r0, r1
 800843e:	4611      	mov	r1, r2
 8008440:	602b      	str	r3, [r5, #0]
 8008442:	f7f9 f924 	bl	800168e <_fstat>
 8008446:	1c43      	adds	r3, r0, #1
 8008448:	d102      	bne.n	8008450 <_fstat_r+0x1c>
 800844a:	682b      	ldr	r3, [r5, #0]
 800844c:	b103      	cbz	r3, 8008450 <_fstat_r+0x1c>
 800844e:	6023      	str	r3, [r4, #0]
 8008450:	bd38      	pop	{r3, r4, r5, pc}
 8008452:	bf00      	nop
 8008454:	20000584 	.word	0x20000584

08008458 <_isatty_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d06      	ldr	r5, [pc, #24]	; (8008474 <_isatty_r+0x1c>)
 800845c:	2300      	movs	r3, #0
 800845e:	4604      	mov	r4, r0
 8008460:	4608      	mov	r0, r1
 8008462:	602b      	str	r3, [r5, #0]
 8008464:	f7f9 f923 	bl	80016ae <_isatty>
 8008468:	1c43      	adds	r3, r0, #1
 800846a:	d102      	bne.n	8008472 <_isatty_r+0x1a>
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	b103      	cbz	r3, 8008472 <_isatty_r+0x1a>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	bd38      	pop	{r3, r4, r5, pc}
 8008474:	20000584 	.word	0x20000584

08008478 <_lseek_r>:
 8008478:	b538      	push	{r3, r4, r5, lr}
 800847a:	4d07      	ldr	r5, [pc, #28]	; (8008498 <_lseek_r+0x20>)
 800847c:	4604      	mov	r4, r0
 800847e:	4608      	mov	r0, r1
 8008480:	4611      	mov	r1, r2
 8008482:	2200      	movs	r2, #0
 8008484:	602a      	str	r2, [r5, #0]
 8008486:	461a      	mov	r2, r3
 8008488:	f7f9 f91c 	bl	80016c4 <_lseek>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_lseek_r+0x1e>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_lseek_r+0x1e>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	20000584 	.word	0x20000584

0800849c <_read_r>:
 800849c:	b538      	push	{r3, r4, r5, lr}
 800849e:	4d07      	ldr	r5, [pc, #28]	; (80084bc <_read_r+0x20>)
 80084a0:	4604      	mov	r4, r0
 80084a2:	4608      	mov	r0, r1
 80084a4:	4611      	mov	r1, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	602a      	str	r2, [r5, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f7f9 f8aa 	bl	8001604 <_read>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_read_r+0x1e>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_read_r+0x1e>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20000584 	.word	0x20000584

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
