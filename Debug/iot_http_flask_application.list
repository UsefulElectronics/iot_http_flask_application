
iot_http_flask_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  080068f8  080068f8  000168f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070a4  080070a4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080070a4  080070a4  000170a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ac  080070ac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ac  080070ac  000170ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080070b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  200001e0  08007294  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  08007294  00020588  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d136  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002364  00000000  00000000  0002d346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00007bfb  00000000  00000000  0002f6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000770  00000000  00000000  000372a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000910  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001714d  00000000  00000000  00038328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ddc1  00000000  00000000  0004f475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087bc1  00000000  00000000  0005d236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e4df7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025b8  00000000  00000000  000e4e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068e0 	.word	0x080068e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080068e0 	.word	0x080068e0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2uiz>:
 8000b5c:	004a      	lsls	r2, r1, #1
 8000b5e:	d211      	bcs.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d211      	bcs.n	8000b8a <__aeabi_d2uiz+0x2e>
 8000b66:	d50d      	bpl.n	8000b84 <__aeabi_d2uiz+0x28>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d40e      	bmi.n	8000b90 <__aeabi_d2uiz+0x34>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_d2uiz+0x3a>
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b9aa 	b.w	8000f08 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f83c 	bl	8000c38 <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2lz>:
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	460d      	mov	r5, r1
 8000bd6:	f7ff ff99 	bl	8000b0c <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x1c>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	4629      	mov	r1, r5
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4620      	mov	r0, r4
 8000bea:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fd0f 	bl	8000628 <__aeabi_dmul>
 8000c0a:	f7ff ffa7 	bl	8000b5c <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc90 	bl	8000534 <__aeabi_ui2d>
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f7ff fd06 	bl	8000628 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fb48 	bl	80002b8 <__aeabi_dsub>
 8000c28:	f7ff ff98 	bl	8000b5c <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b500      	push	{lr}
 8000f0e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f10:	2230      	movs	r2, #48	; 0x30
 8000f12:	2100      	movs	r1, #0
 8000f14:	a808      	add	r0, sp, #32
 8000f16:	f002 fd17 	bl	8003948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	9303      	str	r3, [sp, #12]
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	9305      	str	r3, [sp, #20]
 8000f22:	9306      	str	r3, [sp, #24]
 8000f24:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	9301      	str	r3, [sp, #4]
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <SystemClock_Config+0x80>)
 8000f2a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000f2c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000f30:	6411      	str	r1, [r2, #64]	; 0x40
 8000f32:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f34:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000f38:	9201      	str	r2, [sp, #4]
 8000f3a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <SystemClock_Config+0x84>)
 8000f40:	6811      	ldr	r1, [r2, #0]
 8000f42:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8000f46:	6011      	str	r1, [r2, #0]
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000f4e:	9202      	str	r2, [sp, #8]
 8000f50:	9a02      	ldr	r2, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f52:	2202      	movs	r2, #2
 8000f54:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f56:	2201      	movs	r2, #1
 8000f58:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f5e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f60:	a808      	add	r0, sp, #32
 8000f62:	f000 fea1 	bl	8001ca8 <HAL_RCC_OscConfig>
 8000f66:	b968      	cbnz	r0, 8000f84 <SystemClock_Config+0x78>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f68:	230f      	movs	r3, #15
 8000f6a:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f70:	9105      	str	r1, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f72:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f74:	9107      	str	r1, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f76:	a803      	add	r0, sp, #12
 8000f78:	f001 f8e4 	bl	8002144 <HAL_RCC_ClockConfig>
 8000f7c:	b920      	cbnz	r0, 8000f88 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8000f7e:	b015      	add	sp, #84	; 0x54
 8000f80:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f84:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <SystemClock_Config+0x7a>
 8000f88:	b672      	cpsid	i
 8000f8a:	e7fe      	b.n	8000f8a <SystemClock_Config+0x7e>
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40007000 	.word	0x40007000

08000f94 <main>:
{
 8000f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f98:	b088      	sub	sp, #32
  HAL_Init();
 8000f9a:	f000 faad 	bl	80014f8 <HAL_Init>
  SystemClock_Config();
 8000f9e:	f7ff ffb5 	bl	8000f0c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	9403      	str	r4, [sp, #12]
 8000fa6:	9404      	str	r4, [sp, #16]
 8000fa8:	9405      	str	r4, [sp, #20]
 8000faa:	9406      	str	r4, [sp, #24]
 8000fac:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fae:	9400      	str	r4, [sp, #0]
 8000fb0:	4d7e      	ldr	r5, [pc, #504]	; (80011ac <main+0x218>)
 8000fb2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	632b      	str	r3, [r5, #48]	; 0x30
 8000fba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	9401      	str	r4, [sp, #4]
 8000fc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	632b      	str	r3, [r5, #48]	; 0x30
 8000fce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	9402      	str	r4, [sp, #8]
 8000fda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fdc:	f043 0302 	orr.w	r3, r3, #2
 8000fe0:	632b      	str	r3, [r5, #48]	; 0x30
 8000fe2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000fec:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80011c8 <main+0x234>
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff6:	4640      	mov	r0, r8
 8000ff8:	f000 fe46 	bl	8001c88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MODULE_RESET_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8000ffc:	4f6c      	ldr	r7, [pc, #432]	; (80011b0 <main+0x21c>)
 8000ffe:	4622      	mov	r2, r4
 8001000:	f244 01e0 	movw	r1, #16608	; 0x40e0
 8001004:	4638      	mov	r0, r7
 8001006:	f000 fe3f 	bl	8001c88 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2601      	movs	r6, #1
 8001012:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001018:	a903      	add	r1, sp, #12
 800101a:	4640      	mov	r0, r8
 800101c:	f000 fd4e 	bl	8001abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001020:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001024:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001026:	a903      	add	r1, sp, #12
 8001028:	4862      	ldr	r0, [pc, #392]	; (80011b4 <main+0x220>)
 800102a:	f000 fd47 	bl	8001abc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MODULE_RESET_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 800102e:	f244 03e0 	movw	r3, #16608	; 0x40e0
 8001032:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001034:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	a903      	add	r1, sp, #12
 800103c:	4638      	mov	r0, r7
 800103e:	f000 fd3d 	bl	8001abc <HAL_GPIO_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001042:	9403      	str	r4, [sp, #12]
 8001044:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001046:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104a:	632b      	str	r3, [r5, #48]	; 0x30
 800104c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	9303      	str	r3, [sp, #12]
 8001054:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001056:	4622      	mov	r2, r4
 8001058:	4621      	mov	r1, r4
 800105a:	203a      	movs	r0, #58	; 0x3a
 800105c:	f000 fa8a 	bl	8001574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001060:	203a      	movs	r0, #58	; 0x3a
 8001062:	f000 fabd 	bl	80015e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001066:	4622      	mov	r2, r4
 8001068:	4621      	mov	r1, r4
 800106a:	2046      	movs	r0, #70	; 0x46
 800106c:	f000 fa82 	bl	8001574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001070:	2046      	movs	r0, #70	; 0x46
 8001072:	f000 fab5 	bl	80015e0 <HAL_NVIC_EnableIRQ>
  huart1.Instance = USART1;
 8001076:	4850      	ldr	r0, [pc, #320]	; (80011b8 <main+0x224>)
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <main+0x228>)
 800107a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800107c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001080:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001082:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001084:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001086:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001088:	230c      	movs	r3, #12
 800108a:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108c:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800108e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001090:	f001 f9da 	bl	8002448 <HAL_UART_Init>
 8001094:	b950      	cbnz	r0, 80010ac <main+0x118>
  wifiModuleInit();
 8001096:	f002 fa93 	bl	80035c0 <wifiModuleInit>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hWifiModule.rxBuffer, WIFI_MODULE_BUFFER_SIZE);
 800109a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800109e:	4948      	ldr	r1, [pc, #288]	; (80011c0 <main+0x22c>)
 80010a0:	4845      	ldr	r0, [pc, #276]	; (80011b8 <main+0x224>)
 80010a2:	f001 fd51 	bl	8002b48 <HAL_UARTEx_ReceiveToIdle_DMA>
	  if(hWifiModule.controlFlags.flag.configurationFase && hWifiModule.controlFlags.flag.configurationNotify)
 80010a6:	4c47      	ldr	r4, [pc, #284]	; (80011c4 <main+0x230>)
		  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80010a8:	4d47      	ldr	r5, [pc, #284]	; (80011c8 <main+0x234>)
 80010aa:	e063      	b.n	8001174 <main+0x1e0>
 80010ac:	b672      	cpsid	i
  while (1)
 80010ae:	e7fe      	b.n	80010ae <main+0x11a>
		  wifiModuleConfigSequence();
 80010b0:	f002 fa9c 	bl	80035ec <wifiModuleConfigSequence>
		  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80010b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b8:	4628      	mov	r0, r5
 80010ba:	f000 fdeb 	bl	8001c94 <HAL_GPIO_TogglePin>
		  hWifiModule.controlFlags.flag.configurationNotify = DISABLE;
 80010be:	7823      	ldrb	r3, [r4, #0]
 80010c0:	f36f 03c3 	bfc	r3, #3, #1
 80010c4:	7023      	strb	r3, [r4, #0]
		  hWifiModule.httpTimer = HAL_GetTick();
 80010c6:	f000 fa3d 	bl	8001544 <HAL_GetTick>
 80010ca:	60a0      	str	r0, [r4, #8]
 80010cc:	e019      	b.n	8001102 <main+0x16e>
	  if(0 == hWifiModule.controlFlags.flag.configurationFase && (HAL_GetTick() - hWifiModule.httpTimer > 1000))
 80010ce:	f000 fa39 	bl	8001544 <HAL_GetTick>
 80010d2:	68a3      	ldr	r3, [r4, #8]
 80010d4:	1ac0      	subs	r0, r0, r3
 80010d6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010da:	d916      	bls.n	800110a <main+0x176>
		  wifiModuleHttpGetRequest();
 80010dc:	f002 fb80 	bl	80037e0 <wifiModuleHttpGetRequest>
		  hWifiModule.httpTimer = HAL_GetTick();
 80010e0:	f000 fa30 	bl	8001544 <HAL_GetTick>
 80010e4:	60a0      	str	r0, [r4, #8]
 80010e6:	e010      	b.n	800110a <main+0x176>
	  if(hWifiModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hWifiModule.txTimer > 1000))
 80010e8:	7823      	ldrb	r3, [r4, #0]
 80010ea:	f013 0f02 	tst.w	r3, #2
 80010ee:	d126      	bne.n	800113e <main+0x1aa>
	  if(hWifiModule.controlFlags.flag.packetReceived && (HAL_GetTick() - hWifiModule.rxTimer > 1000))
 80010f0:	7823      	ldrb	r3, [r4, #0]
 80010f2:	f013 0f01 	tst.w	r3, #1
 80010f6:	d136      	bne.n	8001166 <main+0x1d2>
	  if(hWifiModule.controlFlags.flag.configurationFase && hWifiModule.controlFlags.flag.configurationNotify)
 80010f8:	7823      	ldrb	r3, [r4, #0]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d0d6      	beq.n	80010b0 <main+0x11c>
	  if(0 == hWifiModule.controlFlags.flag.configurationFase && (HAL_GetTick() - hWifiModule.httpTimer > 1000))
 8001102:	7823      	ldrb	r3, [r4, #0]
 8001104:	f013 0f04 	tst.w	r3, #4
 8001108:	d0e1      	beq.n	80010ce <main+0x13a>
	  if(hWifiModule.controlFlags.flag.httpGetNotify)
 800110a:	7823      	ldrb	r3, [r4, #0]
 800110c:	f013 0f10 	tst.w	r3, #16
 8001110:	d0ea      	beq.n	80010e8 <main+0x154>
		  json = nx_json_parse_utf8((char*)(hWifiModule.rxBuffer + offset));
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <main+0x238>)
 8001114:	f002 fa4c 	bl	80035b0 <nx_json_parse_utf8>
		  value = nx_json_get(json, "Value")->text_value[0] - '0';
 8001118:	492d      	ldr	r1, [pc, #180]	; (80011d0 <main+0x23c>)
 800111a:	f002 fa05 	bl	8003528 <nx_json_get>
 800111e:	6883      	ldr	r3, [r0, #8]
		  if(value)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b30      	cmp	r3, #48	; 0x30
			  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, RESET);
 8001124:	bf14      	ite	ne
 8001126:	2200      	movne	r2, #0
			  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, SET);
 8001128:	2201      	moveq	r2, #1
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	4628      	mov	r0, r5
 8001130:	f000 fdaa 	bl	8001c88 <HAL_GPIO_WritePin>
		  hWifiModule.controlFlags.flag.httpGetNotify = DISABLE;
 8001134:	7823      	ldrb	r3, [r4, #0]
 8001136:	f36f 1304 	bfc	r3, #4, #1
 800113a:	7023      	strb	r3, [r4, #0]
 800113c:	e7d4      	b.n	80010e8 <main+0x154>
	  if(hWifiModule.controlFlags.flag.packetToTransmit && (HAL_GetTick() - hWifiModule.txTimer > 1000))
 800113e:	f000 fa01 	bl	8001544 <HAL_GetTick>
 8001142:	68e3      	ldr	r3, [r4, #12]
 8001144:	1ac0      	subs	r0, r0, r3
 8001146:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800114a:	d9d1      	bls.n	80010f0 <main+0x15c>
		  HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hWifiModule.txBuffer, hWifiModule.txPacketSize);
 800114c:	8862      	ldrh	r2, [r4, #2]
 800114e:	4631      	mov	r1, r6
 8001150:	4819      	ldr	r0, [pc, #100]	; (80011b8 <main+0x224>)
 8001152:	f001 f9a9 	bl	80024a8 <HAL_UART_Transmit_DMA>
		  hWifiModule.controlFlags.flag.packetToTransmit = DISABLE;
 8001156:	7823      	ldrb	r3, [r4, #0]
 8001158:	f36f 0341 	bfc	r3, #1, #1
 800115c:	7023      	strb	r3, [r4, #0]
		  hWifiModule.txTimer = HAL_GetTick();
 800115e:	f000 f9f1 	bl	8001544 <HAL_GetTick>
 8001162:	60e0      	str	r0, [r4, #12]
 8001164:	e7c4      	b.n	80010f0 <main+0x15c>
	  if(hWifiModule.controlFlags.flag.packetReceived && (HAL_GetTick() - hWifiModule.rxTimer > 1000))
 8001166:	f000 f9ed 	bl	8001544 <HAL_GetTick>
 800116a:	6923      	ldr	r3, [r4, #16]
 800116c:	1ac0      	subs	r0, r0, r3
 800116e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001172:	d802      	bhi.n	800117a <main+0x1e6>
		  HAL_UART_Transmit_DMA(&huart1, (uint8_t*) hWifiModule.txBuffer, hWifiModule.txPacketSize);
 8001174:	f104 0614 	add.w	r6, r4, #20
 8001178:	e7be      	b.n	80010f8 <main+0x164>
		  hWifiModule.controlFlags.flag.packetReceived = DISABLE;
 800117a:	7823      	ldrb	r3, [r4, #0]
 800117c:	f36f 0300 	bfc	r3, #0, #1
 8001180:	7023      	strb	r3, [r4, #0]
		  hWifiModule.rxTimer = HAL_GetTick();
 8001182:	f000 f9df 	bl	8001544 <HAL_GetTick>
 8001186:	6120      	str	r0, [r4, #16]
		  if(0 == memcmp(hWifiModule.rxBuffer, AT_HTTP_RESPONSE_HEADER, AT_HTTP_RESPONSE_HEADER_SIZE))
 8001188:	220f      	movs	r2, #15
 800118a:	4912      	ldr	r1, [pc, #72]	; (80011d4 <main+0x240>)
 800118c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001190:	f002 fbbc 	bl	800390c <memcmp>
 8001194:	b920      	cbnz	r0, 80011a0 <main+0x20c>
			  hWifiModule.controlFlags.flag.httpGetNotify = ENABLE;
 8001196:	7823      	ldrb	r3, [r4, #0]
 8001198:	f043 0310 	orr.w	r3, r3, #16
 800119c:	7023      	strb	r3, [r4, #0]
 800119e:	e7e9      	b.n	8001174 <main+0x1e0>
			  hWifiModule.controlFlags.flag.configurationNotify = ENABLE;
 80011a0:	7823      	ldrb	r3, [r4, #0]
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	7023      	strb	r3, [r4, #0]
 80011a8:	e7e4      	b.n	8001174 <main+0x1e0>
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020000 	.word	0x40020000
 80011b8:	200002bc 	.word	0x200002bc
 80011bc:	40011000 	.word	0x40011000
 80011c0:	2000044c 	.word	0x2000044c
 80011c4:	2000030c 	.word	0x2000030c
 80011c8:	40020800 	.word	0x40020800
 80011cc:	20000467 	.word	0x20000467
 80011d0:	080068f8 	.word	0x080068f8
 80011d4:	08006900 	.word	0x08006900

080011d8 <HAL_UARTEx_RxEventCallback>:
{
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	460d      	mov	r5, r1
	hWifiModule.controlFlags.flag.packetReceived = ENABLE;
 80011dc:	4c09      	ldr	r4, [pc, #36]	; (8001204 <HAL_UARTEx_RxEventCallback+0x2c>)
 80011de:	7823      	ldrb	r3, [r4, #0]
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	7023      	strb	r3, [r4, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t*) hWifiModule.rxBuffer, WIFI_MODULE_BUFFER_SIZE);
 80011e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011ea:	f504 71a0 	add.w	r1, r4, #320	; 0x140
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <HAL_UARTEx_RxEventCallback+0x30>)
 80011f0:	f001 fcaa 	bl	8002b48 <HAL_UARTEx_ReceiveToIdle_DMA>
	hWifiModule.rxPacketSize = Size;
 80011f4:	80a5      	strh	r5, [r4, #4]
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_UARTEx_RxEventCallback+0x34>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	f023 0308 	bic.w	r3, r3, #8
 8001200:	6013      	str	r3, [r2, #0]
}
 8001202:	bd38      	pop	{r3, r4, r5, pc}
 8001204:	2000030c 	.word	0x2000030c
 8001208:	200002bc 	.word	0x200002bc
 800120c:	200001fc 	.word	0x200001fc

08001210 <Error_Handler>:
 8001210:	b672      	cpsid	i
  while (1)
 8001212:	e7fe      	b.n	8001212 <Error_Handler+0x2>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2100      	movs	r1, #0
 8001218:	9100      	str	r1, [sp, #0]
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_MspInit+0x34>)
 800121c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800121e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001222:	645a      	str	r2, [r3, #68]	; 0x44
 8001224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001226:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001232:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	b002      	add	sp, #8
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b530      	push	{r4, r5, lr}
 800124e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	2300      	movs	r3, #0
 8001252:	9303      	str	r3, [sp, #12]
 8001254:	9304      	str	r3, [sp, #16]
 8001256:	9305      	str	r3, [sp, #20]
 8001258:	9306      	str	r3, [sp, #24]
 800125a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001262:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8001266:	429a      	cmp	r2, r3
 8001268:	d001      	beq.n	800126e <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800126a:	b009      	add	sp, #36	; 0x24
 800126c:	bd30      	pop	{r4, r5, pc}
 800126e:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001270:	2500      	movs	r5, #0
 8001272:	9501      	str	r5, [sp, #4]
 8001274:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800127a:	f042 0210 	orr.w	r2, r2, #16
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
 8001280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001282:	f002 0210 	and.w	r2, r2, #16
 8001286:	9201      	str	r2, [sp, #4]
 8001288:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	9502      	str	r5, [sp, #8]
 800128c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	631a      	str	r2, [r3, #48]	; 0x30
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800129e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012ac:	2307      	movs	r3, #7
 80012ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	a903      	add	r1, sp, #12
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <HAL_UART_MspInit+0xe8>)
 80012b4:	f000 fc02 	bl	8001abc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012b8:	481f      	ldr	r0, [pc, #124]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_UART_MspInit+0xf0>)
 80012bc:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012c2:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c4:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012cc:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ce:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d0:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80012d2:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	6205      	str	r5, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d6:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012d8:	f000 f9c4 	bl	8001664 <HAL_DMA_Init>
 80012dc:	bb18      	cbnz	r0, 8001326 <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_UART_MspInit+0xec>)
 80012e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80012e2:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <HAL_UART_MspInit+0xf4>)
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_UART_MspInit+0xf8>)
 80012e8:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80012ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80012ee:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fc:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012fe:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001300:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001302:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001304:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001306:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001308:	f000 f9ac 	bl	8001664 <HAL_DMA_Init>
 800130c:	b970      	cbnz	r0, 800132c <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <HAL_UART_MspInit+0xf4>)
 8001310:	6363      	str	r3, [r4, #52]	; 0x34
 8001312:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	4611      	mov	r1, r2
 8001318:	2025      	movs	r0, #37	; 0x25
 800131a:	f000 f92b 	bl	8001574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800131e:	2025      	movs	r0, #37	; 0x25
 8001320:	f000 f95e 	bl	80015e0 <HAL_NVIC_EnableIRQ>
}
 8001324:	e7a1      	b.n	800126a <HAL_UART_MspInit+0x1e>
      Error_Handler();
 8001326:	f7ff ff73 	bl	8001210 <Error_Handler>
 800132a:	e7d8      	b.n	80012de <HAL_UART_MspInit+0x92>
      Error_Handler();
 800132c:	f7ff ff70 	bl	8001210 <Error_Handler>
 8001330:	e7ed      	b.n	800130e <HAL_UART_MspInit+0xc2>
 8001332:	bf00      	nop
 8001334:	40020000 	.word	0x40020000
 8001338:	200001fc 	.word	0x200001fc
 800133c:	40026440 	.word	0x40026440
 8001340:	2000025c 	.word	0x2000025c
 8001344:	400264b8 	.word	0x400264b8

08001348 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler>

0800134a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <HardFault_Handler>

0800134c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800134c:	e7fe      	b.n	800134c <MemManage_Handler>

0800134e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler>

08001350 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler>

08001352 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001352:	4770      	bx	lr

08001354 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135a:	f000 f8e7 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135e:	bd08      	pop	{r3, pc}

08001360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001360:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001362:	4802      	ldr	r0, [pc, #8]	; (800136c <USART1_IRQHandler+0xc>)
 8001364:	f001 f9ca 	bl	80026fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001368:	bd08      	pop	{r3, pc}
 800136a:	bf00      	nop
 800136c:	200002bc 	.word	0x200002bc

08001370 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001372:	4802      	ldr	r0, [pc, #8]	; (800137c <DMA2_Stream2_IRQHandler+0xc>)
 8001374:	f000 fab4 	bl	80018e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001378:	bd08      	pop	{r3, pc}
 800137a:	bf00      	nop
 800137c:	200001fc 	.word	0x200001fc

08001380 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001382:	4802      	ldr	r0, [pc, #8]	; (800138c <DMA2_Stream7_IRQHandler+0xc>)
 8001384:	f000 faac 	bl	80018e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001388:	bd08      	pop	{r3, pc}
 800138a:	bf00      	nop
 800138c:	2000025c 	.word	0x2000025c

08001390 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001390:	2001      	movs	r0, #1
 8001392:	4770      	bx	lr

08001394 <_kill>:

int _kill(int pid, int sig)
{
 8001394:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001396:	f002 fa6d 	bl	8003874 <__errno>
 800139a:	2316      	movs	r3, #22
 800139c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800139e:	f04f 30ff 	mov.w	r0, #4294967295
 80013a2:	bd08      	pop	{r3, pc}

080013a4 <_exit>:

void _exit (int status)
{
 80013a4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80013a6:	f002 fa65 	bl	8003874 <__errno>
 80013aa:	2316      	movs	r3, #22
 80013ac:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80013ae:	e7fe      	b.n	80013ae <_exit+0xa>

080013b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	1e16      	subs	r6, r2, #0
 80013b4:	dd07      	ble.n	80013c6 <_read+0x16>
 80013b6:	460c      	mov	r4, r1
 80013b8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	42a5      	cmp	r5, r4
 80013c4:	d1f9      	bne.n	80013ba <_read+0xa>
	}

return len;
}
 80013c6:	4630      	mov	r0, r6
 80013c8:	bd70      	pop	{r4, r5, r6, pc}

080013ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013ca:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	1e16      	subs	r6, r2, #0
 80013ce:	dd07      	ble.n	80013e0 <_write+0x16>
 80013d0:	460c      	mov	r4, r1
 80013d2:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 80013d4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80013d8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013dc:	42a5      	cmp	r5, r4
 80013de:	d1f9      	bne.n	80013d4 <_write+0xa>
	}
	return len;
}
 80013e0:	4630      	mov	r0, r6
 80013e2:	bd70      	pop	{r4, r5, r6, pc}

080013e4 <_close>:

int _close(int file)
{
	return -1;
}
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	4770      	bx	lr

080013ea <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	604b      	str	r3, [r1, #4]
	return 0;
}
 80013f0:	2000      	movs	r0, #0
 80013f2:	4770      	bx	lr

080013f4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80013f4:	2001      	movs	r0, #1
 80013f6:	4770      	bx	lr

080013f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80013f8:	2000      	movs	r0, #0
 80013fa:	4770      	bx	lr

080013fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013fc:	b508      	push	{r3, lr}
 80013fe:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <_sbrk+0x38>)
 8001402:	6812      	ldr	r2, [r2, #0]
 8001404:	b152      	cbz	r2, 800141c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <_sbrk+0x38>)
 8001408:	6810      	ldr	r0, [r2, #0]
 800140a:	4403      	add	r3, r0
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <_sbrk+0x3c>)
 800140e:	490b      	ldr	r1, [pc, #44]	; (800143c <_sbrk+0x40>)
 8001410:	1a52      	subs	r2, r2, r1
 8001412:	4293      	cmp	r3, r2
 8001414:	d806      	bhi.n	8001424 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <_sbrk+0x38>)
 8001418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800141a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800141c:	4a05      	ldr	r2, [pc, #20]	; (8001434 <_sbrk+0x38>)
 800141e:	4908      	ldr	r1, [pc, #32]	; (8001440 <_sbrk+0x44>)
 8001420:	6011      	str	r1, [r2, #0]
 8001422:	e7f0      	b.n	8001406 <_sbrk+0xa>
    errno = ENOMEM;
 8001424:	f002 fa26 	bl	8003874 <__errno>
 8001428:	230c      	movs	r3, #12
 800142a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	e7f3      	b.n	800141a <_sbrk+0x1e>
 8001432:	bf00      	nop
 8001434:	20000300 	.word	0x20000300
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	20000588 	.word	0x20000588

08001444 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001444:	4a03      	ldr	r2, [pc, #12]	; (8001454 <SystemInit+0x10>)
 8001446:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800144a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800144e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800145e:	490e      	ldr	r1, [pc, #56]	; (8001498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001460:	4a0e      	ldr	r2, [pc, #56]	; (800149c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001464:	e002      	b.n	800146c <LoopCopyDataInit>

08001466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800146a:	3304      	adds	r3, #4

0800146c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800146c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800146e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001470:	d3f9      	bcc.n	8001466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001474:	4c0b      	ldr	r4, [pc, #44]	; (80014a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001478:	e001      	b.n	800147e <LoopFillZerobss>

0800147a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800147a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800147c:	3204      	adds	r2, #4

0800147e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800147e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001480:	d3fb      	bcc.n	800147a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001482:	f7ff ffdf 	bl	8001444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001486:	f002 fa0d 	bl	80038a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148a:	f7ff fd83 	bl	8000f94 <main>
  bx  lr    
 800148e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800149c:	080070b4 	.word	0x080070b4
  ldr r2, =_sbss
 80014a0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80014a4:	20000588 	.word	0x20000588

080014a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC_IRQHandler>
	...

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b510      	push	{r4, lr}
 80014ae:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_InitTick+0x40>)
 80014b2:	7818      	ldrb	r0, [r3, #0]
 80014b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b8:	fbb3 f3f0 	udiv	r3, r3, r0
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <HAL_InitTick+0x44>)
 80014be:	6810      	ldr	r0, [r2, #0]
 80014c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c4:	f000 f89a 	bl	80015fc <HAL_SYSTICK_Config>
 80014c8:	b968      	cbnz	r0, 80014e6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	2c0f      	cmp	r4, #15
 80014cc:	d901      	bls.n	80014d2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80014ce:	2001      	movs	r0, #1
 80014d0:	e00a      	b.n	80014e8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d2:	2200      	movs	r2, #0
 80014d4:	4621      	mov	r1, r4
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295
 80014da:	f000 f84b 	bl	8001574 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_InitTick+0x48>)
 80014e0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2000      	movs	r0, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
}
 80014e8:	bd10      	pop	{r4, pc}
 80014ea:	bf00      	nop
 80014ec:	20000004 	.word	0x20000004
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_Init>:
{
 80014f8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_Init+0x30>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001502:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800150a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001512:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f81b 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800151a:	200f      	movs	r0, #15
 800151c:	f7ff ffc6 	bl	80014ac <HAL_InitTick>
  HAL_MspInit();
 8001520:	f7ff fe78 	bl	8001214 <HAL_MspInit>
}
 8001524:	2000      	movs	r0, #0
 8001526:	bd08      	pop	{r3, pc}
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_IncTick+0x10>)
 800152e:	6811      	ldr	r1, [r2, #0]
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <HAL_IncTick+0x14>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	440b      	add	r3, r1
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000304 	.word	0x20000304
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001544:	4b01      	ldr	r3, [pc, #4]	; (800154c <HAL_GetTick+0x8>)
 8001546:	6818      	ldr	r0, [r3, #0]
}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000304 	.word	0x20000304

08001550 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4907      	ldr	r1, [pc, #28]	; (8001570 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001552:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	0203      	lsls	r3, r0, #8
 8001556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800155a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800155e:	0412      	lsls	r2, r2, #16
 8001560:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800156c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001574:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_NVIC_SetPriority+0x64>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157e:	f1c3 0c07 	rsb	ip, r3, #7
 8001582:	f1bc 0f04 	cmp.w	ip, #4
 8001586:	bf28      	it	cs
 8001588:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158c:	f103 0e04 	add.w	lr, r3, #4
 8001590:	f1be 0f06 	cmp.w	lr, #6
 8001594:	bf8c      	ite	hi
 8001596:	3b03      	subhi	r3, #3
 8001598:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159a:	f04f 3eff 	mov.w	lr, #4294967295
 800159e:	fa0e fc0c 	lsl.w	ip, lr, ip
 80015a2:	ea21 010c 	bic.w	r1, r1, ip
 80015a6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a8:	fa0e f303 	lsl.w	r3, lr, r3
 80015ac:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 80015b2:	2800      	cmp	r0, #0
 80015b4:	db09      	blt.n	80015ca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	0109      	lsls	r1, r1, #4
 80015b8:	b2c9      	uxtb	r1, r1
 80015ba:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80015be:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80015c2:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80015c6:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	f000 000f 	and.w	r0, r0, #15
 80015ce:	0109      	lsls	r1, r1, #4
 80015d0:	b2c9      	uxtb	r1, r1
 80015d2:	4b02      	ldr	r3, [pc, #8]	; (80015dc <HAL_NVIC_SetPriority+0x68>)
 80015d4:	5419      	strb	r1, [r3, r0]
 80015d6:	e7f6      	b.n	80015c6 <HAL_NVIC_SetPriority+0x52>
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	e000ed14 	.word	0xe000ed14

080015e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80015e0:	2800      	cmp	r0, #0
 80015e2:	db08      	blt.n	80015f6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e4:	0942      	lsrs	r2, r0, #5
 80015e6:	f000 001f 	and.w	r0, r0, #31
 80015ea:	2301      	movs	r3, #1
 80015ec:	fa03 f000 	lsl.w	r0, r3, r0
 80015f0:	4b01      	ldr	r3, [pc, #4]	; (80015f8 <HAL_NVIC_EnableIRQ+0x18>)
 80015f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100

080015fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	3801      	subs	r0, #1
 80015fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001602:	d20b      	bcs.n	800161c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001604:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001608:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_SYSTICK_Config+0x24>)
 800160c:	21f0      	movs	r1, #240	; 0xf0
 800160e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001612:	2000      	movs	r0, #0
 8001614:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	2207      	movs	r2, #7
 8001618:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800161c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001624:	b410      	push	{r4}
 8001626:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001628:	6803      	ldr	r3, [r0, #0]
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	3810      	subs	r0, #16
 800162e:	490b      	ldr	r1, [pc, #44]	; (800165c <DMA_CalcBaseAndBitshift+0x38>)
 8001630:	fba1 4100 	umull	r4, r1, r1, r0
 8001634:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001636:	4c0a      	ldr	r4, [pc, #40]	; (8001660 <DMA_CalcBaseAndBitshift+0x3c>)
 8001638:	5c61      	ldrb	r1, [r4, r1]
 800163a:	65d1      	str	r1, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 800163c:	285f      	cmp	r0, #95	; 0x5f
 800163e:	d908      	bls.n	8001652 <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001640:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001644:	f023 0303 	bic.w	r3, r3, #3
 8001648:	1d18      	adds	r0, r3, #4
 800164a:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800164c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001650:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001652:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001656:	f020 0003 	bic.w	r0, r0, #3
 800165a:	e7f6      	b.n	800164a <DMA_CalcBaseAndBitshift+0x26>
 800165c:	aaaaaaab 	.word	0xaaaaaaab
 8001660:	08006928 	.word	0x08006928

08001664 <HAL_DMA_Init>:
{
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ff6c 	bl	8001544 <HAL_GetTick>
  if(hdma == NULL)
 800166c:	2c00      	cmp	r4, #0
 800166e:	f000 808c 	beq.w	800178a <HAL_DMA_Init+0x126>
 8001672:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001674:	2302      	movs	r3, #2
 8001676:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800167a:	2300      	movs	r3, #0
 800167c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001680:	6822      	ldr	r2, [r4, #0]
 8001682:	6813      	ldr	r3, [r2, #0]
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	f012 0f01 	tst.w	r2, #1
 8001692:	d00a      	beq.n	80016aa <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001694:	f7ff ff56 	bl	8001544 <HAL_GetTick>
 8001698:	1b43      	subs	r3, r0, r5
 800169a:	2b05      	cmp	r3, #5
 800169c:	d9f5      	bls.n	800168a <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800169e:	2320      	movs	r3, #32
 80016a0:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
 80016a4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80016a8:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 80016aa:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016ac:	4838      	ldr	r0, [pc, #224]	; (8001790 <HAL_DMA_Init+0x12c>)
 80016ae:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016b0:	6861      	ldr	r1, [r4, #4]
 80016b2:	68a2      	ldr	r2, [r4, #8]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	68e1      	ldr	r1, [r4, #12]
 80016b8:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ba:	6921      	ldr	r1, [r4, #16]
 80016bc:	430a      	orrs	r2, r1
 80016be:	6961      	ldr	r1, [r4, #20]
 80016c0:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	69a1      	ldr	r1, [r4, #24]
 80016c4:	430a      	orrs	r2, r1
 80016c6:	69e1      	ldr	r1, [r4, #28]
 80016c8:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ca:	6a21      	ldr	r1, [r4, #32]
 80016cc:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ce:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80016d2:	2904      	cmp	r1, #4
 80016d4:	d021      	beq.n	800171a <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 80016d6:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80016d8:	6821      	ldr	r1, [r4, #0]
 80016da:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016dc:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 80016e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016e2:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d10a      	bne.n	80016fe <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 80016e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016ea:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80016ee:	b133      	cbz	r3, 80016fe <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016f0:	69a5      	ldr	r5, [r4, #24]
 80016f2:	bb3d      	cbnz	r5, 8001744 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 80016f4:	2801      	cmp	r0, #1
 80016f6:	d01f      	beq.n	8001738 <HAL_DMA_Init+0xd4>
 80016f8:	f030 0002 	bics.w	r0, r0, #2
 80016fc:	d012      	beq.n	8001724 <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 80016fe:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001700:	4620      	mov	r0, r4
 8001702:	f7ff ff8f 	bl	8001624 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001706:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001708:	233f      	movs	r3, #63	; 0x3f
 800170a:	4093      	lsls	r3, r2
 800170c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800170e:	2000      	movs	r0, #0
 8001710:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001712:	2301      	movs	r3, #1
 8001714:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001718:	e7c6      	b.n	80016a8 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800171a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800171c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800171e:	4301      	orrs	r1, r0
 8001720:	430a      	orrs	r2, r1
 8001722:	e7d8      	b.n	80016d6 <HAL_DMA_Init+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e8      	beq.n	80016fe <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800172c:	2340      	movs	r3, #64	; 0x40
 800172e:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001730:	2001      	movs	r0, #1
 8001732:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8001736:	e7b7      	b.n	80016a8 <HAL_DMA_Init+0x44>
  HAL_StatusTypeDef status = HAL_OK;
 8001738:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800173c:	bf14      	ite	ne
 800173e:	2300      	movne	r3, #0
 8001740:	2301      	moveq	r3, #1
 8001742:	e7f1      	b.n	8001728 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001744:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8001748:	d008      	beq.n	800175c <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800174a:	2802      	cmp	r0, #2
 800174c:	d9ee      	bls.n	800172c <HAL_DMA_Init+0xc8>
 800174e:	2803      	cmp	r0, #3
 8001750:	d1d5      	bne.n	80016fe <HAL_DMA_Init+0x9a>
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0d1      	beq.n	80016fe <HAL_DMA_Init+0x9a>
 800175a:	e7e7      	b.n	800172c <HAL_DMA_Init+0xc8>
    switch (tmp)
 800175c:	2803      	cmp	r0, #3
 800175e:	d8ce      	bhi.n	80016fe <HAL_DMA_Init+0x9a>
 8001760:	a501      	add	r5, pc, #4	; (adr r5, 8001768 <HAL_DMA_Init+0x104>)
 8001762:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 8001766:	bf00      	nop
 8001768:	0800172d 	.word	0x0800172d
 800176c:	08001779 	.word	0x08001779
 8001770:	0800172d 	.word	0x0800172d
 8001774:	0800177f 	.word	0x0800177f
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800177c:	e7eb      	b.n	8001756 <HAL_DMA_Init+0xf2>
 800177e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001782:	bf14      	ite	ne
 8001784:	2300      	movne	r3, #0
 8001786:	2301      	moveq	r3, #1
 8001788:	e7e5      	b.n	8001756 <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 800178a:	2001      	movs	r0, #1
 800178c:	e78c      	b.n	80016a8 <HAL_DMA_Init+0x44>
 800178e:	bf00      	nop
 8001790:	f010803f 	.word	0xf010803f

08001794 <HAL_DMA_Start_IT>:
{
 8001794:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001796:	6d84      	ldr	r4, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001798:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800179c:	f1bc 0f01 	cmp.w	ip, #1
 80017a0:	d03f      	beq.n	8001822 <HAL_DMA_Start_IT+0x8e>
 80017a2:	f04f 0c01 	mov.w	ip, #1
 80017a6:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80017aa:	f890 c035 	ldrb.w	ip, [r0, #53]	; 0x35
 80017ae:	fa5f fc8c 	uxtb.w	ip, ip
 80017b2:	f1bc 0f01 	cmp.w	ip, #1
 80017b6:	d005      	beq.n	80017c4 <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 80017b8:	2300      	movs	r3, #0
 80017ba:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 80017be:	2002      	movs	r0, #2
}
 80017c0:	bc70      	pop	{r4, r5, r6}
 80017c2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	2502      	movs	r5, #2
 80017c6:	f880 5035 	strb.w	r5, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ca:	2500      	movs	r5, #0
 80017cc:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80017ce:	6806      	ldr	r6, [r0, #0]
 80017d0:	6835      	ldr	r5, [r6, #0]
 80017d2:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80017d6:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 80017d8:	6805      	ldr	r5, [r0, #0]
 80017da:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017dc:	6883      	ldr	r3, [r0, #8]
 80017de:	2b40      	cmp	r3, #64	; 0x40
 80017e0:	d01a      	beq.n	8001818 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 80017e2:	6803      	ldr	r3, [r0, #0]
 80017e4:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017e6:	6803      	ldr	r3, [r0, #0]
 80017e8:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ea:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80017ec:	233f      	movs	r3, #63	; 0x3f
 80017ee:	4093      	lsls	r3, r2
 80017f0:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017f2:	6802      	ldr	r2, [r0, #0]
 80017f4:	6813      	ldr	r3, [r2, #0]
 80017f6:	f043 0316 	orr.w	r3, r3, #22
 80017fa:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80017fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017fe:	b123      	cbz	r3, 800180a <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001800:	6802      	ldr	r2, [r0, #0]
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f043 0308 	orr.w	r3, r3, #8
 8001808:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800180a:	6802      	ldr	r2, [r0, #0]
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001814:	2000      	movs	r0, #0
 8001816:	e7d3      	b.n	80017c0 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800181c:	6803      	ldr	r3, [r0, #0]
 800181e:	60d9      	str	r1, [r3, #12]
 8001820:	e7e3      	b.n	80017ea <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 8001822:	2002      	movs	r0, #2
 8001824:	e7cc      	b.n	80017c0 <HAL_DMA_Start_IT+0x2c>

08001826 <HAL_DMA_Abort>:
{
 8001826:	b570      	push	{r4, r5, r6, lr}
 8001828:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800182a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff fe8a 	bl	8001544 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001830:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d006      	beq.n	8001848 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800183e:	2300      	movs	r3, #0
 8001840:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
}
 8001846:	bd70      	pop	{r4, r5, r6, pc}
 8001848:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800184a:	6822      	ldr	r2, [r4, #0]
 800184c:	6813      	ldr	r3, [r2, #0]
 800184e:	f023 0316 	bic.w	r3, r3, #22
 8001852:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001854:	6822      	ldr	r2, [r4, #0]
 8001856:	6953      	ldr	r3, [r2, #20]
 8001858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800185c:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800185e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001860:	b1e3      	cbz	r3, 800189c <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001862:	6822      	ldr	r2, [r4, #0]
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	f023 0308 	bic.w	r3, r3, #8
 800186a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800186c:	6822      	ldr	r2, [r4, #0]
 800186e:	6813      	ldr	r3, [r2, #0]
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001876:	6823      	ldr	r3, [r4, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f013 0f01 	tst.w	r3, #1
 800187e:	d011      	beq.n	80018a4 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001880:	f7ff fe60 	bl	8001544 <HAL_GetTick>
 8001884:	1b43      	subs	r3, r0, r5
 8001886:	2b05      	cmp	r3, #5
 8001888:	d9f5      	bls.n	8001876 <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800188a:	2320      	movs	r3, #32
 800188c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800188e:	2003      	movs	r0, #3
 8001890:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800189a:	e7d4      	b.n	8001846 <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800189c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1df      	bne.n	8001862 <HAL_DMA_Abort+0x3c>
 80018a2:	e7e3      	b.n	800186c <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018a6:	233f      	movs	r3, #63	; 0x3f
 80018a8:	4093      	lsls	r3, r2
 80018aa:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 80018b8:	e7c5      	b.n	8001846 <HAL_DMA_Abort+0x20>

080018ba <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ba:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d003      	beq.n	80018cc <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80018c8:	2001      	movs	r0, #1
 80018ca:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 80018cc:	2305      	movs	r3, #5
 80018ce:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80018d2:	6802      	ldr	r2, [r0, #0]
 80018d4:	6813      	ldr	r3, [r2, #0]
 80018d6:	f023 0301 	bic.w	r3, r3, #1
 80018da:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80018dc:	2000      	movs	r0, #0
}
 80018de:	4770      	bx	lr

080018e0 <HAL_DMA_IRQHandler>:
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80018ea:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_DMA_IRQHandler+0x1d4>)
 80018ec:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ee:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80018f0:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018f2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80018f4:	2308      	movs	r3, #8
 80018f6:	4093      	lsls	r3, r2
 80018f8:	422b      	tst	r3, r5
 80018fa:	d010      	beq.n	800191e <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018fc:	6803      	ldr	r3, [r0, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f012 0f04 	tst.w	r2, #4
 8001904:	d00b      	beq.n	800191e <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	f022 0204 	bic.w	r2, r2, #4
 800190c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800190e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001910:	2308      	movs	r3, #8
 8001912:	4093      	lsls	r3, r2
 8001914:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001916:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001920:	2301      	movs	r3, #1
 8001922:	4093      	lsls	r3, r2
 8001924:	422b      	tst	r3, r5
 8001926:	d009      	beq.n	800193c <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	6952      	ldr	r2, [r2, #20]
 800192c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001930:	d004      	beq.n	800193c <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001932:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001934:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800193c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800193e:	2304      	movs	r3, #4
 8001940:	4093      	lsls	r3, r2
 8001942:	422b      	tst	r3, r5
 8001944:	d009      	beq.n	800195a <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	6812      	ldr	r2, [r2, #0]
 800194a:	f012 0f02 	tst.w	r2, #2
 800194e:	d004      	beq.n	800195a <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001950:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001952:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800195a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800195c:	2310      	movs	r3, #16
 800195e:	4093      	lsls	r3, r2
 8001960:	422b      	tst	r3, r5
 8001962:	d024      	beq.n	80019ae <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001964:	6822      	ldr	r2, [r4, #0]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	f012 0f08 	tst.w	r2, #8
 800196c:	d01f      	beq.n	80019ae <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800196e:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001978:	d00d      	beq.n	8001996 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001980:	d104      	bne.n	800198c <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 8001982:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001984:	b19b      	cbz	r3, 80019ae <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 8001986:	4620      	mov	r0, r4
 8001988:	4798      	blx	r3
 800198a:	e010      	b.n	80019ae <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800198c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800198e:	b173      	cbz	r3, 80019ae <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 8001990:	4620      	mov	r0, r4
 8001992:	4798      	blx	r3
 8001994:	e00b      	b.n	80019ae <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f412 7f80 	tst.w	r2, #256	; 0x100
 800199c:	d103      	bne.n	80019a6 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	f022 0208 	bic.w	r2, r2, #8
 80019a4:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80019a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019a8:	b10b      	cbz	r3, 80019ae <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 80019aa:	4620      	mov	r0, r4
 80019ac:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ae:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80019b0:	2320      	movs	r3, #32
 80019b2:	4093      	lsls	r3, r2
 80019b4:	422b      	tst	r3, r5
 80019b6:	d055      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019b8:	6822      	ldr	r2, [r4, #0]
 80019ba:	6812      	ldr	r2, [r2, #0]
 80019bc:	f012 0f10 	tst.w	r2, #16
 80019c0:	d050      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019c2:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019c4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d00e      	beq.n	80019ec <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80019d6:	d033      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019de:	d12a      	bne.n	8001a36 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 80019e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d03e      	beq.n	8001a64 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 80019e6:	4620      	mov	r0, r4
 80019e8:	4798      	blx	r3
 80019ea:	e03b      	b.n	8001a64 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ec:	6822      	ldr	r2, [r4, #0]
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	f023 0316 	bic.w	r3, r3, #22
 80019f4:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019f6:	6822      	ldr	r2, [r4, #0]
 80019f8:	6953      	ldr	r3, [r2, #20]
 80019fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019fe:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a02:	b1a3      	cbz	r3, 8001a2e <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a04:	6822      	ldr	r2, [r4, #0]
 8001a06:	6813      	ldr	r3, [r2, #0]
 8001a08:	f023 0308 	bic.w	r3, r3, #8
 8001a0c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a10:	233f      	movs	r3, #63	; 0x3f
 8001a12:	4093      	lsls	r3, r2
 8001a14:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001a22:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d043      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4798      	blx	r3
 8001a2c:	e040      	b.n	8001ab0 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1e7      	bne.n	8001a04 <HAL_DMA_IRQHandler+0x124>
 8001a34:	e7eb      	b.n	8001a0e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 8001a36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a38:	b1a3      	cbz	r3, 8001a64 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4798      	blx	r3
 8001a3e:	e011      	b.n	8001a64 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001a46:	d109      	bne.n	8001a5c <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f022 0210 	bic.w	r2, r2, #16
 8001a4e:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001a56:	2300      	movs	r3, #0
 8001a58:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001a5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a5e:	b10b      	cbz	r3, 8001a64 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 8001a60:	4620      	mov	r0, r4
 8001a62:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a66:	b31b      	cbz	r3, 8001ab0 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a6a:	f013 0f01 	tst.w	r3, #1
 8001a6e:	d01b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_DMA_IRQHandler+0x1d8>)
 8001a72:	fba3 3606 	umull	r3, r6, r3, r6
 8001a76:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a78:	2305      	movs	r3, #5
 8001a7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	42b3      	cmp	r3, r6
 8001a90:	d804      	bhi.n	8001a9c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f013 0f01 	tst.w	r3, #1
 8001a9a:	d1f5      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001aa8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001aaa:	b10b      	cbz	r3, 8001ab0 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8001aac:	4620      	mov	r0, r4
 8001aae:	4798      	blx	r3
}
 8001ab0:	b003      	add	sp, #12
 8001ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	1b4e81b5 	.word	0x1b4e81b5

08001abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac4:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac6:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	2503      	movs	r5, #3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001acc:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001c84 <HAL_GPIO_Init+0x1c8>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad0:	4c6a      	ldr	r4, [pc, #424]	; (8001c7c <HAL_GPIO_Init+0x1c0>)
 8001ad2:	e04b      	b.n	8001b6c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001ad4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad6:	fa05 fa02 	lsl.w	sl, r5, r2
 8001ada:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ade:	68cf      	ldr	r7, [r1, #12]
 8001ae0:	4097      	lsls	r7, r2
 8001ae2:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001ae6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001ae8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aea:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aee:	684f      	ldr	r7, [r1, #4]
 8001af0:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001af4:	409f      	lsls	r7, r3
 8001af6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001afa:	6047      	str	r7, [r0, #4]
 8001afc:	e044      	b.n	8001b88 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	f04f 0c00 	mov.w	ip, #0
 8001b02:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001b06:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b0a:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 8001b0e:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b14:	684e      	ldr	r6, [r1, #4]
 8001b16:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	bf0c      	ite	eq
 8001b1c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001b20:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 8001b24:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001b26:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b28:	684e      	ldr	r6, [r1, #4]
 8001b2a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	bf0c      	ite	eq
 8001b30:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001b34:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 8001b38:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001b3a:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b3c:	684e      	ldr	r6, [r1, #4]
 8001b3e:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001b42:	bf0c      	ite	eq
 8001b44:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001b48:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 8001b4c:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b4e:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b50:	684e      	ldr	r6, [r1, #4]
 8001b52:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001b56:	bf0c      	ite	eq
 8001b58:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 8001b5c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 8001b60:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	3301      	adds	r3, #1
 8001b64:	3202      	adds	r2, #2
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	f000 8085 	beq.w	8001c76 <HAL_GPIO_Init+0x1ba>
    ioposition = 0x01U << position;
 8001b6c:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b70:	680f      	ldr	r7, [r1, #0]
 8001b72:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 8001b76:	ea3c 0607 	bics.w	r6, ip, r7
 8001b7a:	d1f2      	bne.n	8001b62 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7c:	684f      	ldr	r7, [r1, #4]
 8001b7e:	f007 0703 	and.w	r7, r7, #3
 8001b82:	3f01      	subs	r7, #1
 8001b84:	2f01      	cmp	r7, #1
 8001b86:	d9a5      	bls.n	8001ad4 <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b88:	684f      	ldr	r7, [r1, #4]
 8001b8a:	f007 0703 	and.w	r7, r7, #3
 8001b8e:	2f03      	cmp	r7, #3
 8001b90:	d024      	beq.n	8001bdc <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8001b92:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b94:	fa05 fc02 	lsl.w	ip, r5, r2
 8001b98:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9c:	688f      	ldr	r7, [r1, #8]
 8001b9e:	4097      	lsls	r7, r2
 8001ba0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 8001ba4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	684f      	ldr	r7, [r1, #4]
 8001ba8:	f007 0703 	and.w	r7, r7, #3
 8001bac:	2f02      	cmp	r7, #2
 8001bae:	d115      	bne.n	8001bdc <HAL_GPIO_Init+0x120>
        temp = GPIOx->AFR[position >> 3U];
 8001bb0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001bb4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8001bb8:	f8dc a020 	ldr.w	sl, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bbc:	f003 0707 	and.w	r7, r3, #7
 8001bc0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8001bc4:	270f      	movs	r7, #15
 8001bc6:	fa07 f70b 	lsl.w	r7, r7, fp
 8001bca:	ea2a 0a07 	bic.w	sl, sl, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bce:	690f      	ldr	r7, [r1, #16]
 8001bd0:	fa07 f70b 	lsl.w	r7, r7, fp
 8001bd4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001bd8:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 8001bdc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bde:	fa05 fc02 	lsl.w	ip, r5, r2
 8001be2:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be6:	684f      	ldr	r7, [r1, #4]
 8001be8:	f007 0703 	and.w	r7, r7, #3
 8001bec:	4097      	lsls	r7, r2
 8001bee:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 8001bf2:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf4:	684f      	ldr	r7, [r1, #4]
 8001bf6:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001bfa:	d0b2      	beq.n	8001b62 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfc:	2700      	movs	r7, #0
 8001bfe:	9701      	str	r7, [sp, #4]
 8001c00:	4e1f      	ldr	r6, [pc, #124]	; (8001c80 <HAL_GPIO_Init+0x1c4>)
 8001c02:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8001c04:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001c08:	6477      	str	r7, [r6, #68]	; 0x44
 8001c0a:	6c77      	ldr	r7, [r6, #68]	; 0x44
 8001c0c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001c10:	9701      	str	r7, [sp, #4]
 8001c12:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c14:	f023 0703 	bic.w	r7, r3, #3
 8001c18:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001c1c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001c20:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c24:	f003 0c03 	and.w	ip, r3, #3
 8001c28:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 8001c2c:	f04f 0c0f 	mov.w	ip, #15
 8001c30:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001c34:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c38:	4540      	cmp	r0, r8
 8001c3a:	f43f af60 	beq.w	8001afe <HAL_GPIO_Init+0x42>
 8001c3e:	f5a6 5650 	sub.w	r6, r6, #13312	; 0x3400
 8001c42:	42b0      	cmp	r0, r6
 8001c44:	d010      	beq.n	8001c68 <HAL_GPIO_Init+0x1ac>
 8001c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c4a:	42b0      	cmp	r0, r6
 8001c4c:	d00e      	beq.n	8001c6c <HAL_GPIO_Init+0x1b0>
 8001c4e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c52:	42b0      	cmp	r0, r6
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_Init+0x1b6>
 8001c56:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001c5a:	42b0      	cmp	r0, r6
 8001c5c:	bf0c      	ite	eq
 8001c5e:	f04f 0c04 	moveq.w	ip, #4
 8001c62:	f04f 0c07 	movne.w	ip, #7
 8001c66:	e74c      	b.n	8001b02 <HAL_GPIO_Init+0x46>
 8001c68:	46f4      	mov	ip, lr
 8001c6a:	e74a      	b.n	8001b02 <HAL_GPIO_Init+0x46>
 8001c6c:	f04f 0c02 	mov.w	ip, #2
 8001c70:	e747      	b.n	8001b02 <HAL_GPIO_Init+0x46>
 8001c72:	46ac      	mov	ip, r5
 8001c74:	e745      	b.n	8001b02 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001c76:	b003      	add	sp, #12
 8001c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c7c:	40013c00 	.word	0x40013c00
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000

08001c88 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	b10a      	cbz	r2, 8001c8e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	6181      	str	r1, [r0, #24]
 8001c8c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	0409      	lsls	r1, r1, #16
 8001c90:	6181      	str	r1, [r0, #24]
  }
}
 8001c92:	4770      	bx	lr

08001c94 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c94:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c96:	ea01 0203 	and.w	r2, r1, r3
 8001c9a:	ea21 0103 	bic.w	r1, r1, r3
 8001c9e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001ca2:	6181      	str	r1, [r0, #24]
}
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	f000 81e1 	beq.w	8002070 <HAL_RCC_OscConfig+0x3c8>
{
 8001cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	6803      	ldr	r3, [r0, #0]
 8001cb8:	f013 0f01 	tst.w	r3, #1
 8001cbc:	d03b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cbe:	4b9f      	ldr	r3, [pc, #636]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d02c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cca:	4b9c      	ldr	r3, [pc, #624]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d021      	beq.n	8001d1a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cdc:	d04f      	beq.n	8001d7e <HAL_RCC_OscConfig+0xd6>
 8001cde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce2:	d052      	beq.n	8001d8a <HAL_RCC_OscConfig+0xe2>
 8001ce4:	4b95      	ldr	r3, [pc, #596]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cf6:	6863      	ldr	r3, [r4, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d050      	beq.n	8001d9e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc22 	bl	8001544 <HAL_GetTick>
 8001d00:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	4e8e      	ldr	r6, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d04:	6833      	ldr	r3, [r6, #0]
 8001d06:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d0a:	d114      	bne.n	8001d36 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff fc1a 	bl	8001544 <HAL_GetTick>
 8001d10:	1b40      	subs	r0, r0, r5
 8001d12:	2864      	cmp	r0, #100	; 0x64
 8001d14:	d9f6      	bls.n	8001d04 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8001d16:	2003      	movs	r0, #3
 8001d18:	e1b1      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001d22:	d0d8      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001d2c:	d003      	beq.n	8001d36 <HAL_RCC_OscConfig+0x8e>
 8001d2e:	6863      	ldr	r3, [r4, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 819f 	beq.w	8002074 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	f013 0f02 	tst.w	r3, #2
 8001d3c:	d054      	beq.n	8001de8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f013 0f0c 	tst.w	r3, #12
 8001d46:	d03e      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d033      	beq.n	8001dbc <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d54:	68e3      	ldr	r3, [r4, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d068      	beq.n	8001e2c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d5a:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff fbf0 	bl	8001544 <HAL_GetTick>
 8001d64:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	4e75      	ldr	r6, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d68:	6833      	ldr	r3, [r6, #0]
 8001d6a:	f013 0f02 	tst.w	r3, #2
 8001d6e:	d154      	bne.n	8001e1a <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d70:	f7ff fbe8 	bl	8001544 <HAL_GetTick>
 8001d74:	1b40      	subs	r0, r0, r5
 8001d76:	2802      	cmp	r0, #2
 8001d78:	d9f6      	bls.n	8001d68 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 8001d7a:	2003      	movs	r0, #3
 8001d7c:	e17f      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7e:	4a6f      	ldr	r2, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d80:	6813      	ldr	r3, [r2, #0]
 8001d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	e7b5      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e>
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e7ab      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fbd1 	bl	8001544 <HAL_GetTick>
 8001da2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da4:	4e65      	ldr	r6, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001da6:	6833      	ldr	r3, [r6, #0]
 8001da8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001dac:	d0c3      	beq.n	8001d36 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dae:	f7ff fbc9 	bl	8001544 <HAL_GetTick>
 8001db2:	1b40      	subs	r0, r0, r5
 8001db4:	2864      	cmp	r0, #100	; 0x64
 8001db6:	d9f6      	bls.n	8001da6 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 8001db8:	2003      	movs	r0, #3
 8001dba:	e160      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001dc4:	d1c6      	bne.n	8001d54 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f013 0f02 	tst.w	r3, #2
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x130>
 8001dd0:	68e3      	ldr	r3, [r4, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	f040 8150 	bne.w	8002078 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001dda:	6813      	ldr	r3, [r2, #0]
 8001ddc:	6921      	ldr	r1, [r4, #16]
 8001dde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001de2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001de6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de8:	6823      	ldr	r3, [r4, #0]
 8001dea:	f013 0f08 	tst.w	r3, #8
 8001dee:	d042      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001df0:	6963      	ldr	r3, [r4, #20]
 8001df2:	b36b      	cbz	r3, 8001e50 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <HAL_RCC_OscConfig+0x298>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fba2 	bl	8001544 <HAL_GetTick>
 8001e00:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4e4e      	ldr	r6, [pc, #312]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001e04:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e06:	f013 0f02 	tst.w	r3, #2
 8001e0a:	d134      	bne.n	8001e76 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fb9a 	bl	8001544 <HAL_GetTick>
 8001e10:	1b40      	subs	r0, r0, r5
 8001e12:	2802      	cmp	r0, #2
 8001e14:	d9f6      	bls.n	8001e04 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8001e16:	2003      	movs	r0, #3
 8001e18:	e131      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1a:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001e1c:	6813      	ldr	r3, [r2, #0]
 8001e1e:	6921      	ldr	r1, [r4, #16]
 8001e20:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e24:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e7dd      	b.n	8001de8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001e2c:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <HAL_RCC_OscConfig+0x298>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e32:	f7ff fb87 	bl	8001544 <HAL_GetTick>
 8001e36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e38:	4e40      	ldr	r6, [pc, #256]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001e3a:	6833      	ldr	r3, [r6, #0]
 8001e3c:	f013 0f02 	tst.w	r3, #2
 8001e40:	d0d2      	beq.n	8001de8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff fb7f 	bl	8001544 <HAL_GetTick>
 8001e46:	1b40      	subs	r0, r0, r5
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	d9f6      	bls.n	8001e3a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	e116      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e50:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_OscConfig+0x298>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff fb74 	bl	8001544 <HAL_GetTick>
 8001e5c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	4e37      	ldr	r6, [pc, #220]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001e60:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001e62:	f013 0f02 	tst.w	r3, #2
 8001e66:	d006      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fb6c 	bl	8001544 <HAL_GetTick>
 8001e6c:	1b40      	subs	r0, r0, r5
 8001e6e:	2802      	cmp	r0, #2
 8001e70:	d9f6      	bls.n	8001e60 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8001e72:	2003      	movs	r0, #3
 8001e74:	e103      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	f013 0f04 	tst.w	r3, #4
 8001e7c:	d076      	beq.n	8001f6c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e86:	d133      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ea0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_OscConfig+0x29c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001eaa:	d023      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eac:	68a3      	ldr	r3, [r4, #8]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d034      	beq.n	8001f1c <HAL_RCC_OscConfig+0x274>
 8001eb2:	2b05      	cmp	r3, #5
 8001eb4:	d038      	beq.n	8001f28 <HAL_RCC_OscConfig+0x280>
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	671a      	str	r2, [r3, #112]	; 0x70
 8001ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ec2:	f022 0204 	bic.w	r2, r2, #4
 8001ec6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec8:	68a3      	ldr	r3, [r4, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d03c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff fb39 	bl	8001544 <HAL_GetTick>
 8001ed2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4f19      	ldr	r7, [pc, #100]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001edc:	f013 0f02 	tst.w	r3, #2
 8001ee0:	d143      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fb2f 	bl	8001544 <HAL_GetTick>
 8001ee6:	1b80      	subs	r0, r0, r6
 8001ee8:	4540      	cmp	r0, r8
 8001eea:	d9f6      	bls.n	8001eda <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8001eec:	2003      	movs	r0, #3
 8001eee:	e0c6      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	e7d6      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef4:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x29c>)
 8001ef6:	6813      	ldr	r3, [r2, #0]
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001efe:	f7ff fb21 	bl	8001544 <HAL_GetTick>
 8001f02:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4f0f      	ldr	r7, [pc, #60]	; (8001f44 <HAL_RCC_OscConfig+0x29c>)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f0c:	d1ce      	bne.n	8001eac <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0e:	f7ff fb19 	bl	8001544 <HAL_GetTick>
 8001f12:	1b80      	subs	r0, r0, r6
 8001f14:	2802      	cmp	r0, #2
 8001f16:	d9f6      	bls.n	8001f06 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8001f18:	2003      	movs	r0, #3
 8001f1a:	e0b0      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001f1e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	e7cf      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <HAL_RCC_OscConfig+0x294>)
 8001f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f2c:	f042 0204 	orr.w	r2, r2, #4
 8001f30:	671a      	str	r2, [r3, #112]	; 0x70
 8001f32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	671a      	str	r2, [r3, #112]	; 0x70
 8001f3a:	e7c5      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	42470000 	.word	0x42470000
 8001f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fafc 	bl	8001544 <HAL_GetTick>
 8001f4c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	4f52      	ldr	r7, [pc, #328]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f56:	f013 0f02 	tst.w	r3, #2
 8001f5a:	d006      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff faf2 	bl	8001544 <HAL_GetTick>
 8001f60:	1b80      	subs	r0, r0, r6
 8001f62:	4540      	cmp	r0, r8
 8001f64:	d9f6      	bls.n	8001f54 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8001f66:	2003      	movs	r0, #3
 8001f68:	e089      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f6a:	b9ed      	cbnz	r5, 8001fa8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6c:	69a3      	ldr	r3, [r4, #24]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8084 	beq.w	800207c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f74:	4a48      	ldr	r2, [pc, #288]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 8001f76:	6892      	ldr	r2, [r2, #8]
 8001f78:	f002 020c 	and.w	r2, r2, #12
 8001f7c:	2a08      	cmp	r2, #8
 8001f7e:	d051      	beq.n	8002024 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d017      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b45      	ldr	r3, [pc, #276]	; (800209c <HAL_RCC_OscConfig+0x3f4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7ff fadb 	bl	8001544 <HAL_GetTick>
 8001f8e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f90:	4d41      	ldr	r5, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 8001f92:	682b      	ldr	r3, [r5, #0]
 8001f94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f98:	d042      	beq.n	8002020 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff fad3 	bl	8001544 <HAL_GetTick>
 8001f9e:	1b00      	subs	r0, r0, r4
 8001fa0:	2802      	cmp	r0, #2
 8001fa2:	d9f6      	bls.n	8001f92 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	e06a      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa8:	4a3b      	ldr	r2, [pc, #236]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 8001faa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb2:	e7db      	b.n	8001f6c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <HAL_RCC_OscConfig+0x3f4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001fba:	f7ff fac3 	bl	8001544 <HAL_GetTick>
 8001fbe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc0:	4e35      	ldr	r6, [pc, #212]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 8001fc2:	6833      	ldr	r3, [r6, #0]
 8001fc4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fc8:	d006      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fabb 	bl	8001544 <HAL_GetTick>
 8001fce:	1b40      	subs	r0, r0, r5
 8001fd0:	2802      	cmp	r0, #2
 8001fd2:	d9f6      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	e052      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd8:	69e3      	ldr	r3, [r4, #28]
 8001fda:	6a22      	ldr	r2, [r4, #32]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fe0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001fe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001fe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001fea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001fec:	0852      	lsrs	r2, r2, #1
 8001fee:	3a01      	subs	r2, #1
 8001ff0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ff4:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 8001ff6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_RCC_OscConfig+0x3f4>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001ffe:	f7ff faa1 	bl	8001544 <HAL_GetTick>
 8002002:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002004:	4d24      	ldr	r5, [pc, #144]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800200c:	d106      	bne.n	800201c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800200e:	f7ff fa99 	bl	8001544 <HAL_GetTick>
 8002012:	1b00      	subs	r0, r0, r4
 8002014:	2802      	cmp	r0, #2
 8002016:	d9f6      	bls.n	8002006 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002018:	2003      	movs	r0, #3
 800201a:	e030      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800201c:	2000      	movs	r0, #0
 800201e:	e02e      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
 8002020:	2000      	movs	r0, #0
 8002022:	e02c      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	2b01      	cmp	r3, #1
 8002026:	d02d      	beq.n	8002084 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCC_OscConfig+0x3f0>)
 800202a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002030:	69e2      	ldr	r2, [r4, #28]
 8002032:	4291      	cmp	r1, r2
 8002034:	d128      	bne.n	8002088 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002036:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	6a21      	ldr	r1, [r4, #32]
 800203c:	428a      	cmp	r2, r1
 800203e:	d125      	bne.n	800208c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002040:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002042:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002046:	401a      	ands	r2, r3
 8002048:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800204c:	d120      	bne.n	8002090 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800204e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002052:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002054:	0852      	lsrs	r2, r2, #1
 8002056:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002058:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800205c:	d11a      	bne.n	8002094 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800205e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002060:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002064:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002068:	bf14      	ite	ne
 800206a:	2001      	movne	r0, #1
 800206c:	2000      	moveq	r0, #0
 800206e:	e006      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8002070:	2001      	movs	r0, #1
}
 8002072:	4770      	bx	lr
        return HAL_ERROR;
 8002074:	2001      	movs	r0, #1
 8002076:	e002      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 800207c:	2000      	movs	r0, #0
}
 800207e:	b002      	add	sp, #8
 8002080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002084:	2001      	movs	r0, #1
 8002086:	e7fa      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8002088:	2001      	movs	r0, #1
 800208a:	e7f8      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
 800208c:	2001      	movs	r0, #1
 800208e:	e7f6      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
 8002090:	2001      	movs	r0, #1
 8002092:	e7f4      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
 8002094:	2001      	movs	r0, #1
 8002096:	e7f2      	b.n	800207e <HAL_RCC_OscConfig+0x3d6>
 8002098:	40023800 	.word	0x40023800
 800209c:	42470000 	.word	0x42470000

080020a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a2:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d03f      	beq.n	800212e <HAL_RCC_GetSysClockFreq+0x8e>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d13f      	bne.n	8002132 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020c0:	d012      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c2:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80020ca:	481c      	ldr	r0, [pc, #112]	; (800213c <HAL_RCC_GetSysClockFreq+0x9c>)
 80020cc:	2300      	movs	r3, #0
 80020ce:	fba1 0100 	umull	r0, r1, r1, r0
 80020d2:	f7fe fd63 	bl	8000b9c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80020e2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80020e6:	e025      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80020f0:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80020f4:	ebb1 000c 	subs.w	r0, r1, ip
 80020f8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80020fc:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002100:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002104:	0181      	lsls	r1, r0, #6
 8002106:	1a09      	subs	r1, r1, r0
 8002108:	eb63 030e 	sbc.w	r3, r3, lr
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002112:	00c9      	lsls	r1, r1, #3
 8002114:	eb11 0c0c 	adds.w	ip, r1, ip
 8002118:	f143 0300 	adc.w	r3, r3, #0
 800211c:	0299      	lsls	r1, r3, #10
 800211e:	2300      	movs	r3, #0
 8002120:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002124:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002128:	f7fe fd38 	bl	8000b9c <__aeabi_uldivmod>
 800212c:	e7d3      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x36>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800212e:	4803      	ldr	r0, [pc, #12]	; (800213c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002130:	e000      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x94>
      sysclockfreq = HSI_VALUE;
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002134:	bd08      	pop	{r3, pc}
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	017d7840 	.word	0x017d7840
 8002140:	00f42400 	.word	0x00f42400

08002144 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002144:	2800      	cmp	r0, #0
 8002146:	f000 809d 	beq.w	8002284 <HAL_RCC_ClockConfig+0x140>
{
 800214a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800214e:	460d      	mov	r5, r1
 8002150:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002152:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_RCC_ClockConfig+0x150>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	428b      	cmp	r3, r1
 800215c:	d208      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	b2cb      	uxtb	r3, r1
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_RCC_ClockConfig+0x150>)
 8002162:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	6813      	ldr	r3, [r2, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	428b      	cmp	r3, r1
 800216c:	f040 808c 	bne.w	8002288 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002170:	6823      	ldr	r3, [r4, #0]
 8002172:	f013 0f02 	tst.w	r3, #2
 8002176:	d017      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	f013 0f04 	tst.w	r3, #4
 800217c:	d004      	beq.n	8002188 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217e:	4a46      	ldr	r2, [pc, #280]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 8002180:	6893      	ldr	r3, [r2, #8]
 8002182:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002186:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	f013 0f08 	tst.w	r3, #8
 800218e:	d004      	beq.n	800219a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002190:	4a41      	ldr	r2, [pc, #260]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 8002192:	6893      	ldr	r3, [r2, #8]
 8002194:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002198:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219a:	4a3f      	ldr	r2, [pc, #252]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 800219c:	6893      	ldr	r3, [r2, #8]
 800219e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a2:	68a1      	ldr	r1, [r4, #8]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	f013 0f01 	tst.w	r3, #1
 80021ae:	d032      	beq.n	8002216 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b0:	6862      	ldr	r2, [r4, #4]
 80021b2:	2a01      	cmp	r2, #1
 80021b4:	d021      	beq.n	80021fa <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021b6:	1e93      	subs	r3, r2, #2
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d925      	bls.n	8002208 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f013 0f02 	tst.w	r3, #2
 80021c4:	d062      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c6:	4934      	ldr	r1, [pc, #208]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 80021c8:	688b      	ldr	r3, [r1, #8]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80021d2:	f7ff f9b7 	bl	8001544 <HAL_GetTick>
 80021d6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d8:	4f2f      	ldr	r7, [pc, #188]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	6862      	ldr	r2, [r4, #4]
 80021e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80021ea:	d014      	beq.n	8002216 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ec:	f7ff f9aa 	bl	8001544 <HAL_GetTick>
 80021f0:	1b80      	subs	r0, r0, r6
 80021f2:	4540      	cmp	r0, r8
 80021f4:	d9f3      	bls.n	80021de <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 80021f6:	2003      	movs	r0, #3
 80021f8:	e042      	b.n	8002280 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002202:	d1e0      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002204:	2001      	movs	r0, #1
 8002206:	e03b      	b.n	8002280 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002208:	4b23      	ldr	r3, [pc, #140]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002210:	d1d9      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002212:	2001      	movs	r0, #1
 8002214:	e034      	b.n	8002280 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_RCC_ClockConfig+0x150>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	42ab      	cmp	r3, r5
 8002220:	d907      	bls.n	8002232 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	b2ea      	uxtb	r2, r5
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_ClockConfig+0x150>)
 8002226:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	42ab      	cmp	r3, r5
 8002230:	d12e      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	f013 0f04 	tst.w	r3, #4
 8002238:	d006      	beq.n	8002248 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800223a:	4a17      	ldr	r2, [pc, #92]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 800223c:	6893      	ldr	r3, [r2, #8]
 800223e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002242:	68e1      	ldr	r1, [r4, #12]
 8002244:	430b      	orrs	r3, r1
 8002246:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	f013 0f08 	tst.w	r3, #8
 800224e:	d007      	beq.n	8002260 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 8002252:	6893      	ldr	r3, [r2, #8]
 8002254:	6921      	ldr	r1, [r4, #16]
 8002256:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800225a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800225e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002260:	f7ff ff1e 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_RCC_ClockConfig+0x154>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800226c:	4a0b      	ldr	r2, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x158>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	40d8      	lsrs	r0, r3
 8002272:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x15c>)
 8002274:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_ClockConfig+0x160>)
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	f7ff f917 	bl	80014ac <HAL_InitTick>
  return HAL_OK;
 800227e:	2000      	movs	r0, #0
}
 8002280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002284:	2001      	movs	r0, #1
}
 8002286:	4770      	bx	lr
      return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	e7f9      	b.n	8002280 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	e7f7      	b.n	8002280 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 8002290:	2001      	movs	r0, #1
 8002292:	e7f5      	b.n	8002280 <HAL_RCC_ClockConfig+0x13c>
 8002294:	40023c00 	.word	0x40023c00
 8002298:	40023800 	.word	0x40023800
 800229c:	08006910 	.word	0x08006910
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000008 	.word	0x20000008

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x14>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	4a03      	ldr	r2, [pc, #12]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022b6:	6810      	ldr	r0, [r2, #0]
}
 80022b8:	40d8      	lsrs	r0, r3
 80022ba:	4770      	bx	lr
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08006920 	.word	0x08006920
 80022c4:	20000000 	.word	0x20000000

080022c8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022c8:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x14>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022d6:	6810      	ldr	r0, [r2, #0]
}
 80022d8:	40d8      	lsrs	r0, r3
 80022da:	4770      	bx	lr
 80022dc:	40023800 	.word	0x40023800
 80022e0:	08006920 	.word	0x08006920
 80022e4:	20000000 	.word	0x20000000

080022e8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022e8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ea:	f102 030c 	add.w	r3, r2, #12
 80022ee:	e853 3f00 	ldrex	r3, [r3]
 80022f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	320c      	adds	r2, #12
 80022f8:	e842 3100 	strex	r1, r3, [r2]
 80022fc:	2900      	cmp	r1, #0
 80022fe:	d1f3      	bne.n	80022e8 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002300:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	f102 0314 	add.w	r3, r2, #20
 8002306:	e853 3f00 	ldrex	r3, [r3]
 800230a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230e:	3214      	adds	r2, #20
 8002310:	e842 3100 	strex	r1, r3, [r2]
 8002314:	2900      	cmp	r1, #0
 8002316:	d1f3      	bne.n	8002300 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002318:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800231e:	2320      	movs	r3, #32
 8002320:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002324:	2300      	movs	r3, #0
 8002326:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002328:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800232a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232c:	f102 030c 	add.w	r3, r2, #12
 8002330:	e853 3f00 	ldrex	r3, [r3]
 8002334:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002338:	320c      	adds	r2, #12
 800233a:	e842 3100 	strex	r1, r3, [r2]
 800233e:	2900      	cmp	r1, #0
 8002340:	d1f3      	bne.n	800232a <UART_EndRxTransfer+0x42>
 8002342:	e7ec      	b.n	800231e <UART_EndRxTransfer+0x36>

08002344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002348:	6802      	ldr	r2, [r0, #0]
 800234a:	6913      	ldr	r3, [r2, #16]
 800234c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002350:	68c1      	ldr	r1, [r0, #12]
 8002352:	430b      	orrs	r3, r1
 8002354:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002356:	6801      	ldr	r1, [r0, #0]
 8002358:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235a:	6883      	ldr	r3, [r0, #8]
 800235c:	6900      	ldr	r0, [r0, #16]
 800235e:	4303      	orrs	r3, r0
 8002360:	6960      	ldr	r0, [r4, #20]
 8002362:	4303      	orrs	r3, r0
 8002364:	69e0      	ldr	r0, [r4, #28]
 8002366:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002368:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 800236c:	f022 020c 	bic.w	r2, r2, #12
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002374:	6822      	ldr	r2, [r4, #0]
 8002376:	6953      	ldr	r3, [r2, #20]
 8002378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800237c:	69a1      	ldr	r1, [r4, #24]
 800237e:	430b      	orrs	r3, r1
 8002380:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <UART_SetConfig+0xfc>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d006      	beq.n	8002398 <UART_SetConfig+0x54>
 800238a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800238e:	4293      	cmp	r3, r2
 8002390:	d002      	beq.n	8002398 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002392:	f7ff ff89 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8002396:	e001      	b.n	800239c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002398:	f7ff ff96 	bl	80022c8 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239c:	69e3      	ldr	r3, [r4, #28]
 800239e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023a2:	d024      	beq.n	80023ee <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a4:	2100      	movs	r1, #0
 80023a6:	1803      	adds	r3, r0, r0
 80023a8:	4149      	adcs	r1, r1
 80023aa:	181b      	adds	r3, r3, r0
 80023ac:	f141 0100 	adc.w	r1, r1, #0
 80023b0:	00c9      	lsls	r1, r1, #3
 80023b2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1818      	adds	r0, r3, r0
 80023ba:	6863      	ldr	r3, [r4, #4]
 80023bc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80023c0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80023c4:	f141 0100 	adc.w	r1, r1, #0
 80023c8:	f7fe fbe8 	bl	8000b9c <__aeabi_uldivmod>
 80023cc:	6821      	ldr	r1, [r4, #0]
 80023ce:	4a1d      	ldr	r2, [pc, #116]	; (8002444 <UART_SetConfig+0x100>)
 80023d0:	fba2 4300 	umull	r4, r3, r2, r0
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	2464      	movs	r4, #100	; 0x64
 80023d8:	fb04 0013 	mls	r0, r4, r3, r0
 80023dc:	0100      	lsls	r0, r0, #4
 80023de:	3032      	adds	r0, #50	; 0x32
 80023e0:	fba2 2000 	umull	r2, r0, r2, r0
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80023ea:	6088      	str	r0, [r1, #8]
  }
}
 80023ec:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ee:	2300      	movs	r3, #0
 80023f0:	1802      	adds	r2, r0, r0
 80023f2:	eb43 0103 	adc.w	r1, r3, r3
 80023f6:	1812      	adds	r2, r2, r0
 80023f8:	f141 0100 	adc.w	r1, r1, #0
 80023fc:	00c9      	lsls	r1, r1, #3
 80023fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002402:	00d2      	lsls	r2, r2, #3
 8002404:	1810      	adds	r0, r2, r0
 8002406:	f141 0100 	adc.w	r1, r1, #0
 800240a:	6862      	ldr	r2, [r4, #4]
 800240c:	1892      	adds	r2, r2, r2
 800240e:	415b      	adcs	r3, r3
 8002410:	f7fe fbc4 	bl	8000b9c <__aeabi_uldivmod>
 8002414:	4d0b      	ldr	r5, [pc, #44]	; (8002444 <UART_SetConfig+0x100>)
 8002416:	fba5 3200 	umull	r3, r2, r5, r0
 800241a:	0951      	lsrs	r1, r2, #5
 800241c:	2364      	movs	r3, #100	; 0x64
 800241e:	fb03 0311 	mls	r3, r3, r1, r0
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	3332      	adds	r3, #50	; 0x32
 8002426:	fba5 2303 	umull	r2, r3, r5, r3
 800242a:	6820      	ldr	r0, [r4, #0]
 800242c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002430:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800243a:	4413      	add	r3, r2
 800243c:	6083      	str	r3, [r0, #8]
 800243e:	e7d5      	b.n	80023ec <UART_SetConfig+0xa8>
 8002440:	40011000 	.word	0x40011000
 8002444:	51eb851f 	.word	0x51eb851f

08002448 <HAL_UART_Init>:
  if (huart == NULL)
 8002448:	b358      	cbz	r0, 80024a2 <HAL_UART_Init+0x5a>
{
 800244a:	b510      	push	{r4, lr}
 800244c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002452:	b30b      	cbz	r3, 8002498 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002454:	2324      	movs	r3, #36	; 0x24
 8002456:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800245a:	6822      	ldr	r2, [r4, #0]
 800245c:	68d3      	ldr	r3, [r2, #12]
 800245e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002462:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002464:	4620      	mov	r0, r4
 8002466:	f7ff ff6d 	bl	8002344 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	6913      	ldr	r3, [r2, #16]
 800246e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002472:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002474:	6822      	ldr	r2, [r4, #0]
 8002476:	6953      	ldr	r3, [r2, #20]
 8002478:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800247c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800247e:	6822      	ldr	r2, [r4, #0]
 8002480:	68d3      	ldr	r3, [r2, #12]
 8002482:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002486:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002488:	2000      	movs	r0, #0
 800248a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800248c:	2320      	movs	r3, #32
 800248e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002492:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002496:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002498:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800249c:	f7fe fed6 	bl	800124c <HAL_UART_MspInit>
 80024a0:	e7d8      	b.n	8002454 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 80024a2:	2001      	movs	r0, #1
}
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_UART_Transmit_DMA>:
{
 80024a8:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80024aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d138      	bne.n	8002526 <HAL_UART_Transmit_DMA+0x7e>
 80024b4:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d037      	beq.n	800252a <HAL_UART_Transmit_DMA+0x82>
 80024ba:	2a00      	cmp	r2, #0
 80024bc:	d037      	beq.n	800252e <HAL_UART_Transmit_DMA+0x86>
    __HAL_LOCK(huart);
 80024be:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d035      	beq.n	8002532 <HAL_UART_Transmit_DMA+0x8a>
 80024c6:	2301      	movs	r3, #1
 80024c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->pTxBuffPtr = pData;
 80024cc:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 80024ce:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80024d0:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024d2:	2500      	movs	r5, #0
 80024d4:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d6:	2321      	movs	r3, #33	; 0x21
 80024d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80024dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024de:	4816      	ldr	r0, [pc, #88]	; (8002538 <HAL_UART_Transmit_DMA+0x90>)
 80024e0:	63d8      	str	r0, [r3, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80024e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024e4:	4815      	ldr	r0, [pc, #84]	; (800253c <HAL_UART_Transmit_DMA+0x94>)
 80024e6:	6418      	str	r0, [r3, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80024e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024ea:	4815      	ldr	r0, [pc, #84]	; (8002540 <HAL_UART_Transmit_DMA+0x98>)
 80024ec:	64d8      	str	r0, [r3, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80024ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024f0:	651d      	str	r5, [r3, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80024f2:	6820      	ldr	r0, [r4, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	1d02      	adds	r2, r0, #4
 80024f8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80024fa:	f7ff f94b 	bl	8001794 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002504:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 8002506:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800250a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800250c:	f102 0314 	add.w	r3, r2, #20
 8002510:	e853 3f00 	ldrex	r3, [r3]
 8002514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002518:	3214      	adds	r2, #20
 800251a:	e842 3100 	strex	r1, r3, [r2]
 800251e:	2900      	cmp	r1, #0
 8002520:	d1f3      	bne.n	800250a <HAL_UART_Transmit_DMA+0x62>
    return HAL_OK;
 8002522:	2000      	movs	r0, #0
 8002524:	e000      	b.n	8002528 <HAL_UART_Transmit_DMA+0x80>
    return HAL_BUSY;
 8002526:	2002      	movs	r0, #2
}
 8002528:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
 800252c:	e7fc      	b.n	8002528 <HAL_UART_Transmit_DMA+0x80>
 800252e:	2001      	movs	r0, #1
 8002530:	e7fa      	b.n	8002528 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8002532:	2002      	movs	r0, #2
 8002534:	e7f8      	b.n	8002528 <HAL_UART_Transmit_DMA+0x80>
 8002536:	bf00      	nop
 8002538:	08002547 	.word	0x08002547
 800253c:	08002595 	.word	0x08002595
 8002540:	080025a5 	.word	0x080025a5

08002544 <HAL_UART_TxCpltCallback>:
}
 8002544:	4770      	bx	lr

08002546 <UART_DMATransmitCplt>:
{
 8002546:	b508      	push	{r3, lr}
 8002548:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800254a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002554:	d11a      	bne.n	800258c <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8002556:	2300      	movs	r3, #0
 8002558:	84c3      	strh	r3, [r0, #38]	; 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800255a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255c:	f102 0314 	add.w	r3, r2, #20
 8002560:	e853 3f00 	ldrex	r3, [r3]
 8002564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002568:	3214      	adds	r2, #20
 800256a:	e842 3100 	strex	r1, r3, [r2]
 800256e:	2900      	cmp	r1, #0
 8002570:	d1f3      	bne.n	800255a <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002572:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	f102 030c 	add.w	r3, r2, #12
 8002578:	e853 3f00 	ldrex	r3, [r3]
 800257c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002580:	320c      	adds	r2, #12
 8002582:	e842 3100 	strex	r1, r3, [r2]
 8002586:	2900      	cmp	r1, #0
 8002588:	d1f3      	bne.n	8002572 <UART_DMATransmitCplt+0x2c>
}
 800258a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800258c:	f7ff ffda 	bl	8002544 <HAL_UART_TxCpltCallback>
}
 8002590:	e7fb      	b.n	800258a <UART_DMATransmitCplt+0x44>

08002592 <HAL_UART_TxHalfCpltCallback>:
}
 8002592:	4770      	bx	lr

08002594 <UART_DMATxHalfCplt>:
{
 8002594:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002596:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002598:	f7ff fffb 	bl	8002592 <HAL_UART_TxHalfCpltCallback>
}
 800259c:	bd08      	pop	{r3, pc}

0800259e <HAL_UART_RxCpltCallback>:
}
 800259e:	4770      	bx	lr

080025a0 <HAL_UART_RxHalfCpltCallback>:
}
 80025a0:	4770      	bx	lr

080025a2 <HAL_UART_ErrorCallback>:
}
 80025a2:	4770      	bx	lr

080025a4 <UART_DMAError>:
{
 80025a4:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b21      	cmp	r3, #33	; 0x21
 80025b4:	d00e      	beq.n	80025d4 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025ba:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b22      	cmp	r3, #34	; 0x22
 80025c2:	d01c      	beq.n	80025fe <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ffe8 	bl	80025a2 <HAL_UART_ErrorCallback>
}
 80025d2:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025d4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80025d8:	d0ed      	beq.n	80025b6 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	84e3      	strh	r3, [r4, #38]	; 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80025de:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	f102 030c 	add.w	r3, r2, #12
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	320c      	adds	r2, #12
 80025ee:	e842 3100 	strex	r1, r3, [r2]
 80025f2:	2900      	cmp	r1, #0
 80025f4:	d1f3      	bne.n	80025de <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 80025f6:	2320      	movs	r3, #32
 80025f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80025fc:	e7db      	b.n	80025b6 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002602:	d0df      	beq.n	80025c4 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8002604:	2300      	movs	r3, #0
 8002606:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fe6d 	bl	80022e8 <UART_EndRxTransfer>
 800260e:	e7d9      	b.n	80025c4 <UART_DMAError+0x20>

08002610 <UART_DMAAbortOnError>:
{
 8002610:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002612:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002618:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800261a:	f7ff ffc2 	bl	80025a2 <HAL_UART_ErrorCallback>
}
 800261e:	bd08      	pop	{r3, pc}

08002620 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002620:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b22      	cmp	r3, #34	; 0x22
 8002628:	d11e      	bne.n	8002668 <UART_Receive_IT+0x48>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262a:	6883      	ldr	r3, [r0, #8]
 800262c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002630:	d006      	beq.n	8002640 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002632:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002634:	b183      	cbz	r3, 8002658 <UART_Receive_IT+0x38>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800263e:	e01b      	b.n	8002678 <UART_Receive_IT+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002640:	6903      	ldr	r3, [r0, #16]
 8002642:	b9ab      	cbnz	r3, 8002670 <UART_Receive_IT+0x50>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002644:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002646:	6803      	ldr	r3, [r0, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002650:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002652:	3302      	adds	r3, #2
 8002654:	6283      	str	r3, [r0, #40]	; 0x28
 8002656:	e013      	b.n	8002680 <UART_Receive_IT+0x60>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002658:	6903      	ldr	r3, [r0, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1eb      	bne.n	8002636 <UART_Receive_IT+0x16>
 800265e:	e008      	b.n	8002672 <UART_Receive_IT+0x52>
        HAL_UART_RxCpltCallback(huart);
 8002660:	f7ff ff9d 	bl	800259e <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8002664:	2000      	movs	r0, #0
 8002666:	e046      	b.n	80026f6 <UART_Receive_IT+0xd6>
    return HAL_BUSY;
 8002668:	2002      	movs	r0, #2
 800266a:	4770      	bx	lr
    return HAL_OK;
 800266c:	2000      	movs	r0, #0
}
 800266e:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002670:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800267a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800267c:	3301      	adds	r3, #1
 800267e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002680:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002682:	3b01      	subs	r3, #1
 8002684:	b29b      	uxth	r3, r3
 8002686:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ef      	bne.n	800266c <UART_Receive_IT+0x4c>
{
 800268c:	b500      	push	{lr}
 800268e:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002690:	6802      	ldr	r2, [r0, #0]
 8002692:	68d3      	ldr	r3, [r2, #12]
 8002694:	f023 0320 	bic.w	r3, r3, #32
 8002698:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800269a:	6802      	ldr	r2, [r0, #0]
 800269c:	68d3      	ldr	r3, [r2, #12]
 800269e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026a2:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	6953      	ldr	r3, [r2, #20]
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026ae:	2320      	movs	r3, #32
 80026b0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d1d2      	bne.n	8002660 <UART_Receive_IT+0x40>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ba:	2300      	movs	r3, #0
 80026bc:	6303      	str	r3, [r0, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026be:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c0:	f102 030c 	add.w	r3, r2, #12
 80026c4:	e853 3f00 	ldrex	r3, [r3]
 80026c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026cc:	320c      	adds	r2, #12
 80026ce:	e842 3100 	strex	r1, r3, [r2]
 80026d2:	2900      	cmp	r1, #0
 80026d4:	d1f3      	bne.n	80026be <UART_Receive_IT+0x9e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026d6:	6803      	ldr	r3, [r0, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f012 0f10 	tst.w	r2, #16
 80026de:	d006      	beq.n	80026ee <UART_Receive_IT+0xce>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026e0:	2200      	movs	r2, #0
 80026e2:	9201      	str	r2, [sp, #4]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	9201      	str	r2, [sp, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026ee:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80026f0:	f7fe fd72 	bl	80011d8 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80026f4:	2000      	movs	r0, #0
}
 80026f6:	b003      	add	sp, #12
 80026f8:	f85d fb04 	ldr.w	pc, [sp], #4

080026fc <HAL_UART_IRQHandler>:
{
 80026fc:	b510      	push	{r4, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002702:	6802      	ldr	r2, [r0, #0]
 8002704:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002706:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002708:	6950      	ldr	r0, [r2, #20]
  if (errorflags == RESET)
 800270a:	f013 0f0f 	tst.w	r3, #15
 800270e:	d109      	bne.n	8002724 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002710:	f013 0f20 	tst.w	r3, #32
 8002714:	d00d      	beq.n	8002732 <HAL_UART_IRQHandler+0x36>
 8002716:	f011 0f20 	tst.w	r1, #32
 800271a:	d00a      	beq.n	8002732 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ff7f 	bl	8002620 <UART_Receive_IT>
      return;
 8002722:	e017      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002724:	f000 0001 	and.w	r0, r0, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002728:	f401 7c90 	and.w	ip, r1, #288	; 0x120
 800272c:	ea5c 0c00 	orrs.w	ip, ip, r0
 8002730:	d112      	bne.n	8002758 <HAL_UART_IRQHandler+0x5c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002732:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002734:	2801      	cmp	r0, #1
 8002736:	d07f      	beq.n	8002838 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002738:	f013 0f80 	tst.w	r3, #128	; 0x80
 800273c:	d003      	beq.n	8002746 <HAL_UART_IRQHandler+0x4a>
 800273e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002742:	f040 8116 	bne.w	8002972 <HAL_UART_IRQHandler+0x276>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002746:	f013 0f40 	tst.w	r3, #64	; 0x40
 800274a:	d003      	beq.n	8002754 <HAL_UART_IRQHandler+0x58>
 800274c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002750:	f040 813c 	bne.w	80029cc <HAL_UART_IRQHandler+0x2d0>
}
 8002754:	b002      	add	sp, #8
 8002756:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002758:	f013 0f01 	tst.w	r3, #1
 800275c:	d006      	beq.n	800276c <HAL_UART_IRQHandler+0x70>
 800275e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8002762:	d003      	beq.n	800276c <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002764:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800276c:	f013 0f04 	tst.w	r3, #4
 8002770:	d02f      	beq.n	80027d2 <HAL_UART_IRQHandler+0xd6>
 8002772:	b158      	cbz	r0, 800278c <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002776:	f042 0202 	orr.w	r2, r2, #2
 800277a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800277c:	f013 0f02 	tst.w	r3, #2
 8002780:	f000 812f 	beq.w	80029e2 <HAL_UART_IRQHandler+0x2e6>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002784:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002786:	f042 0204 	orr.w	r2, r2, #4
 800278a:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800278c:	f013 0f08 	tst.w	r3, #8
 8002790:	d007      	beq.n	80027a2 <HAL_UART_IRQHandler+0xa6>
 8002792:	f001 0220 	and.w	r2, r1, #32
 8002796:	4302      	orrs	r2, r0
 8002798:	d003      	beq.n	80027a2 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800279a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800279c:	f042 0208 	orr.w	r2, r2, #8
 80027a0:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027a4:	2a00      	cmp	r2, #0
 80027a6:	d0d5      	beq.n	8002754 <HAL_UART_IRQHandler+0x58>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a8:	f013 0f20 	tst.w	r3, #32
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_IRQHandler+0xb8>
 80027ae:	f011 0f20 	tst.w	r1, #32
 80027b2:	d114      	bne.n	80027de <HAL_UART_IRQHandler+0xe2>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027b4:	6823      	ldr	r3, [r4, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027ba:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	4313      	orrs	r3, r2
 80027c4:	d10f      	bne.n	80027e6 <HAL_UART_IRQHandler+0xea>
        HAL_UART_ErrorCallback(huart);
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff feeb 	bl	80025a2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	6423      	str	r3, [r4, #64]	; 0x40
 80027d0:	e7c0      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d2:	f013 0f02 	tst.w	r3, #2
 80027d6:	d0d9      	beq.n	800278c <HAL_UART_IRQHandler+0x90>
 80027d8:	2800      	cmp	r0, #0
 80027da:	d0d7      	beq.n	800278c <HAL_UART_IRQHandler+0x90>
 80027dc:	e7d2      	b.n	8002784 <HAL_UART_IRQHandler+0x88>
        UART_Receive_IT(huart);
 80027de:	4620      	mov	r0, r4
 80027e0:	f7ff ff1e 	bl	8002620 <UART_Receive_IT>
 80027e4:	e7e6      	b.n	80027b4 <HAL_UART_IRQHandler+0xb8>
        UART_EndRxTransfer(huart);
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fd7e 	bl	80022e8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027f4:	d01c      	beq.n	8002830 <HAL_UART_IRQHandler+0x134>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f8:	f102 0314 	add.w	r3, r2, #20
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002804:	3214      	adds	r2, #20
 8002806:	e842 3100 	strex	r1, r3, [r2]
 800280a:	2900      	cmp	r1, #0
 800280c:	d1f3      	bne.n	80027f6 <HAL_UART_IRQHandler+0xfa>
          if (huart->hdmarx != NULL)
 800280e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002810:	b153      	cbz	r3, 8002828 <HAL_UART_IRQHandler+0x12c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002812:	4a76      	ldr	r2, [pc, #472]	; (80029ec <HAL_UART_IRQHandler+0x2f0>)
 8002814:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002816:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002818:	f7ff f84f 	bl	80018ba <HAL_DMA_Abort_IT>
 800281c:	2800      	cmp	r0, #0
 800281e:	d099      	beq.n	8002754 <HAL_UART_IRQHandler+0x58>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002820:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002822:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002824:	4798      	blx	r3
 8002826:	e795      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
            HAL_UART_ErrorCallback(huart);
 8002828:	4620      	mov	r0, r4
 800282a:	f7ff feba 	bl	80025a2 <HAL_UART_ErrorCallback>
 800282e:	e791      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
          HAL_UART_ErrorCallback(huart);
 8002830:	4620      	mov	r0, r4
 8002832:	f7ff feb6 	bl	80025a2 <HAL_UART_ErrorCallback>
 8002836:	e78d      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002838:	f013 0f10 	tst.w	r3, #16
 800283c:	f43f af7c 	beq.w	8002738 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002840:	f011 0f10 	tst.w	r1, #16
 8002844:	f43f af78 	beq.w	8002738 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002848:	2300      	movs	r3, #0
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	6853      	ldr	r3, [r2, #4]
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002856:	6953      	ldr	r3, [r2, #20]
 8002858:	f013 0f40 	tst.w	r3, #64	; 0x40
 800285c:	d04f      	beq.n	80028fe <HAL_UART_IRQHandler+0x202>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800285e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002866:	2b00      	cmp	r3, #0
 8002868:	f43f af74 	beq.w	8002754 <HAL_UART_IRQHandler+0x58>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800286c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800286e:	4299      	cmp	r1, r3
 8002870:	f67f af70 	bls.w	8002754 <HAL_UART_IRQHandler+0x58>
        huart->RxXferCount = nb_remaining_rx_data;
 8002874:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002876:	69d3      	ldr	r3, [r2, #28]
 8002878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287c:	d037      	beq.n	80028ee <HAL_UART_IRQHandler+0x1f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800287e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	f102 030c 	add.w	r3, r2, #12
 8002884:	e853 3f00 	ldrex	r3, [r3]
 8002888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	320c      	adds	r2, #12
 800288e:	e842 3100 	strex	r1, r3, [r2]
 8002892:	2900      	cmp	r1, #0
 8002894:	d1f3      	bne.n	800287e <HAL_UART_IRQHandler+0x182>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002896:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	f102 0314 	add.w	r3, r2, #20
 800289c:	e853 3f00 	ldrex	r3, [r3]
 80028a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	3214      	adds	r2, #20
 80028a6:	e842 3100 	strex	r1, r3, [r2]
 80028aa:	2900      	cmp	r1, #0
 80028ac:	d1f3      	bne.n	8002896 <HAL_UART_IRQHandler+0x19a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b0:	f102 0314 	add.w	r3, r2, #20
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028bc:	3214      	adds	r2, #20
 80028be:	e842 3100 	strex	r1, r3, [r2]
 80028c2:	2900      	cmp	r1, #0
 80028c4:	d1f3      	bne.n	80028ae <HAL_UART_IRQHandler+0x1b2>
          huart->RxState = HAL_UART_STATE_READY;
 80028c6:	2320      	movs	r3, #32
 80028c8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028cc:	2300      	movs	r3, #0
 80028ce:	6323      	str	r3, [r4, #48]	; 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	f102 030c 	add.w	r3, r2, #12
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	320c      	adds	r2, #12
 80028e0:	e842 3100 	strex	r1, r3, [r2]
 80028e4:	2900      	cmp	r1, #0
 80028e6:	d1f3      	bne.n	80028d0 <HAL_UART_IRQHandler+0x1d4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80028ea:	f7fe ff9c 	bl	8001826 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ee:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80028f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80028f2:	1ac9      	subs	r1, r1, r3
 80028f4:	b289      	uxth	r1, r1
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe fc6e 	bl	80011d8 <HAL_UARTEx_RxEventCallback>
 80028fc:	e72a      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028fe:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002900:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8002902:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	f43f af24 	beq.w	8002754 <HAL_UART_IRQHandler+0x58>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800290c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8002912:	2900      	cmp	r1, #0
 8002914:	f43f af1e 	beq.w	8002754 <HAL_UART_IRQHandler+0x58>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002918:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800291a:	f102 030c 	add.w	r3, r2, #12
 800291e:	e853 3f00 	ldrex	r3, [r3]
 8002922:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002926:	320c      	adds	r2, #12
 8002928:	e842 3000 	strex	r0, r3, [r2]
 800292c:	2800      	cmp	r0, #0
 800292e:	d1f3      	bne.n	8002918 <HAL_UART_IRQHandler+0x21c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002930:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	f102 0314 	add.w	r3, r2, #20
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	3214      	adds	r2, #20
 8002940:	e842 3000 	strex	r0, r3, [r2]
 8002944:	2800      	cmp	r0, #0
 8002946:	d1f3      	bne.n	8002930 <HAL_UART_IRQHandler+0x234>
        huart->RxState = HAL_UART_STATE_READY;
 8002948:	2320      	movs	r3, #32
 800294a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294e:	2300      	movs	r3, #0
 8002950:	6323      	str	r3, [r4, #48]	; 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002952:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002954:	f102 030c 	add.w	r3, r2, #12
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	320c      	adds	r2, #12
 8002962:	e842 3000 	strex	r0, r3, [r2]
 8002966:	2800      	cmp	r0, #0
 8002968:	d1f3      	bne.n	8002952 <HAL_UART_IRQHandler+0x256>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800296a:	4620      	mov	r0, r4
 800296c:	f7fe fc34 	bl	80011d8 <HAL_UARTEx_RxEventCallback>
 8002970:	e6f0      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002972:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b21      	cmp	r3, #33	; 0x21
 800297a:	f47f aeeb 	bne.w	8002754 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297e:	68a3      	ldr	r3, [r4, #8]
 8002980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002984:	d016      	beq.n	80029b4 <HAL_UART_IRQHandler+0x2b8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002986:	6a23      	ldr	r3, [r4, #32]
 8002988:	1c59      	adds	r1, r3, #1
 800298a:	6221      	str	r1, [r4, #32]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8002990:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002992:	3b01      	subs	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f aedb 	bne.w	8002754 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800299e:	6822      	ldr	r2, [r4, #0]
 80029a0:	68d3      	ldr	r3, [r2, #12]
 80029a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	68d3      	ldr	r3, [r2, #12]
 80029ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029b0:	60d3      	str	r3, [r2, #12]
 80029b2:	e6cf      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	6923      	ldr	r3, [r4, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e5      	bne.n	8002986 <HAL_UART_IRQHandler+0x28a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ba:	6a23      	ldr	r3, [r4, #32]
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c2:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80029c4:	6a23      	ldr	r3, [r4, #32]
 80029c6:	3302      	adds	r3, #2
 80029c8:	6223      	str	r3, [r4, #32]
 80029ca:	e7e1      	b.n	8002990 <HAL_UART_IRQHandler+0x294>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029cc:	68d3      	ldr	r3, [r2, #12]
 80029ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029d2:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80029d4:	2320      	movs	r3, #32
 80029d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7ff fdb2 	bl	8002544 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80029e0:	e6b8      	b.n	8002754 <HAL_UART_IRQHandler+0x58>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029e2:	f013 0f08 	tst.w	r3, #8
 80029e6:	f47f aed8 	bne.w	800279a <HAL_UART_IRQHandler+0x9e>
 80029ea:	e6da      	b.n	80027a2 <HAL_UART_IRQHandler+0xa6>
 80029ec:	08002611 	.word	0x08002611

080029f0 <UART_DMARxHalfCplt>:
{
 80029f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d002      	beq.n	8002a00 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 80029fa:	f7ff fdd1 	bl	80025a0 <HAL_UART_RxHalfCpltCallback>
}
 80029fe:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a00:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002a02:	0849      	lsrs	r1, r1, #1
 8002a04:	f7fe fbe8 	bl	80011d8 <HAL_UARTEx_RxEventCallback>
 8002a08:	e7f9      	b.n	80029fe <UART_DMARxHalfCplt+0xe>

08002a0a <UART_DMAReceiveCplt>:
{
 8002a0a:	b508      	push	{r3, lr}
 8002a0c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a0e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a18:	d12b      	bne.n	8002a72 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a1e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	f102 030c 	add.w	r3, r2, #12
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	320c      	adds	r2, #12
 8002a2e:	e842 3100 	strex	r1, r3, [r2]
 8002a32:	2900      	cmp	r1, #0
 8002a34:	d1f3      	bne.n	8002a1e <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a36:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	f102 0314 	add.w	r3, r2, #20
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a44:	3214      	adds	r2, #20
 8002a46:	e842 3100 	strex	r1, r3, [r2]
 8002a4a:	2900      	cmp	r1, #0
 8002a4c:	d1f3      	bne.n	8002a36 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	f102 0314 	add.w	r3, r2, #20
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5c:	3214      	adds	r2, #20
 8002a5e:	e842 3100 	strex	r1, r3, [r2]
 8002a62:	2900      	cmp	r1, #0
 8002a64:	d1f3      	bne.n	8002a4e <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8002a66:	2320      	movs	r3, #32
 8002a68:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d005      	beq.n	8002a7e <UART_DMAReceiveCplt+0x74>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d00f      	beq.n	8002a98 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002a78:	f7ff fd91 	bl	800259e <HAL_UART_RxCpltCallback>
}
 8002a7c:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a7e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	f102 030c 	add.w	r3, r2, #12
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	320c      	adds	r2, #12
 8002a8e:	e842 3100 	strex	r1, r3, [r2]
 8002a92:	2900      	cmp	r1, #0
 8002a94:	d1f3      	bne.n	8002a7e <UART_DMAReceiveCplt+0x74>
 8002a96:	e7ec      	b.n	8002a72 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a98:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002a9a:	f7fe fb9d 	bl	80011d8 <HAL_UARTEx_RxEventCallback>
 8002a9e:	e7ed      	b.n	8002a7c <UART_DMAReceiveCplt+0x72>

08002aa0 <UART_Start_Receive_DMA>:
{
 8002aa0:	b530      	push	{r4, r5, lr}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	4604      	mov	r4, r0
 8002aa6:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8002aa8:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8002aaa:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aac:	2500      	movs	r5, #0
 8002aae:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ab0:	2222      	movs	r2, #34	; 0x22
 8002ab2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ab6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002ab8:	4820      	ldr	r0, [pc, #128]	; (8002b3c <UART_Start_Receive_DMA+0x9c>)
 8002aba:	63d0      	str	r0, [r2, #60]	; 0x3c
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002abc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002abe:	4820      	ldr	r0, [pc, #128]	; (8002b40 <UART_Start_Receive_DMA+0xa0>)
 8002ac0:	6410      	str	r0, [r2, #64]	; 0x40
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ac2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ac4:	481f      	ldr	r0, [pc, #124]	; (8002b44 <UART_Start_Receive_DMA+0xa4>)
 8002ac6:	64d0      	str	r0, [r2, #76]	; 0x4c
  huart->hdmarx->XferAbortCallback = NULL;
 8002ac8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002aca:	6515      	str	r5, [r2, #80]	; 0x50
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002acc:	6820      	ldr	r0, [r4, #0]
 8002ace:	460a      	mov	r2, r1
 8002ad0:	1d01      	adds	r1, r0, #4
 8002ad2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ad4:	f7fe fe5e 	bl	8001794 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002ad8:	9501      	str	r5, [sp, #4]
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	9201      	str	r2, [sp, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	9b01      	ldr	r3, [sp, #4]
  __HAL_UNLOCK(huart);
 8002ae6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	b15b      	cbz	r3, 8002b06 <UART_Start_Receive_DMA+0x66>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aee:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af0:	f102 030c 	add.w	r3, r2, #12
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	320c      	adds	r2, #12
 8002afe:	e842 3100 	strex	r1, r3, [r2]
 8002b02:	2900      	cmp	r1, #0
 8002b04:	d1f3      	bne.n	8002aee <UART_Start_Receive_DMA+0x4e>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	f102 0314 	add.w	r3, r2, #20
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b14:	3214      	adds	r2, #20
 8002b16:	e842 3100 	strex	r1, r3, [r2]
 8002b1a:	2900      	cmp	r1, #0
 8002b1c:	d1f3      	bne.n	8002b06 <UART_Start_Receive_DMA+0x66>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b20:	f102 0314 	add.w	r3, r2, #20
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	3214      	adds	r2, #20
 8002b2e:	e842 3100 	strex	r1, r3, [r2]
 8002b32:	2900      	cmp	r1, #0
 8002b34:	d1f3      	bne.n	8002b1e <UART_Start_Receive_DMA+0x7e>
}
 8002b36:	2000      	movs	r0, #0
 8002b38:	b003      	add	sp, #12
 8002b3a:	bd30      	pop	{r4, r5, pc}
 8002b3c:	08002a0b 	.word	0x08002a0b
 8002b40:	080029f1 	.word	0x080029f1
 8002b44:	080025a5 	.word	0x080025a5

08002b48 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b48:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d129      	bne.n	8002ba6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
{
 8002b52:	b510      	push	{r4, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002b58:	b339      	cbz	r1, 8002baa <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
 8002b5a:	b342      	cbz	r2, 8002bae <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    __HAL_LOCK(huart);
 8002b5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d027      	beq.n	8002bb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 8002b64:	2301      	movs	r3, #1
 8002b66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002b6a:	6303      	str	r3, [r0, #48]	; 0x30
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002b6c:	f7ff ff98 	bl	8002aa0 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 8002b70:	b9f0      	cbnz	r0, 8002bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d001      	beq.n	8002b7c <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
        status = HAL_ERROR;
 8002b78:	2001      	movs	r0, #1
 8002b7a:	e019      	b.n	8002bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	9301      	str	r3, [sp, #4]
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	9201      	str	r2, [sp, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	9b01      	ldr	r3, [sp, #4]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	f102 030c 	add.w	r3, r2, #12
 8002b92:	e853 3f00 	ldrex	r3, [r3]
 8002b96:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b9a:	320c      	adds	r2, #12
 8002b9c:	e842 3100 	strex	r1, r3, [r2]
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	d1f3      	bne.n	8002b8c <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
 8002ba4:	e004      	b.n	8002bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
    return HAL_BUSY;
 8002ba6:	2002      	movs	r0, #2
}
 8002ba8:	4770      	bx	lr
      return HAL_ERROR;
 8002baa:	2001      	movs	r0, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
 8002bae:	2001      	movs	r0, #1
}
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(huart);
 8002bb4:	2002      	movs	r0, #2
 8002bb6:	e7fb      	b.n	8002bb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x68>

08002bb8 <unicode_to_utf8>:


static int unicode_to_utf8(unsigned int codepoint, char *p, char **endp)
{
	// code from http://stackoverflow.com/a/4609989/697313
	if (codepoint < 0x80) *p++ = codepoint;
 8002bb8:	287f      	cmp	r0, #127	; 0x7f
 8002bba:	d805      	bhi.n	8002bc8 <unicode_to_utf8+0x10>
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	f803 0b01 	strb.w	r0, [r3], #1
		*p++ = 224 + codepoint / 4096, *p++ = 128 + codepoint / 64 % 64, *p++ = 128 + codepoint % 64;
	else if (codepoint < 0x110000)
		*p++ = 240 + codepoint / 262144, *p++ = 128 + codepoint / 4096 % 64, *p++ = 128 + codepoint / 64 % 64, *p++ =
				128 + codepoint % 64;
	else return 0; // error
	*endp = p;
 8002bc2:	6013      	str	r3, [r2, #0]
	return 1;
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	4770      	bx	lr
	else if (codepoint < 0x800) *p++ = 192 + codepoint / 64, *p++ = 128 + codepoint % 64;
 8002bc8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002bcc:	d20b      	bcs.n	8002be6 <unicode_to_utf8+0x2e>
 8002bce:	ea4f 1c90 	mov.w	ip, r0, lsr #6
 8002bd2:	f1ac 0c40 	sub.w	ip, ip, #64	; 0x40
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	f803 cb02 	strb.w	ip, [r3], #2
 8002bdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002be0:	3880      	subs	r0, #128	; 0x80
 8002be2:	7048      	strb	r0, [r1, #1]
 8002be4:	e7ed      	b.n	8002bc2 <unicode_to_utf8+0xa>
	else if (codepoint - 0xd800u < 0x800) return 0; // surrogate must have been treated earlier
 8002be6:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
 8002bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bee:	d323      	bcc.n	8002c38 <unicode_to_utf8+0x80>
	else if (codepoint < 0x10000)
 8002bf0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8002bf4:	d20c      	bcs.n	8002c10 <unicode_to_utf8+0x58>
		*p++ = 224 + codepoint / 4096, *p++ = 128 + codepoint / 64 % 64, *p++ = 128 + codepoint % 64;
 8002bf6:	0b03      	lsrs	r3, r0, #12
 8002bf8:	3b20      	subs	r3, #32
 8002bfa:	700b      	strb	r3, [r1, #0]
 8002bfc:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8002c00:	3b80      	subs	r3, #128	; 0x80
 8002c02:	704b      	strb	r3, [r1, #1]
 8002c04:	1ccb      	adds	r3, r1, #3
 8002c06:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002c0a:	3880      	subs	r0, #128	; 0x80
 8002c0c:	7088      	strb	r0, [r1, #2]
 8002c0e:	e7d8      	b.n	8002bc2 <unicode_to_utf8+0xa>
	else if (codepoint < 0x110000)
 8002c10:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
 8002c14:	d212      	bcs.n	8002c3c <unicode_to_utf8+0x84>
		*p++ = 240 + codepoint / 262144, *p++ = 128 + codepoint / 4096 % 64, *p++ = 128 + codepoint / 64 % 64, *p++ =
 8002c16:	0c83      	lsrs	r3, r0, #18
 8002c18:	3b10      	subs	r3, #16
 8002c1a:	700b      	strb	r3, [r1, #0]
 8002c1c:	f3c0 3305 	ubfx	r3, r0, #12, #6
 8002c20:	3b80      	subs	r3, #128	; 0x80
 8002c22:	704b      	strb	r3, [r1, #1]
 8002c24:	f3c0 1385 	ubfx	r3, r0, #6, #6
 8002c28:	3b80      	subs	r3, #128	; 0x80
 8002c2a:	708b      	strb	r3, [r1, #2]
 8002c2c:	1d0b      	adds	r3, r1, #4
				128 + codepoint % 64;
 8002c2e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002c32:	3880      	subs	r0, #128	; 0x80
		*p++ = 240 + codepoint / 262144, *p++ = 128 + codepoint / 4096 % 64, *p++ = 128 + codepoint / 64 % 64, *p++ =
 8002c34:	70c8      	strb	r0, [r1, #3]
 8002c36:	e7c4      	b.n	8002bc2 <unicode_to_utf8+0xa>
	else if (codepoint - 0xd800u < 0x800) return 0; // surrogate must have been treated earlier
 8002c38:	2000      	movs	r0, #0
 8002c3a:	4770      	bx	lr
	else return 0; // error
 8002c3c:	2000      	movs	r0, #0
}
 8002c3e:	4770      	bx	lr

08002c40 <skip_block_comment>:
	}
	NX_JSON_REPORT_ERROR("no closing quote for string", s);
	return 0;
}

static char *skip_block_comment(char *p) {
 8002c40:	b570      	push	{r4, r5, r6, lr}
	// assume p[-2]=='/' && p[-1]=='*'
	char *ps = p - 2;
 8002c42:	4606      	mov	r6, r0
	if (!*p) {
 8002c44:	f816 3902 	ldrb.w	r3, [r6], #-2
 8002c48:	b16b      	cbz	r3, 8002c66 <skip_block_comment+0x26>
 8002c4a:	4604      	mov	r4, r0
		NX_JSON_REPORT_ERROR("endless comment", ps);
		return 0;
	}
	REPEAT:
	p = strchr (p + 1, '/');
 8002c4c:	252f      	movs	r5, #47	; 0x2f
 8002c4e:	4629      	mov	r1, r5
 8002c50:	1c60      	adds	r0, r4, #1
 8002c52:	f001 fa75 	bl	8004140 <strchr>
	if (!p) {
 8002c56:	4604      	mov	r4, r0
 8002c58:	b178      	cbz	r0, 8002c7a <skip_block_comment+0x3a>
		NX_JSON_REPORT_ERROR("endless comment", ps);
		return 0;
	}
	if (p[-1] != '*') goto REPEAT;
 8002c5a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8002c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c60:	d1f5      	bne.n	8002c4e <skip_block_comment+0xe>
	return p + 1;
 8002c62:	3001      	adds	r0, #1
 8002c64:	e012      	b.n	8002c8c <skip_block_comment+0x4c>
		NX_JSON_REPORT_ERROR("endless comment", ps);
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <skip_block_comment+0x50>)
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	4633      	mov	r3, r6
 8002c6c:	22b8      	movs	r2, #184	; 0xb8
 8002c6e:	4909      	ldr	r1, [pc, #36]	; (8002c94 <skip_block_comment+0x54>)
 8002c70:	68c0      	ldr	r0, [r0, #12]
 8002c72:	f000 fe05 	bl	8003880 <fiprintf>
		return 0;
 8002c76:	2000      	movs	r0, #0
 8002c78:	e008      	b.n	8002c8c <skip_block_comment+0x4c>
		NX_JSON_REPORT_ERROR("endless comment", ps);
 8002c7a:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <skip_block_comment+0x50>)
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	4633      	mov	r3, r6
 8002c80:	22be      	movs	r2, #190	; 0xbe
 8002c82:	4904      	ldr	r1, [pc, #16]	; (8002c94 <skip_block_comment+0x54>)
 8002c84:	68c0      	ldr	r0, [r0, #12]
 8002c86:	f000 fdfb 	bl	8003880 <fiprintf>
		return 0;
 8002c8a:	4620      	mov	r0, r4
}
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000000c 	.word	0x2000000c
 8002c94:	08006930 	.word	0x08006930

08002c98 <create_json>:
{
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	4606      	mov	r6, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	4614      	mov	r4, r2
	nx_json *js = NX_JSON_CALLOC();
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f000 fdde 	bl	8003864 <calloc>
	assert(js);
 8002ca8:	b158      	cbz	r0, 8002cc2 <create_json+0x2a>
 8002caa:	4603      	mov	r3, r0
	js->type = type;
 8002cac:	7006      	strb	r6, [r0, #0]
	js->key = key;
 8002cae:	6045      	str	r5, [r0, #4]
	if (!parent->children.last)
 8002cb0:	6922      	ldr	r2, [r4, #16]
 8002cb2:	b162      	cbz	r2, 8002cce <create_json+0x36>
		parent->children.last->next = js;
 8002cb4:	6190      	str	r0, [r2, #24]
		parent->children.last = js;
 8002cb6:	6120      	str	r0, [r4, #16]
	parent->children.length++;
 8002cb8:	68a2      	ldr	r2, [r4, #8]
 8002cba:	3201      	adds	r2, #1
 8002cbc:	60a2      	str	r2, [r4, #8]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
	assert(js);
 8002cc2:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <create_json+0x3c>)
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <create_json+0x40>)
 8002cc6:	2135      	movs	r1, #53	; 0x35
 8002cc8:	4804      	ldr	r0, [pc, #16]	; (8002cdc <create_json+0x44>)
 8002cca:	f000 fdad 	bl	8003828 <__assert_func>
		parent->children.first = parent->children.last = js;
 8002cce:	6120      	str	r0, [r4, #16]
 8002cd0:	60e0      	str	r0, [r4, #12]
 8002cd2:	e7f1      	b.n	8002cb8 <create_json+0x20>
 8002cd4:	08006960 	.word	0x08006960
 8002cd8:	08006b10 	.word	0x08006b10
 8002cdc:	08006964 	.word	0x08006964

08002ce0 <unescape_string>:
{
 8002ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	4606      	mov	r6, r0
	char *d = s;
 8002ce8:	9001      	str	r0, [sp, #4]
	while ((c = *p++)) {
 8002cea:	4604      	mov	r4, r0
 8002cec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 81b1 	beq.w	8003058 <unescape_string+0x378>
 8002cf6:	4688      	mov	r8, r1
 8002cf8:	4617      	mov	r7, r2
	char *p = s;
 8002cfa:	4605      	mov	r5, r0
				*d++ = c;
 8002cfc:	f04f 095c 	mov.w	r9, #92	; 0x5c
				*d++ = '\t';
 8002d00:	f04f 0a09 	mov.w	sl, #9
 8002d04:	e162      	b.n	8002fcc <unescape_string+0x2ec>
			*d = '\0';
 8002d06:	9b01      	ldr	r3, [sp, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			*end = p;
 8002d0c:	f8c8 4000 	str.w	r4, [r8]
			return s;
 8002d10:	4630      	mov	r0, r6
 8002d12:	e1aa      	b.n	800306a <unescape_string+0x38a>
			switch (*p) {
 8002d14:	2b22      	cmp	r3, #34	; 0x22
 8002d16:	d002      	beq.n	8002d1e <unescape_string+0x3e>
 8002d18:	2b2f      	cmp	r3, #47	; 0x2f
 8002d1a:	f040 8146 	bne.w	8002faa <unescape_string+0x2ca>
				*d++ = *p++;
 8002d1e:	3502      	adds	r5, #2
 8002d20:	9a01      	ldr	r2, [sp, #4]
 8002d22:	1c51      	adds	r1, r2, #1
 8002d24:	9101      	str	r1, [sp, #4]
 8002d26:	7013      	strb	r3, [r2, #0]
				break;
 8002d28:	e14b      	b.n	8002fc2 <unescape_string+0x2e2>
				*d++ = '\b';
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	9201      	str	r2, [sp, #4]
 8002d30:	2208      	movs	r2, #8
 8002d32:	701a      	strb	r2, [r3, #0]
				p++;
 8002d34:	3502      	adds	r5, #2
				break;
 8002d36:	e144      	b.n	8002fc2 <unescape_string+0x2e2>
				*d++ = '\f';
 8002d38:	9b01      	ldr	r3, [sp, #4]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	9201      	str	r2, [sp, #4]
 8002d3e:	220c      	movs	r2, #12
 8002d40:	701a      	strb	r2, [r3, #0]
				p++;
 8002d42:	3502      	adds	r5, #2
				break;
 8002d44:	e13d      	b.n	8002fc2 <unescape_string+0x2e2>
				*d++ = '\n';
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	9201      	str	r2, [sp, #4]
 8002d4c:	220a      	movs	r2, #10
 8002d4e:	701a      	strb	r2, [r3, #0]
				p++;
 8002d50:	3502      	adds	r5, #2
				break;
 8002d52:	e136      	b.n	8002fc2 <unescape_string+0x2e2>
				*d++ = '\r';
 8002d54:	9b01      	ldr	r3, [sp, #4]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	9201      	str	r2, [sp, #4]
 8002d5a:	220d      	movs	r2, #13
 8002d5c:	701a      	strb	r2, [r3, #0]
				p++;
 8002d5e:	3502      	adds	r5, #2
				break;
 8002d60:	e12f      	b.n	8002fc2 <unescape_string+0x2e2>
				*d++ = '\t';
 8002d62:	9b01      	ldr	r3, [sp, #4]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	9201      	str	r2, [sp, #4]
 8002d68:	f883 a000 	strb.w	sl, [r3]
				p++;
 8002d6c:	3502      	adds	r5, #2
				break;
 8002d6e:	e128      	b.n	8002fc2 <unescape_string+0x2e2>
				if (!encoder) {
 8002d70:	2f00      	cmp	r7, #0
 8002d72:	d05f      	beq.n	8002e34 <unescape_string+0x154>
				if ((h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 || (h3 = hex_val (p[3])) < 0 ||
 8002d74:	78ab      	ldrb	r3, [r5, #2]
	if (c >= '0' && c <= '9') return c - '0';
 8002d76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	2a09      	cmp	r2, #9
 8002d7e:	d960      	bls.n	8002e42 <unescape_string+0x162>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002d80:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	2a05      	cmp	r2, #5
 8002d88:	d95e      	bls.n	8002e48 <unescape_string+0x168>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002d8a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	2a05      	cmp	r2, #5
 8002d92:	d868      	bhi.n	8002e66 <unescape_string+0x186>
 8002d94:	f1a3 0137 	sub.w	r1, r3, #55	; 0x37
				if ((h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 || (h3 = hex_val (p[3])) < 0 ||
 8002d98:	78eb      	ldrb	r3, [r5, #3]
	if (c >= '0' && c <= '9') return c - '0';
 8002d9a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	2a09      	cmp	r2, #9
 8002da2:	d954      	bls.n	8002e4e <unescape_string+0x16e>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002da4:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	2a05      	cmp	r2, #5
 8002dac:	d951      	bls.n	8002e52 <unescape_string+0x172>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002dae:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	2a05      	cmp	r2, #5
 8002db6:	d856      	bhi.n	8002e66 <unescape_string+0x186>
 8002db8:	3b37      	subs	r3, #55	; 0x37
				if ((h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 || (h3 = hex_val (p[3])) < 0 ||
 8002dba:	792a      	ldrb	r2, [r5, #4]
	if (c >= '0' && c <= '9') return c - '0';
 8002dbc:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8002dc0:	fa5f fc8c 	uxtb.w	ip, ip
 8002dc4:	f1bc 0f09 	cmp.w	ip, #9
 8002dc8:	d945      	bls.n	8002e56 <unescape_string+0x176>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002dca:	f1a2 0061 	sub.w	r0, r2, #97	; 0x61
 8002dce:	b2c0      	uxtb	r0, r0
 8002dd0:	2805      	cmp	r0, #5
 8002dd2:	d942      	bls.n	8002e5a <unescape_string+0x17a>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002dd4:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8002dd8:	b2c0      	uxtb	r0, r0
 8002dda:	2805      	cmp	r0, #5
 8002ddc:	d843      	bhi.n	8002e66 <unescape_string+0x186>
 8002dde:	3a37      	subs	r2, #55	; 0x37
					(h4 = hex_val (p[4])) < 0) {
 8002de0:	7968      	ldrb	r0, [r5, #5]
	if (c >= '0' && c <= '9') return c - '0';
 8002de2:	f1a0 0c30 	sub.w	ip, r0, #48	; 0x30
 8002de6:	fa5f fc8c 	uxtb.w	ip, ip
 8002dea:	f1bc 0f09 	cmp.w	ip, #9
 8002dee:	d936      	bls.n	8002e5e <unescape_string+0x17e>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002df0:	f1a0 0c61 	sub.w	ip, r0, #97	; 0x61
 8002df4:	fa5f fc8c 	uxtb.w	ip, ip
 8002df8:	f1bc 0f05 	cmp.w	ip, #5
 8002dfc:	d931      	bls.n	8002e62 <unescape_string+0x182>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002dfe:	f1a0 0c41 	sub.w	ip, r0, #65	; 0x41
 8002e02:	fa5f fc8c 	uxtb.w	ip, ip
 8002e06:	f1bc 0f05 	cmp.w	ip, #5
 8002e0a:	d82c      	bhi.n	8002e66 <unescape_string+0x186>
 8002e0c:	3837      	subs	r0, #55	; 0x37
				unsigned int codepoint = h1 << 12 | h2 << 8 | h3 << 4 | h4;
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002e14:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002e18:	4318      	orrs	r0, r3
				if ((codepoint & 0xfc00) == 0xd800) { // high surrogate; need one more unicode to succeed
 8002e1a:	f400 437c 	and.w	r3, r0, #64512	; 0xfc00
 8002e1e:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002e22:	d02a      	beq.n	8002e7a <unescape_string+0x19a>
				if (!encoder (codepoint, d, &d)) {
 8002e24:	aa01      	add	r2, sp, #4
 8002e26:	9901      	ldr	r1, [sp, #4]
 8002e28:	47b8      	blx	r7
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80b3 	beq.w	8002f96 <unescape_string+0x2b6>
				p += 5;
 8002e30:	1d65      	adds	r5, r4, #5
				break;
 8002e32:	e0c6      	b.n	8002fc2 <unescape_string+0x2e2>
					*d++ = c;
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	9201      	str	r2, [sp, #4]
 8002e3a:	f883 9000 	strb.w	r9, [r3]
					break;
 8002e3e:	4625      	mov	r5, r4
 8002e40:	e0bf      	b.n	8002fc2 <unescape_string+0x2e2>
	if (c >= '0' && c <= '9') return c - '0';
 8002e42:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002e46:	e7a7      	b.n	8002d98 <unescape_string+0xb8>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002e48:	f1a3 0157 	sub.w	r1, r3, #87	; 0x57
 8002e4c:	e7a4      	b.n	8002d98 <unescape_string+0xb8>
	if (c >= '0' && c <= '9') return c - '0';
 8002e4e:	3b30      	subs	r3, #48	; 0x30
 8002e50:	e7b3      	b.n	8002dba <unescape_string+0xda>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002e52:	3b57      	subs	r3, #87	; 0x57
 8002e54:	e7b1      	b.n	8002dba <unescape_string+0xda>
	if (c >= '0' && c <= '9') return c - '0';
 8002e56:	3a30      	subs	r2, #48	; 0x30
 8002e58:	e7c2      	b.n	8002de0 <unescape_string+0x100>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002e5a:	3a57      	subs	r2, #87	; 0x57
 8002e5c:	e7c0      	b.n	8002de0 <unescape_string+0x100>
	if (c >= '0' && c <= '9') return c - '0';
 8002e5e:	3830      	subs	r0, #48	; 0x30
 8002e60:	e7d5      	b.n	8002e0e <unescape_string+0x12e>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002e62:	3857      	subs	r0, #87	; 0x57
 8002e64:	e7d3      	b.n	8002e0e <unescape_string+0x12e>
					NX_JSON_REPORT_ERROR("invalid unicode escape", p - 1);
 8002e66:	4b82      	ldr	r3, [pc, #520]	; (8003070 <unescape_string+0x390>)
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	462b      	mov	r3, r5
 8002e6c:	228f      	movs	r2, #143	; 0x8f
 8002e6e:	4981      	ldr	r1, [pc, #516]	; (8003074 <unescape_string+0x394>)
 8002e70:	68c0      	ldr	r0, [r0, #12]
 8002e72:	f000 fd05 	bl	8003880 <fiprintf>
					return 0;
 8002e76:	2000      	movs	r0, #0
 8002e78:	e0f7      	b.n	800306a <unescape_string+0x38a>
					p += 6;
 8002e7a:	1dec      	adds	r4, r5, #7
					if (p[-1] != '\\' || *p != 'u' || (h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 ||
 8002e7c:	79ab      	ldrb	r3, [r5, #6]
 8002e7e:	2b5c      	cmp	r3, #92	; 0x5c
 8002e80:	d175      	bne.n	8002f6e <unescape_string+0x28e>
 8002e82:	79eb      	ldrb	r3, [r5, #7]
 8002e84:	2b75      	cmp	r3, #117	; 0x75
 8002e86:	d172      	bne.n	8002f6e <unescape_string+0x28e>
 8002e88:	7a2b      	ldrb	r3, [r5, #8]
	if (c >= '0' && c <= '9') return c - '0';
 8002e8a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002e8e:	b2c9      	uxtb	r1, r1
 8002e90:	2909      	cmp	r1, #9
 8002e92:	d958      	bls.n	8002f46 <unescape_string+0x266>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002e94:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	2a05      	cmp	r2, #5
 8002e9c:	d956      	bls.n	8002f4c <unescape_string+0x26c>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002e9e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	2a05      	cmp	r2, #5
 8002ea6:	d862      	bhi.n	8002f6e <unescape_string+0x28e>
 8002ea8:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
					if (p[-1] != '\\' || *p != 'u' || (h1 = hex_val (p[1])) < 0 || (h2 = hex_val (p[2])) < 0 ||
 8002eac:	7a6b      	ldrb	r3, [r5, #9]
	if (c >= '0' && c <= '9') return c - '0';
 8002eae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002eb2:	b2c9      	uxtb	r1, r1
 8002eb4:	2909      	cmp	r1, #9
 8002eb6:	d94c      	bls.n	8002f52 <unescape_string+0x272>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002eb8:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8002ebc:	b2c9      	uxtb	r1, r1
 8002ebe:	2905      	cmp	r1, #5
 8002ec0:	d949      	bls.n	8002f56 <unescape_string+0x276>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002ec2:	f1a3 0141 	sub.w	r1, r3, #65	; 0x41
 8002ec6:	b2c9      	uxtb	r1, r1
 8002ec8:	2905      	cmp	r1, #5
 8002eca:	d850      	bhi.n	8002f6e <unescape_string+0x28e>
 8002ecc:	3b37      	subs	r3, #55	; 0x37
						(h3 = hex_val (p[3])) < 0 || (h4 = hex_val (p[4])) < 0) {
 8002ece:	f895 c00a 	ldrb.w	ip, [r5, #10]
	if (c >= '0' && c <= '9') return c - '0';
 8002ed2:	f1ac 0130 	sub.w	r1, ip, #48	; 0x30
 8002ed6:	b2c9      	uxtb	r1, r1
 8002ed8:	2909      	cmp	r1, #9
 8002eda:	d93e      	bls.n	8002f5a <unescape_string+0x27a>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002edc:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
 8002ee0:	b2c9      	uxtb	r1, r1
 8002ee2:	2905      	cmp	r1, #5
 8002ee4:	d93c      	bls.n	8002f60 <unescape_string+0x280>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002ee6:	f1ac 0141 	sub.w	r1, ip, #65	; 0x41
 8002eea:	b2c9      	uxtb	r1, r1
 8002eec:	2905      	cmp	r1, #5
 8002eee:	d83e      	bhi.n	8002f6e <unescape_string+0x28e>
 8002ef0:	f1ac 0c37 	sub.w	ip, ip, #55	; 0x37
						(h3 = hex_val (p[3])) < 0 || (h4 = hex_val (p[4])) < 0) {
 8002ef4:	7ae9      	ldrb	r1, [r5, #11]
	if (c >= '0' && c <= '9') return c - '0';
 8002ef6:	f1a1 0e30 	sub.w	lr, r1, #48	; 0x30
 8002efa:	fa5f fe8e 	uxtb.w	lr, lr
 8002efe:	f1be 0f09 	cmp.w	lr, #9
 8002f02:	d930      	bls.n	8002f66 <unescape_string+0x286>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002f04:	f1a1 0e61 	sub.w	lr, r1, #97	; 0x61
 8002f08:	fa5f fe8e 	uxtb.w	lr, lr
 8002f0c:	f1be 0f05 	cmp.w	lr, #5
 8002f10:	d92b      	bls.n	8002f6a <unescape_string+0x28a>
	if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8002f12:	f1a1 0e41 	sub.w	lr, r1, #65	; 0x41
 8002f16:	fa5f fe8e 	uxtb.w	lr, lr
 8002f1a:	f1be 0f05 	cmp.w	lr, #5
 8002f1e:	d826      	bhi.n	8002f6e <unescape_string+0x28e>
 8002f20:	3937      	subs	r1, #55	; 0x37
					unsigned int codepoint2 = h1 << 12 | h2 << 8 | h3 << 4 | h4;
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002f28:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 8002f2c:	430b      	orrs	r3, r1
					if ((codepoint2 & 0xfc00) != 0xdc00) {
 8002f2e:	f403 427c 	and.w	r2, r3, #64512	; 0xfc00
 8002f32:	f5b2 4f5c 	cmp.w	r2, #56320	; 0xdc00
 8002f36:	d124      	bne.n	8002f82 <unescape_string+0x2a2>
					codepoint = 0x10000 + ((codepoint - 0xd800) << 10) + (codepoint2 - 0xdc00);
 8002f38:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8002f3c:	f1a0 7057 	sub.w	r0, r0, #56360960	; 0x35c0000
 8002f40:	f5a0 3077 	sub.w	r0, r0, #252928	; 0x3dc00
 8002f44:	e76e      	b.n	8002e24 <unescape_string+0x144>
	if (c >= '0' && c <= '9') return c - '0';
 8002f46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f4a:	e7af      	b.n	8002eac <unescape_string+0x1cc>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002f4c:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
 8002f50:	e7ac      	b.n	8002eac <unescape_string+0x1cc>
	if (c >= '0' && c <= '9') return c - '0';
 8002f52:	3b30      	subs	r3, #48	; 0x30
 8002f54:	e7bb      	b.n	8002ece <unescape_string+0x1ee>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002f56:	3b57      	subs	r3, #87	; 0x57
 8002f58:	e7b9      	b.n	8002ece <unescape_string+0x1ee>
	if (c >= '0' && c <= '9') return c - '0';
 8002f5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8002f5e:	e7c9      	b.n	8002ef4 <unescape_string+0x214>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002f60:	f1ac 0c57 	sub.w	ip, ip, #87	; 0x57
 8002f64:	e7c6      	b.n	8002ef4 <unescape_string+0x214>
	if (c >= '0' && c <= '9') return c - '0';
 8002f66:	3930      	subs	r1, #48	; 0x30
 8002f68:	e7db      	b.n	8002f22 <unescape_string+0x242>
	if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8002f6a:	3957      	subs	r1, #87	; 0x57
 8002f6c:	e7d9      	b.n	8002f22 <unescape_string+0x242>
						NX_JSON_REPORT_ERROR("invalid unicode surrogate", ps);
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <unescape_string+0x390>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	462b      	mov	r3, r5
 8002f74:	2297      	movs	r2, #151	; 0x97
 8002f76:	4940      	ldr	r1, [pc, #256]	; (8003078 <unescape_string+0x398>)
 8002f78:	68c0      	ldr	r0, [r0, #12]
 8002f7a:	f000 fc81 	bl	8003880 <fiprintf>
						return 0;
 8002f7e:	2000      	movs	r0, #0
 8002f80:	e073      	b.n	800306a <unescape_string+0x38a>
						NX_JSON_REPORT_ERROR("invalid unicode surrogate", ps);
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <unescape_string+0x390>)
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	462b      	mov	r3, r5
 8002f88:	229c      	movs	r2, #156	; 0x9c
 8002f8a:	493b      	ldr	r1, [pc, #236]	; (8003078 <unescape_string+0x398>)
 8002f8c:	68c0      	ldr	r0, [r0, #12]
 8002f8e:	f000 fc77 	bl	8003880 <fiprintf>
						return 0;
 8002f92:	2000      	movs	r0, #0
 8002f94:	e069      	b.n	800306a <unescape_string+0x38a>
					NX_JSON_REPORT_ERROR("invalid codepoint", ps);
 8002f96:	4b36      	ldr	r3, [pc, #216]	; (8003070 <unescape_string+0x390>)
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	22a2      	movs	r2, #162	; 0xa2
 8002f9e:	4937      	ldr	r1, [pc, #220]	; (800307c <unescape_string+0x39c>)
 8002fa0:	68c0      	ldr	r0, [r0, #12]
 8002fa2:	f000 fc6d 	bl	8003880 <fiprintf>
					return 0;
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	e05f      	b.n	800306a <unescape_string+0x38a>
				*d++ = c;
 8002faa:	9b01      	ldr	r3, [sp, #4]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	9201      	str	r2, [sp, #4]
 8002fb0:	f883 9000 	strb.w	r9, [r3]
				break;
 8002fb4:	4625      	mov	r5, r4
 8002fb6:	e004      	b.n	8002fc2 <unescape_string+0x2e2>
			*d++ = c;
 8002fb8:	9a01      	ldr	r2, [sp, #4]
 8002fba:	1c51      	adds	r1, r2, #1
 8002fbc:	9101      	str	r1, [sp, #4]
 8002fbe:	7013      	strb	r3, [r2, #0]
 8002fc0:	4625      	mov	r5, r4
	while ((c = *p++)) {
 8002fc2:	462c      	mov	r4, r5
 8002fc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d045      	beq.n	8003058 <unescape_string+0x378>
		if (c == '"') {
 8002fcc:	2b22      	cmp	r3, #34	; 0x22
 8002fce:	f43f ae9a 	beq.w	8002d06 <unescape_string+0x26>
		} else if (c == '\\') {
 8002fd2:	2b5c      	cmp	r3, #92	; 0x5c
 8002fd4:	d1f0      	bne.n	8002fb8 <unescape_string+0x2d8>
			switch (*p) {
 8002fd6:	786b      	ldrb	r3, [r5, #1]
 8002fd8:	2b75      	cmp	r3, #117	; 0x75
 8002fda:	d8e6      	bhi.n	8002faa <unescape_string+0x2ca>
 8002fdc:	2b5b      	cmp	r3, #91	; 0x5b
 8002fde:	f67f ae99 	bls.w	8002d14 <unescape_string+0x34>
 8002fe2:	f1a3 025c 	sub.w	r2, r3, #92	; 0x5c
 8002fe6:	2a19      	cmp	r2, #25
 8002fe8:	d8df      	bhi.n	8002faa <unescape_string+0x2ca>
 8002fea:	a101      	add	r1, pc, #4	; (adr r1, 8002ff0 <unescape_string+0x310>)
 8002fec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8002ff0:	08002d1f 	.word	0x08002d1f
 8002ff4:	08002fab 	.word	0x08002fab
 8002ff8:	08002fab 	.word	0x08002fab
 8002ffc:	08002fab 	.word	0x08002fab
 8003000:	08002fab 	.word	0x08002fab
 8003004:	08002fab 	.word	0x08002fab
 8003008:	08002d2b 	.word	0x08002d2b
 800300c:	08002fab 	.word	0x08002fab
 8003010:	08002fab 	.word	0x08002fab
 8003014:	08002fab 	.word	0x08002fab
 8003018:	08002d39 	.word	0x08002d39
 800301c:	08002fab 	.word	0x08002fab
 8003020:	08002fab 	.word	0x08002fab
 8003024:	08002fab 	.word	0x08002fab
 8003028:	08002fab 	.word	0x08002fab
 800302c:	08002fab 	.word	0x08002fab
 8003030:	08002fab 	.word	0x08002fab
 8003034:	08002fab 	.word	0x08002fab
 8003038:	08002d47 	.word	0x08002d47
 800303c:	08002fab 	.word	0x08002fab
 8003040:	08002fab 	.word	0x08002fab
 8003044:	08002fab 	.word	0x08002fab
 8003048:	08002d55 	.word	0x08002d55
 800304c:	08002fab 	.word	0x08002fab
 8003050:	08002d63 	.word	0x08002d63
 8003054:	08002d71 	.word	0x08002d71
	NX_JSON_REPORT_ERROR("no closing quote for string", s);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <unescape_string+0x390>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	4633      	mov	r3, r6
 800305e:	22b0      	movs	r2, #176	; 0xb0
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <unescape_string+0x3a0>)
 8003062:	68c0      	ldr	r0, [r0, #12]
 8003064:	f000 fc0c 	bl	8003880 <fiprintf>
	return 0;
 8003068:	2000      	movs	r0, #0
}
 800306a:	b002      	add	sp, #8
 800306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003070:	2000000c 	.word	0x2000000c
 8003074:	08006978 	.word	0x08006978
 8003078:	080069b0 	.word	0x080069b0
 800307c:	080069ec 	.word	0x080069ec
 8003080:	08006a20 	.word	0x08006a20

08003084 <parse_value>:
	}
	NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
	return 0; // error
}

static char *parse_value(nx_json *parent, const char *key, char *p, nx_json_unicode_encoder encoder) {
 8003084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	4607      	mov	r7, r0
 800308c:	460e      	mov	r6, r1
 800308e:	9201      	str	r2, [sp, #4]
 8003090:	461d      	mov	r5, r3
			NX_JSON_REPORT_ERROR("unexpected chars", p);
			return 0; // error
		case '/': // comment
			if (p[1] == '/') { // line comment
				char *ps = p;
				p = strchr (p + 2, '\n');
 8003092:	f04f 090a 	mov.w	r9, #10
		switch (*p) {
 8003096:	9c01      	ldr	r4, [sp, #4]
 8003098:	7823      	ldrb	r3, [r4, #0]
 800309a:	2b7b      	cmp	r3, #123	; 0x7b
 800309c:	f200 822f 	bhi.w	80034fe <parse_value+0x47a>
 80030a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80030a4:	022d007c 	.word	0x022d007c
 80030a8:	022d022d 	.word	0x022d022d
 80030ac:	022d022d 	.word	0x022d022d
 80030b0:	022d022d 	.word	0x022d022d
 80030b4:	0089022d 	.word	0x0089022d
 80030b8:	022d0089 	.word	0x022d0089
 80030bc:	0089022d 	.word	0x0089022d
 80030c0:	022d022d 	.word	0x022d022d
 80030c4:	022d022d 	.word	0x022d022d
 80030c8:	022d022d 	.word	0x022d022d
 80030cc:	022d022d 	.word	0x022d022d
 80030d0:	022d022d 	.word	0x022d022d
 80030d4:	022d022d 	.word	0x022d022d
 80030d8:	022d022d 	.word	0x022d022d
 80030dc:	022d022d 	.word	0x022d022d
 80030e0:	022d022d 	.word	0x022d022d
 80030e4:	022d0089 	.word	0x022d0089
 80030e8:	022d0134 	.word	0x022d0134
 80030ec:	022d022d 	.word	0x022d022d
 80030f0:	022d022d 	.word	0x022d022d
 80030f4:	022d022d 	.word	0x022d022d
 80030f8:	022d022d 	.word	0x022d022d
 80030fc:	01480089 	.word	0x01480089
 8003100:	01ff022d 	.word	0x01ff022d
 8003104:	01480148 	.word	0x01480148
 8003108:	01480148 	.word	0x01480148
 800310c:	01480148 	.word	0x01480148
 8003110:	01480148 	.word	0x01480148
 8003114:	01480148 	.word	0x01480148
 8003118:	022d022d 	.word	0x022d022d
 800311c:	022d022d 	.word	0x022d022d
 8003120:	022d022d 	.word	0x022d022d
 8003124:	022d022d 	.word	0x022d022d
 8003128:	022d022d 	.word	0x022d022d
 800312c:	022d022d 	.word	0x022d022d
 8003130:	022d022d 	.word	0x022d022d
 8003134:	022d022d 	.word	0x022d022d
 8003138:	022d022d 	.word	0x022d022d
 800313c:	022d022d 	.word	0x022d022d
 8003140:	022d022d 	.word	0x022d022d
 8003144:	022d022d 	.word	0x022d022d
 8003148:	022d022d 	.word	0x022d022d
 800314c:	022d022d 	.word	0x022d022d
 8003150:	022d022d 	.word	0x022d022d
 8003154:	022d022d 	.word	0x022d022d
 8003158:	011a022d 	.word	0x011a022d
 800315c:	0085022d 	.word	0x0085022d
 8003160:	022d022d 	.word	0x022d022d
 8003164:	022d022d 	.word	0x022d022d
 8003168:	022d022d 	.word	0x022d022d
 800316c:	022d022d 	.word	0x022d022d
 8003170:	022d01ca 	.word	0x022d01ca
 8003174:	022d022d 	.word	0x022d022d
 8003178:	022d022d 	.word	0x022d022d
 800317c:	022d022d 	.word	0x022d022d
 8003180:	022d01e7 	.word	0x022d01e7
 8003184:	022d022d 	.word	0x022d022d
 8003188:	022d022d 	.word	0x022d022d
 800318c:	022d01a0 	.word	0x022d01a0
 8003190:	022d022d 	.word	0x022d022d
 8003194:	022d022d 	.word	0x022d022d
 8003198:	008c022d 	.word	0x008c022d
			NX_JSON_REPORT_ERROR("unexpected end of text", p);
 800319c:	4ba0      	ldr	r3, [pc, #640]	; (8003420 <parse_value+0x39c>)
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	4623      	mov	r3, r4
 80031a2:	22f2      	movs	r2, #242	; 0xf2
 80031a4:	499f      	ldr	r1, [pc, #636]	; (8003424 <parse_value+0x3a0>)
 80031a6:	68c0      	ldr	r0, [r0, #12]
 80031a8:	f000 fb6a 	bl	8003880 <fiprintf>
			return 0; // error
 80031ac:	2400      	movs	r4, #0
		default:
			NX_JSON_REPORT_ERROR("unexpected chars", p);
			return 0; // error
		}
	}
}
 80031ae:	4620      	mov	r0, r4
 80031b0:	b004      	add	sp, #16
 80031b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			p++;
 80031b6:	3401      	adds	r4, #1
 80031b8:	9401      	str	r4, [sp, #4]
			break;
 80031ba:	e76c      	b.n	8003096 <parse_value+0x12>
			js = create_json (NX_JSON_OBJECT, key, parent);
 80031bc:	463a      	mov	r2, r7
 80031be:	4631      	mov	r1, r6
 80031c0:	2001      	movs	r0, #1
 80031c2:	f7ff fd69 	bl	8002c98 <create_json>
 80031c6:	4607      	mov	r7, r0
			p++;
 80031c8:	9b01      	ldr	r3, [sp, #4]
 80031ca:	3301      	adds	r3, #1
 80031cc:	9301      	str	r3, [sp, #4]
				p = strchr (p + 1, '\n');
 80031ce:	260a      	movs	r6, #10
 80031d0:	e070      	b.n	80032b4 <parse_value+0x230>
			*key = unescape_string (p, &p, encoder);
 80031d2:	462a      	mov	r2, r5
 80031d4:	a903      	add	r1, sp, #12
 80031d6:	f7ff fd83 	bl	8002ce0 <unescape_string>
			if (!*key) return 0; // propagate error
 80031da:	4680      	mov	r8, r0
 80031dc:	2800      	cmp	r0, #0
 80031de:	d077      	beq.n	80032d0 <parse_value+0x24c>
			while (*p && IS_WHITESPACE(*p)) p++;
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	7819      	ldrb	r1, [r3, #0]
 80031e4:	1e4a      	subs	r2, r1, #1
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	2a1f      	cmp	r2, #31
 80031ea:	d806      	bhi.n	80031fa <parse_value+0x176>
 80031ec:	3301      	adds	r3, #1
 80031ee:	9303      	str	r3, [sp, #12]
 80031f0:	7819      	ldrb	r1, [r3, #0]
 80031f2:	1e4a      	subs	r2, r1, #1
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	2a1f      	cmp	r2, #31
 80031f8:	d9f8      	bls.n	80031ec <parse_value+0x168>
			if (*p == ':') return p + 1;
 80031fa:	293a      	cmp	r1, #58	; 0x3a
 80031fc:	d102      	bne.n	8003204 <parse_value+0x180>
 80031fe:	1c5c      	adds	r4, r3, #1
				p = parse_key (&new_key, p, encoder);
 8003200:	9401      	str	r4, [sp, #4]
				if (!p) return 0; // error
 8003202:	e049      	b.n	8003298 <parse_value+0x214>
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8003204:	4a86      	ldr	r2, [pc, #536]	; (8003420 <parse_value+0x39c>)
 8003206:	6810      	ldr	r0, [r2, #0]
 8003208:	22ce      	movs	r2, #206	; 0xce
 800320a:	4987      	ldr	r1, [pc, #540]	; (8003428 <parse_value+0x3a4>)
 800320c:	68c0      	ldr	r0, [r0, #12]
 800320e:	f000 fb37 	bl	8003880 <fiprintf>
			return 0;
 8003212:	e05d      	b.n	80032d0 <parse_value+0x24c>
				p = strchr (p + 1, '\n');
 8003214:	4631      	mov	r1, r6
 8003216:	1ca0      	adds	r0, r4, #2
 8003218:	f000 ff92 	bl	8004140 <strchr>
 800321c:	9003      	str	r0, [sp, #12]
				if (!p) {
 800321e:	b1e8      	cbz	r0, 800325c <parse_value+0x1d8>
				p++;
 8003220:	3001      	adds	r0, #1
 8003222:	9003      	str	r0, [sp, #12]
	while ((c = *p++)) {
 8003224:	9c03      	ldr	r4, [sp, #12]
 8003226:	1c60      	adds	r0, r4, #1
 8003228:	9003      	str	r0, [sp, #12]
 800322a:	7821      	ldrb	r1, [r4, #0]
 800322c:	2900      	cmp	r1, #0
 800322e:	d047      	beq.n	80032c0 <parse_value+0x23c>
		if (c == '"') {
 8003230:	2922      	cmp	r1, #34	; 0x22
 8003232:	d0ce      	beq.n	80031d2 <parse_value+0x14e>
		} else if (IS_WHITESPACE(c) || c == ',') {
 8003234:	2920      	cmp	r1, #32
 8003236:	d9f5      	bls.n	8003224 <parse_value+0x1a0>
 8003238:	292c      	cmp	r1, #44	; 0x2c
 800323a:	d0f3      	beq.n	8003224 <parse_value+0x1a0>
		} else if (c == '}') {
 800323c:	297d      	cmp	r1, #125	; 0x7d
 800323e:	d028      	beq.n	8003292 <parse_value+0x20e>
		} else if (c == '/') {
 8003240:	292f      	cmp	r1, #47	; 0x2f
 8003242:	d11d      	bne.n	8003280 <parse_value+0x1fc>
			if (*p == '/') { // line comment
 8003244:	7863      	ldrb	r3, [r4, #1]
 8003246:	2b2f      	cmp	r3, #47	; 0x2f
 8003248:	d0e4      	beq.n	8003214 <parse_value+0x190>
			} else if (*p == '*') { // block comment
 800324a:	2b2a      	cmp	r3, #42	; 0x2a
 800324c:	d10f      	bne.n	800326e <parse_value+0x1ea>
				p = skip_block_comment (p + 1);
 800324e:	1ca0      	adds	r0, r4, #2
 8003250:	f7ff fcf6 	bl	8002c40 <skip_block_comment>
 8003254:	9003      	str	r0, [sp, #12]
				if (!p) return 0;
 8003256:	2800      	cmp	r0, #0
 8003258:	d1e4      	bne.n	8003224 <parse_value+0x1a0>
 800325a:	e039      	b.n	80032d0 <parse_value+0x24c>
					NX_JSON_REPORT_ERROR("endless comment", ps);
 800325c:	4b70      	ldr	r3, [pc, #448]	; (8003420 <parse_value+0x39c>)
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	4623      	mov	r3, r4
 8003262:	22d9      	movs	r2, #217	; 0xd9
 8003264:	4971      	ldr	r1, [pc, #452]	; (800342c <parse_value+0x3a8>)
 8003266:	68c0      	ldr	r0, [r0, #12]
 8003268:	f000 fb0a 	bl	8003880 <fiprintf>
					return 0; // error
 800326c:	e030      	b.n	80032d0 <parse_value+0x24c>
				NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
 800326e:	4b6c      	ldr	r3, [pc, #432]	; (8003420 <parse_value+0x39c>)
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	4623      	mov	r3, r4
 8003274:	22e1      	movs	r2, #225	; 0xe1
 8003276:	496c      	ldr	r1, [pc, #432]	; (8003428 <parse_value+0x3a4>)
 8003278:	68c0      	ldr	r0, [r0, #12]
 800327a:	f000 fb01 	bl	8003880 <fiprintf>
				return 0; // error
 800327e:	e027      	b.n	80032d0 <parse_value+0x24c>
			NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
 8003280:	4b67      	ldr	r3, [pc, #412]	; (8003420 <parse_value+0x39c>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	4623      	mov	r3, r4
 8003286:	22e5      	movs	r2, #229	; 0xe5
 8003288:	4967      	ldr	r1, [pc, #412]	; (8003428 <parse_value+0x3a4>)
 800328a:	68c0      	ldr	r0, [r0, #12]
 800328c:	f000 faf8 	bl	8003880 <fiprintf>
			return 0; // error
 8003290:	e01e      	b.n	80032d0 <parse_value+0x24c>
				p = parse_key (&new_key, p, encoder);
 8003292:	9401      	str	r4, [sp, #4]
				if (!p) return 0; // error
 8003294:	2c00      	cmp	r4, #0
 8003296:	d08a      	beq.n	80031ae <parse_value+0x12a>
				if (*p == '}') return p + 1; // end of object
 8003298:	7823      	ldrb	r3, [r4, #0]
 800329a:	2b7d      	cmp	r3, #125	; 0x7d
 800329c:	d01a      	beq.n	80032d4 <parse_value+0x250>
				p = parse_value (js, new_key, p, encoder);
 800329e:	462b      	mov	r3, r5
 80032a0:	4622      	mov	r2, r4
 80032a2:	4641      	mov	r1, r8
 80032a4:	4638      	mov	r0, r7
 80032a6:	f7ff feed 	bl	8003084 <parse_value>
 80032aa:	4604      	mov	r4, r0
 80032ac:	9001      	str	r0, [sp, #4]
				if (!p) return 0; // error
 80032ae:	2800      	cmp	r0, #0
 80032b0:	f43f af7d 	beq.w	80031ae <parse_value+0x12a>
				p = parse_key (&new_key, p, encoder);
 80032b4:	9c01      	ldr	r4, [sp, #4]
	while ((c = *p++)) {
 80032b6:	1c60      	adds	r0, r4, #1
 80032b8:	9003      	str	r0, [sp, #12]
 80032ba:	7821      	ldrb	r1, [r4, #0]
 80032bc:	2900      	cmp	r1, #0
 80032be:	d1b7      	bne.n	8003230 <parse_value+0x1ac>
	NX_JSON_REPORT_ERROR("unexpected chars", p - 1);
 80032c0:	4b57      	ldr	r3, [pc, #348]	; (8003420 <parse_value+0x39c>)
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	4623      	mov	r3, r4
 80032c6:	22e9      	movs	r2, #233	; 0xe9
 80032c8:	4957      	ldr	r1, [pc, #348]	; (8003428 <parse_value+0x3a4>)
 80032ca:	68c0      	ldr	r0, [r0, #12]
 80032cc:	f000 fad8 	bl	8003880 <fiprintf>
				if (!p) return 0; // error
 80032d0:	2400      	movs	r4, #0
 80032d2:	e76c      	b.n	80031ae <parse_value+0x12a>
				if (*p == '}') return p + 1; // end of object
 80032d4:	3401      	adds	r4, #1
 80032d6:	e76a      	b.n	80031ae <parse_value+0x12a>
			js = create_json (NX_JSON_ARRAY, key, parent);
 80032d8:	463a      	mov	r2, r7
 80032da:	4631      	mov	r1, r6
 80032dc:	2002      	movs	r0, #2
 80032de:	f7ff fcdb 	bl	8002c98 <create_json>
 80032e2:	4606      	mov	r6, r0
			p++;
 80032e4:	9b01      	ldr	r3, [sp, #4]
 80032e6:	3301      	adds	r3, #1
 80032e8:	9301      	str	r3, [sp, #4]
				p = parse_value (js, 0, p, encoder);
 80032ea:	2700      	movs	r7, #0
 80032ec:	462b      	mov	r3, r5
 80032ee:	9a01      	ldr	r2, [sp, #4]
 80032f0:	4639      	mov	r1, r7
 80032f2:	4630      	mov	r0, r6
 80032f4:	f7ff fec6 	bl	8003084 <parse_value>
 80032f8:	4604      	mov	r4, r0
 80032fa:	9001      	str	r0, [sp, #4]
				if (!p) return 0; // error
 80032fc:	2800      	cmp	r0, #0
 80032fe:	f43f af56 	beq.w	80031ae <parse_value+0x12a>
				if (*p == ']') return p + 1; // end of array
 8003302:	7803      	ldrb	r3, [r0, #0]
 8003304:	2b5d      	cmp	r3, #93	; 0x5d
 8003306:	d1f1      	bne.n	80032ec <parse_value+0x268>
 8003308:	3401      	adds	r4, #1
 800330a:	e750      	b.n	80031ae <parse_value+0x12a>
			p++;
 800330c:	3401      	adds	r4, #1
 800330e:	9401      	str	r4, [sp, #4]
			js = create_json (NX_JSON_STRING, key, parent);
 8003310:	463a      	mov	r2, r7
 8003312:	4631      	mov	r1, r6
 8003314:	2003      	movs	r0, #3
 8003316:	f7ff fcbf 	bl	8002c98 <create_json>
 800331a:	4606      	mov	r6, r0
			js->text_value = unescape_string (p, &p, encoder);
 800331c:	462a      	mov	r2, r5
 800331e:	a901      	add	r1, sp, #4
 8003320:	9801      	ldr	r0, [sp, #4]
 8003322:	f7ff fcdd 	bl	8002ce0 <unescape_string>
 8003326:	4604      	mov	r4, r0
 8003328:	60b0      	str	r0, [r6, #8]
			if (!js->text_value) return 0; // propagate error
 800332a:	2800      	cmp	r0, #0
 800332c:	f43f af3f 	beq.w	80031ae <parse_value+0x12a>
			return p;
 8003330:	9c01      	ldr	r4, [sp, #4]
 8003332:	e73c      	b.n	80031ae <parse_value+0x12a>
			js = create_json (NX_JSON_INTEGER, key, parent);
 8003334:	463a      	mov	r2, r7
 8003336:	4631      	mov	r1, r6
 8003338:	2004      	movs	r0, #4
 800333a:	f7ff fcad 	bl	8002c98 <create_json>
 800333e:	4604      	mov	r4, r0
			if (*p == '-') {
 8003340:	9801      	ldr	r0, [sp, #4]
 8003342:	7803      	ldrb	r3, [r0, #0]
 8003344:	2b2d      	cmp	r3, #45	; 0x2d
 8003346:	d01d      	beq.n	8003384 <parse_value+0x300>
				js->num.u_value = (nxjson_u64) strtoull (p, &pe, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	a903      	add	r1, sp, #12
 800334c:	f001 fe82 	bl	8005054 <strtoull>
 8003350:	e9c4 0102 	strd	r0, r1, [r4, #8]
			if (pe == p || errno == ERANGE) {
 8003354:	9a03      	ldr	r2, [sp, #12]
 8003356:	9b01      	ldr	r3, [sp, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d01a      	beq.n	8003392 <parse_value+0x30e>
 800335c:	f000 fa8a 	bl	8003874 <__errno>
 8003360:	6803      	ldr	r3, [r0, #0]
 8003362:	2b22      	cmp	r3, #34	; 0x22
 8003364:	d015      	beq.n	8003392 <parse_value+0x30e>
			if (*pe == '.' || *pe == 'e' || *pe == 'E') { // double value
 8003366:	9b03      	ldr	r3, [sp, #12]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b2e      	cmp	r3, #46	; 0x2e
 800336c:	d01c      	beq.n	80033a8 <parse_value+0x324>
 800336e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003372:	2b45      	cmp	r3, #69	; 0x45
 8003374:	d018      	beq.n	80033a8 <parse_value+0x324>
					js->num.dbl_value = js->num.u_value;
 8003376:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800337a:	f7fd f91f 	bl	80005bc <__aeabi_ul2d>
 800337e:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8003382:	e022      	b.n	80033ca <parse_value+0x346>
				js->num.s_value = (nxjson_s64) strtoll (p, &pe, 0);
 8003384:	2200      	movs	r2, #0
 8003386:	a903      	add	r1, sp, #12
 8003388:	f001 fdc2 	bl	8004f10 <strtoll>
 800338c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003390:	e7e0      	b.n	8003354 <parse_value+0x2d0>
				NX_JSON_REPORT_ERROR("invalid number", p);
 8003392:	4b23      	ldr	r3, [pc, #140]	; (8003420 <parse_value+0x39c>)
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	9b01      	ldr	r3, [sp, #4]
 8003398:	f44f 7295 	mov.w	r2, #298	; 0x12a
 800339c:	4924      	ldr	r1, [pc, #144]	; (8003430 <parse_value+0x3ac>)
 800339e:	68c0      	ldr	r0, [r0, #12]
 80033a0:	f000 fa6e 	bl	8003880 <fiprintf>
				return 0; // error
 80033a4:	2400      	movs	r4, #0
 80033a6:	e702      	b.n	80031ae <parse_value+0x12a>
				js->type = NX_JSON_DOUBLE;
 80033a8:	2305      	movs	r3, #5
 80033aa:	7023      	strb	r3, [r4, #0]
				js->num.dbl_value = strtod (p, &pe);
 80033ac:	a903      	add	r1, sp, #12
 80033ae:	9801      	ldr	r0, [sp, #4]
 80033b0:	f001 fd0c 	bl	8004dcc <strtod>
 80033b4:	ed84 0b04 	vstr	d0, [r4, #16]
				if (pe == p || errno == ERANGE) {
 80033b8:	9a03      	ldr	r2, [sp, #12]
 80033ba:	9b01      	ldr	r3, [sp, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d006      	beq.n	80033ce <parse_value+0x34a>
 80033c0:	f000 fa58 	bl	8003874 <__errno>
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	2b22      	cmp	r3, #34	; 0x22
 80033c8:	d001      	beq.n	80033ce <parse_value+0x34a>
			return pe;
 80033ca:	9c03      	ldr	r4, [sp, #12]
 80033cc:	e6ef      	b.n	80031ae <parse_value+0x12a>
					NX_JSON_REPORT_ERROR("invalid number", p);
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <parse_value+0x39c>)
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	9b01      	ldr	r3, [sp, #4]
 80033d4:	f240 1231 	movw	r2, #305	; 0x131
 80033d8:	4915      	ldr	r1, [pc, #84]	; (8003430 <parse_value+0x3ac>)
 80033da:	68c0      	ldr	r0, [r0, #12]
 80033dc:	f000 fa50 	bl	8003880 <fiprintf>
					return 0; // error
 80033e0:	2400      	movs	r4, #0
 80033e2:	e6e4      	b.n	80031ae <parse_value+0x12a>
			if (!strncmp (p, "true", 4)) {
 80033e4:	2204      	movs	r2, #4
 80033e6:	4913      	ldr	r1, [pc, #76]	; (8003434 <parse_value+0x3b0>)
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 feb6 	bl	800415a <strncmp>
 80033ee:	b958      	cbnz	r0, 8003408 <parse_value+0x384>
				js = create_json (NX_JSON_BOOL, key, parent);
 80033f0:	463a      	mov	r2, r7
 80033f2:	4631      	mov	r1, r6
 80033f4:	2006      	movs	r0, #6
 80033f6:	f7ff fc4f 	bl	8002c98 <create_json>
				js->num.u_value = 1;
 80033fa:	2201      	movs	r2, #1
 80033fc:	2300      	movs	r3, #0
 80033fe:	e9c0 2302 	strd	r2, r3, [r0, #8]
				return p + 4;
 8003402:	9c01      	ldr	r4, [sp, #4]
 8003404:	3404      	adds	r4, #4
 8003406:	e6d2      	b.n	80031ae <parse_value+0x12a>
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <parse_value+0x39c>)
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	4623      	mov	r3, r4
 800340e:	f240 1243 	movw	r2, #323	; 0x143
 8003412:	4905      	ldr	r1, [pc, #20]	; (8003428 <parse_value+0x3a4>)
 8003414:	68c0      	ldr	r0, [r0, #12]
 8003416:	f000 fa33 	bl	8003880 <fiprintf>
			return 0; // error
 800341a:	2400      	movs	r4, #0
 800341c:	e6c7      	b.n	80031ae <parse_value+0x12a>
 800341e:	bf00      	nop
 8003420:	2000000c 	.word	0x2000000c
 8003424:	08006a5c 	.word	0x08006a5c
 8003428:	08006a94 	.word	0x08006a94
 800342c:	08006930 	.word	0x08006930
 8003430:	08006ac8 	.word	0x08006ac8
 8003434:	08006af8 	.word	0x08006af8
			if (!strncmp (p, "false", 5)) {
 8003438:	2205      	movs	r2, #5
 800343a:	4936      	ldr	r1, [pc, #216]	; (8003514 <parse_value+0x490>)
 800343c:	4620      	mov	r0, r4
 800343e:	f000 fe8c 	bl	800415a <strncmp>
 8003442:	b958      	cbnz	r0, 800345c <parse_value+0x3d8>
				js = create_json (NX_JSON_BOOL, key, parent);
 8003444:	463a      	mov	r2, r7
 8003446:	4631      	mov	r1, r6
 8003448:	2006      	movs	r0, #6
 800344a:	f7ff fc25 	bl	8002c98 <create_json>
				js->num.u_value = 0;
 800344e:	2200      	movs	r2, #0
 8003450:	2300      	movs	r3, #0
 8003452:	e9c0 2302 	strd	r2, r3, [r0, #8]
				return p + 5;
 8003456:	9c01      	ldr	r4, [sp, #4]
 8003458:	3405      	adds	r4, #5
 800345a:	e6a8      	b.n	80031ae <parse_value+0x12a>
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 800345c:	4b2e      	ldr	r3, [pc, #184]	; (8003518 <parse_value+0x494>)
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	4623      	mov	r3, r4
 8003462:	f240 124b 	movw	r2, #331	; 0x14b
 8003466:	492d      	ldr	r1, [pc, #180]	; (800351c <parse_value+0x498>)
 8003468:	68c0      	ldr	r0, [r0, #12]
 800346a:	f000 fa09 	bl	8003880 <fiprintf>
			return 0; // error
 800346e:	2400      	movs	r4, #0
 8003470:	e69d      	b.n	80031ae <parse_value+0x12a>
			if (!strncmp (p, "null", 4)) {
 8003472:	2204      	movs	r2, #4
 8003474:	492a      	ldr	r1, [pc, #168]	; (8003520 <parse_value+0x49c>)
 8003476:	4620      	mov	r0, r4
 8003478:	f000 fe6f 	bl	800415a <strncmp>
 800347c:	b930      	cbnz	r0, 800348c <parse_value+0x408>
				create_json (NX_JSON_NULL, key, parent);
 800347e:	463a      	mov	r2, r7
 8003480:	4631      	mov	r1, r6
 8003482:	f7ff fc09 	bl	8002c98 <create_json>
				return p + 4;
 8003486:	9c01      	ldr	r4, [sp, #4]
 8003488:	3404      	adds	r4, #4
 800348a:	e690      	b.n	80031ae <parse_value+0x12a>
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 800348c:	4b22      	ldr	r3, [pc, #136]	; (8003518 <parse_value+0x494>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	4623      	mov	r3, r4
 8003492:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8003496:	4921      	ldr	r1, [pc, #132]	; (800351c <parse_value+0x498>)
 8003498:	68c0      	ldr	r0, [r0, #12]
 800349a:	f000 f9f1 	bl	8003880 <fiprintf>
			return 0; // error
 800349e:	2400      	movs	r4, #0
 80034a0:	e685      	b.n	80031ae <parse_value+0x12a>
			if (p[1] == '/') { // line comment
 80034a2:	7863      	ldrb	r3, [r4, #1]
 80034a4:	2b2f      	cmp	r3, #47	; 0x2f
 80034a6:	d00a      	beq.n	80034be <parse_value+0x43a>
			} else if (p[1] == '*') { // block comment
 80034a8:	2b2a      	cmp	r3, #42	; 0x2a
 80034aa:	d11d      	bne.n	80034e8 <parse_value+0x464>
				p = skip_block_comment (p + 2);
 80034ac:	1ca0      	adds	r0, r4, #2
 80034ae:	f7ff fbc7 	bl	8002c40 <skip_block_comment>
 80034b2:	4604      	mov	r4, r0
 80034b4:	9001      	str	r0, [sp, #4]
				if (!p) return 0;
 80034b6:	2800      	cmp	r0, #0
 80034b8:	f47f aded 	bne.w	8003096 <parse_value+0x12>
 80034bc:	e677      	b.n	80031ae <parse_value+0x12a>
				p = strchr (p + 2, '\n');
 80034be:	4649      	mov	r1, r9
 80034c0:	1ca0      	adds	r0, r4, #2
 80034c2:	f000 fe3d 	bl	8004140 <strchr>
 80034c6:	4682      	mov	sl, r0
 80034c8:	9001      	str	r0, [sp, #4]
				if (!p) {
 80034ca:	b110      	cbz	r0, 80034d2 <parse_value+0x44e>
				p++;
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	e5e1      	b.n	8003096 <parse_value+0x12>
					NX_JSON_REPORT_ERROR("endless comment", ps);
 80034d2:	4b11      	ldr	r3, [pc, #68]	; (8003518 <parse_value+0x494>)
 80034d4:	6818      	ldr	r0, [r3, #0]
 80034d6:	4623      	mov	r3, r4
 80034d8:	f240 1259 	movw	r2, #345	; 0x159
 80034dc:	4911      	ldr	r1, [pc, #68]	; (8003524 <parse_value+0x4a0>)
 80034de:	68c0      	ldr	r0, [r0, #12]
 80034e0:	f000 f9ce 	bl	8003880 <fiprintf>
					return 0; // error
 80034e4:	4654      	mov	r4, sl
 80034e6:	e662      	b.n	80031ae <parse_value+0x12a>
				NX_JSON_REPORT_ERROR("unexpected chars", p);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	; (8003518 <parse_value+0x494>)
 80034ea:	6818      	ldr	r0, [r3, #0]
 80034ec:	4623      	mov	r3, r4
 80034ee:	f240 1261 	movw	r2, #353	; 0x161
 80034f2:	490a      	ldr	r1, [pc, #40]	; (800351c <parse_value+0x498>)
 80034f4:	68c0      	ldr	r0, [r0, #12]
 80034f6:	f000 f9c3 	bl	8003880 <fiprintf>
				return 0; // error
 80034fa:	2400      	movs	r4, #0
 80034fc:	e657      	b.n	80031ae <parse_value+0x12a>
			NX_JSON_REPORT_ERROR("unexpected chars", p);
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <parse_value+0x494>)
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	4623      	mov	r3, r4
 8003504:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8003508:	4904      	ldr	r1, [pc, #16]	; (800351c <parse_value+0x498>)
 800350a:	68c0      	ldr	r0, [r0, #12]
 800350c:	f000 f9b8 	bl	8003880 <fiprintf>
			return 0; // error
 8003510:	2400      	movs	r4, #0
 8003512:	e64c      	b.n	80031ae <parse_value+0x12a>
 8003514:	08006b00 	.word	0x08006b00
 8003518:	2000000c 	.word	0x2000000c
 800351c:	08006a94 	.word	0x08006a94
 8003520:	08006b08 	.word	0x08006b08
 8003524:	08006930 	.word	0x08006930

08003528 <nx_json_get>:
	}
	return js.children.first;
}

const nx_json *nx_json_get(const nx_json *json, const char *key)
{
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	460d      	mov	r5, r1
	nx_json *js;
	for (js = json->children.first; js; js = js->next)
 800352c:	68c4      	ldr	r4, [r0, #12]
 800352e:	b914      	cbnz	r4, 8003536 <nx_json_get+0xe>
 8003530:	e009      	b.n	8003546 <nx_json_get+0x1e>
 8003532:	69a4      	ldr	r4, [r4, #24]
 8003534:	b13c      	cbz	r4, 8003546 <nx_json_get+0x1e>
	{
		if (js->key && !strcmp (js->key, key)) return js;
 8003536:	6860      	ldr	r0, [r4, #4]
 8003538:	2800      	cmp	r0, #0
 800353a:	d0fa      	beq.n	8003532 <nx_json_get+0xa>
 800353c:	4629      	mov	r1, r5
 800353e:	f7fc fe4f 	bl	80001e0 <strcmp>
 8003542:	2800      	cmp	r0, #0
 8003544:	d1f5      	bne.n	8003532 <nx_json_get+0xa>
	}
	return NULL;
}
 8003546:	4620      	mov	r0, r4
 8003548:	bd38      	pop	{r3, r4, r5, pc}

0800354a <nx_json_free>:
	return NULL;
}

void nx_json_free(const nx_json *js)
{
	if (!js)
 800354a:	b1a0      	cbz	r0, 8003576 <nx_json_free+0x2c>
{
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	4605      	mov	r5, r0
	{
		return;
	}
	if (js->type == NX_JSON_OBJECT || js->type == NX_JSON_ARRAY)
 8003550:	7803      	ldrb	r3, [r0, #0]
 8003552:	3b01      	subs	r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d903      	bls.n	8003562 <nx_json_free+0x18>
			p1 = p->next;
			nx_json_free (p);
			p = p1;
		}
	}
	NX_JSON_FREE(js);
 800355a:	4628      	mov	r0, r5
 800355c:	f000 f9ce 	bl	80038fc <free>
}
 8003560:	bd38      	pop	{r3, r4, r5, pc}
		nx_json *p = js->children.first;
 8003562:	68c4      	ldr	r4, [r0, #12]
		while (p) {
 8003564:	2c00      	cmp	r4, #0
 8003566:	d0f8      	beq.n	800355a <nx_json_free+0x10>
			p1 = p->next;
 8003568:	4620      	mov	r0, r4
 800356a:	69a4      	ldr	r4, [r4, #24]
			nx_json_free (p);
 800356c:	f7ff ffed 	bl	800354a <nx_json_free>
		while (p) {
 8003570:	2c00      	cmp	r4, #0
 8003572:	d1f9      	bne.n	8003568 <nx_json_free+0x1e>
 8003574:	e7f1      	b.n	800355a <nx_json_free+0x10>
 8003576:	4770      	bx	lr

08003578 <nx_json_parse>:
{
 8003578:	b530      	push	{r4, r5, lr}
 800357a:	b089      	sub	sp, #36	; 0x24
 800357c:	4604      	mov	r4, r0
 800357e:	460d      	mov	r5, r1
	nx_json js = {0};
 8003580:	2220      	movs	r2, #32
 8003582:	2100      	movs	r1, #0
 8003584:	4668      	mov	r0, sp
 8003586:	f000 f9df 	bl	8003948 <memset>
	if (!parse_value (&js, 0, text, encoder))
 800358a:	462b      	mov	r3, r5
 800358c:	4622      	mov	r2, r4
 800358e:	2100      	movs	r1, #0
 8003590:	4668      	mov	r0, sp
 8003592:	f7ff fd77 	bl	8003084 <parse_value>
 8003596:	b110      	cbz	r0, 800359e <nx_json_parse+0x26>
	return js.children.first;
 8003598:	9803      	ldr	r0, [sp, #12]
}
 800359a:	b009      	add	sp, #36	; 0x24
 800359c:	bd30      	pop	{r4, r5, pc}
 800359e:	4604      	mov	r4, r0
		if (js.children.first) nx_json_free (js.children.first);
 80035a0:	9803      	ldr	r0, [sp, #12]
 80035a2:	2800      	cmp	r0, #0
 80035a4:	d0f9      	beq.n	800359a <nx_json_parse+0x22>
 80035a6:	f7ff ffd0 	bl	800354a <nx_json_free>
		return 0;
 80035aa:	4620      	mov	r0, r4
 80035ac:	e7f5      	b.n	800359a <nx_json_parse+0x22>
	...

080035b0 <nx_json_parse_utf8>:
{
 80035b0:	b508      	push	{r3, lr}
	return nx_json_parse (text, unicode_to_utf8);
 80035b2:	4902      	ldr	r1, [pc, #8]	; (80035bc <nx_json_parse_utf8+0xc>)
 80035b4:	f7ff ffe0 	bl	8003578 <nx_json_parse>
}
 80035b8:	bd08      	pop	{r3, pc}
 80035ba:	bf00      	nop
 80035bc:	08002bb9 	.word	0x08002bb9

080035c0 <wifiModuleInit>:
/**
 * @brief
 *
 */
void wifiModuleInit(void)
{
 80035c0:	b510      	push	{r4, lr}
	memset(&hWifiModule, 0, sizeof(hWifiModule_t));
 80035c2:	4c08      	ldr	r4, [pc, #32]	; (80035e4 <wifiModuleInit+0x24>)
 80035c4:	f44f 721b 	mov.w	r2, #620	; 0x26c
 80035c8:	2100      	movs	r1, #0
 80035ca:	4620      	mov	r0, r4
 80035cc:	f000 f9bc 	bl	8003948 <memset>

	hWifiModule.controlFlags.flag.configurationFase = ENABLE;

	hWifiModule.controlFlags.flag.configurationNotify = ENABLE;
 80035d0:	230c      	movs	r3, #12
 80035d2:	7023      	strb	r3, [r4, #0]

	HAL_GPIO_WritePin(WIFI_MODULE_RESET_GPIO_PORT, WIFI_MODULE_RESET_PIN, ENABLE);
 80035d4:	2201      	movs	r2, #1
 80035d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035da:	4803      	ldr	r0, [pc, #12]	; (80035e8 <wifiModuleInit+0x28>)
 80035dc:	f7fe fb54 	bl	8001c88 <HAL_GPIO_WritePin>
}
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	bf00      	nop
 80035e4:	2000030c 	.word	0x2000030c
 80035e8:	40020400 	.word	0x40020400

080035ec <wifiModuleConfigSequence>:
/**
 * @brief
 *
 */
void wifiModuleConfigSequence(void)
{
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint8_t configStages = 0;

	memset(hWifiModule.txBuffer,0, WIFI_MODULE_BUFFER_SIZE);
 80035ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035f2:	2100      	movs	r1, #0
 80035f4:	486b      	ldr	r0, [pc, #428]	; (80037a4 <wifiModuleConfigSequence+0x1b8>)
 80035f6:	f000 f9a7 	bl	8003948 <memset>

	switch(configStages)
 80035fa:	4b6b      	ldr	r3, [pc, #428]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b0a      	cmp	r3, #10
 8003600:	d80e      	bhi.n	8003620 <wifiModuleConfigSequence+0x34>
 8003602:	e8df f003 	tbb	[pc, r3]
 8003606:	1306      	.short	0x1306
 8003608:	3f32251c 	.word	0x3f32251c
 800360c:	8f6c5f52 	.word	0x8f6c5f52
 8003610:	bb          	.byte	0xbb
 8003611:	00          	.byte	0x00
	{
		case 0:

			strcpy(hWifiModule.txBuffer, AT_FIRMWARE_MENU_OPEN);
 8003612:	4a66      	ldr	r2, [pc, #408]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 8003614:	231c      	movs	r3, #28
 8003616:	8293      	strh	r3, [r2, #20]

			hWifiModule.txPacketSize = 1;
 8003618:	2301      	movs	r3, #1
 800361a:	8053      	strh	r3, [r2, #2]

			++configStages;
 800361c:	4a62      	ldr	r2, [pc, #392]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 800361e:	7013      	strb	r3, [r2, #0]

			++configStages;
			break;
	}

	hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 8003620:	4a62      	ldr	r2, [pc, #392]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 8003622:	7813      	ldrb	r3, [r2, #0]
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	7013      	strb	r3, [r2, #0]
}
 800362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			strcpy(hWifiModule.txBuffer, AT_FIRMWARE_MENU_CONFIRM);
 800362c:	4b5f      	ldr	r3, [pc, #380]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 800362e:	2255      	movs	r2, #85	; 0x55
 8003630:	829a      	strh	r2, [r3, #20]
			hWifiModule.txPacketSize = 1;
 8003632:	2201      	movs	r2, #1
 8003634:	805a      	strh	r2, [r3, #2]
			++configStages;
 8003636:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 8003638:	2202      	movs	r2, #2
 800363a:	701a      	strb	r2, [r3, #0]
			break;
 800363c:	e7f0      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_DEFAULT_WiFi_FIRMWARE);
 800363e:	4b5b      	ldr	r3, [pc, #364]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 8003640:	2231      	movs	r2, #49	; 0x31
 8003642:	829a      	strh	r2, [r3, #20]
			hWifiModule.txPacketSize = 1;
 8003644:	2201      	movs	r2, #1
 8003646:	805a      	strh	r2, [r3, #2]
			++configStages;
 8003648:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 800364a:	2203      	movs	r2, #3
 800364c:	701a      	strb	r2, [r3, #0]
			break;
 800364e:	e7e7      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_OPERAND_SETTINGS);
 8003650:	4c56      	ldr	r4, [pc, #344]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 8003652:	225a      	movs	r2, #90	; 0x5a
 8003654:	4956      	ldr	r1, [pc, #344]	; (80037b0 <wifiModuleConfigSequence+0x1c4>)
 8003656:	f104 0014 	add.w	r0, r4, #20
 800365a:	f000 f967 	bl	800392c <memcpy>
			hWifiModule.txPacketSize = strlen(AT_OPERAND_SETTINGS);
 800365e:	2359      	movs	r3, #89	; 0x59
 8003660:	8063      	strh	r3, [r4, #2]
			++configStages;
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 8003664:	2204      	movs	r2, #4
 8003666:	701a      	strb	r2, [r3, #0]
			break;
 8003668:	e7da      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_BAND_SELECT);
 800366a:	4d50      	ldr	r5, [pc, #320]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 800366c:	f105 0414 	add.w	r4, r5, #20
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <wifiModuleConfigSequence+0x1c8>)
 8003672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			hWifiModule.txPacketSize = strlen(AT_BAND_SELECT);
 8003678:	230f      	movs	r3, #15
 800367a:	806b      	strh	r3, [r5, #2]
			++configStages;
 800367c:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 800367e:	2205      	movs	r2, #5
 8003680:	701a      	strb	r2, [r3, #0]
			break;
 8003682:	e7cd      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_FRAME_SET);
 8003684:	4d49      	ldr	r5, [pc, #292]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 8003686:	f105 0c14 	add.w	ip, r5, #20
 800368a:	4c4b      	ldr	r4, [pc, #300]	; (80037b8 <wifiModuleConfigSequence+0x1cc>)
 800368c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800368e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	f88c 3000 	strb.w	r3, [ip]
			hWifiModule.txPacketSize = strlen(AT_FRAME_SET);
 800369e:	2320      	movs	r3, #32
 80036a0:	806b      	strh	r3, [r5, #2]
			++configStages;
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 80036a4:	2206      	movs	r2, #6
 80036a6:	701a      	strb	r2, [r3, #0]
			break;
 80036a8:	e7ba      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_SETTINGS_INIT);
 80036aa:	4d40      	ldr	r5, [pc, #256]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 80036ac:	4b43      	ldr	r3, [pc, #268]	; (80037bc <wifiModuleConfigSequence+0x1d0>)
 80036ae:	f105 0414 	add.w	r4, r5, #20
 80036b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b4:	c407      	stmia	r4!, {r0, r1, r2}
 80036b6:	8023      	strh	r3, [r4, #0]
			hWifiModule.txPacketSize = strlen(AT_SETTINGS_INIT);
 80036b8:	230d      	movs	r3, #13
 80036ba:	806b      	strh	r3, [r5, #2]
			++configStages;
 80036bc:	4b3a      	ldr	r3, [pc, #232]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 80036be:	2207      	movs	r2, #7
 80036c0:	701a      	strb	r2, [r3, #0]
			break;
 80036c2:	e7ad      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_SSID_SCAN);
 80036c4:	4d39      	ldr	r5, [pc, #228]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 80036c6:	f105 0414 	add.w	r4, r5, #20
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <wifiModuleConfigSequence+0x1d4>)
 80036cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			hWifiModule.txPacketSize = strlen(AT_SSID_SCAN);
 80036d2:	230f      	movs	r3, #15
 80036d4:	806b      	strh	r3, [r5, #2]
			++configStages;
 80036d6:	4b34      	ldr	r3, [pc, #208]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 80036d8:	2208      	movs	r2, #8
 80036da:	701a      	strb	r2, [r3, #0]
			break;
 80036dc:	e7a0      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_PASSWORD_SET);
 80036de:	4e33      	ldr	r6, [pc, #204]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 80036e0:	f106 0414 	add.w	r4, r6, #20
 80036e4:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <wifiModuleConfigSequence+0x1d8>)
 80036e6:	4625      	mov	r5, r4
 80036e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ea:	c507      	stmia	r5!, {r0, r1, r2}
 80036ec:	802b      	strh	r3, [r5, #0]
			strcat(hWifiModule.txBuffer, SSID_PASSWORD);
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7fc fd80 	bl	80001f4 <strlen>
 80036f4:	4605      	mov	r5, r0
 80036f6:	1827      	adds	r7, r4, r0
 80036f8:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <wifiModuleConfigSequence+0x1dc>)
 80036fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036fc:	5160      	str	r0, [r4, r5]
 80036fe:	6079      	str	r1, [r7, #4]
 8003700:	60ba      	str	r2, [r7, #8]
			strcat(hWifiModule.txBuffer, AT_TERMINATOR);
 8003702:	4620      	mov	r0, r4
 8003704:	f7fc fd76 	bl	80001f4 <strlen>
 8003708:	1822      	adds	r2, r4, r0
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <wifiModuleConfigSequence+0x1e0>)
 800370c:	8819      	ldrh	r1, [r3, #0]
 800370e:	789b      	ldrb	r3, [r3, #2]
 8003710:	5221      	strh	r1, [r4, r0]
 8003712:	7093      	strb	r3, [r2, #2]
			hWifiModule.txPacketSize = strlen(hWifiModule.txBuffer);
 8003714:	4620      	mov	r0, r4
 8003716:	f7fc fd6d 	bl	80001f4 <strlen>
 800371a:	8070      	strh	r0, [r6, #2]
			++configStages;
 800371c:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 800371e:	2209      	movs	r2, #9
 8003720:	701a      	strb	r2, [r3, #0]
			break;
 8003722:	e77d      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_SSID_JOIN);
 8003724:	4f21      	ldr	r7, [pc, #132]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 8003726:	f107 0414 	add.w	r4, r7, #20
 800372a:	4b29      	ldr	r3, [pc, #164]	; (80037d0 <wifiModuleConfigSequence+0x1e4>)
 800372c:	4625      	mov	r5, r4
 800372e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003730:	c507      	stmia	r5!, {r0, r1, r2}
 8003732:	702b      	strb	r3, [r5, #0]
			strcat(hWifiModule.txBuffer, SSID_NAME);
 8003734:	4620      	mov	r0, r4
 8003736:	f7fc fd5d 	bl	80001f4 <strlen>
 800373a:	4684      	mov	ip, r0
 800373c:	1826      	adds	r6, r4, r0
 800373e:	4d25      	ldr	r5, [pc, #148]	; (80037d4 <wifiModuleConfigSequence+0x1e8>)
 8003740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003742:	f844 000c 	str.w	r0, [r4, ip]
 8003746:	6071      	str	r1, [r6, #4]
 8003748:	60b2      	str	r2, [r6, #8]
 800374a:	60f3      	str	r3, [r6, #12]
 800374c:	882b      	ldrh	r3, [r5, #0]
 800374e:	8233      	strh	r3, [r6, #16]
			strcat(hWifiModule.txBuffer, AT_SSID_JOIN_PARAMETERS);
 8003750:	4620      	mov	r0, r4
 8003752:	f7fc fd4f 	bl	80001f4 <strlen>
 8003756:	4684      	mov	ip, r0
 8003758:	1826      	adds	r6, r4, r0
 800375a:	4d1f      	ldr	r5, [pc, #124]	; (80037d8 <wifiModuleConfigSequence+0x1ec>)
 800375c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800375e:	f844 000c 	str.w	r0, [r4, ip]
 8003762:	6071      	str	r1, [r6, #4]
 8003764:	60b2      	str	r2, [r6, #8]
 8003766:	60f3      	str	r3, [r6, #12]
 8003768:	6828      	ldr	r0, [r5, #0]
 800376a:	6130      	str	r0, [r6, #16]
			hWifiModule.txPacketSize = strlen(hWifiModule.txBuffer);
 800376c:	4620      	mov	r0, r4
 800376e:	f7fc fd41 	bl	80001f4 <strlen>
 8003772:	8078      	strh	r0, [r7, #2]
			++configStages;
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 8003776:	220a      	movs	r2, #10
 8003778:	701a      	strb	r2, [r3, #0]
			break;
 800377a:	e751      	b.n	8003620 <wifiModuleConfigSequence+0x34>
			strcpy(hWifiModule.txBuffer, AT_IP_CONFIG_SET);
 800377c:	4e0b      	ldr	r6, [pc, #44]	; (80037ac <wifiModuleConfigSequence+0x1c0>)
 800377e:	f106 0414 	add.w	r4, r6, #20
 8003782:	4d16      	ldr	r5, [pc, #88]	; (80037dc <wifiModuleConfigSequence+0x1f0>)
 8003784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003788:	e895 0003 	ldmia.w	r5, {r0, r1}
 800378c:	e884 0003 	stmia.w	r4, {r0, r1}
			hWifiModule.txPacketSize = strlen(AT_IP_CONFIG_SET);
 8003790:	2317      	movs	r3, #23
 8003792:	8073      	strh	r3, [r6, #2]
			hWifiModule.controlFlags.flag.configurationFase = DISABLE;
 8003794:	7833      	ldrb	r3, [r6, #0]
 8003796:	f36f 0382 	bfc	r3, #2, #1
 800379a:	7033      	strb	r3, [r6, #0]
			++configStages;
 800379c:	4b02      	ldr	r3, [pc, #8]	; (80037a8 <wifiModuleConfigSequence+0x1bc>)
 800379e:	220b      	movs	r2, #11
 80037a0:	701a      	strb	r2, [r3, #0]
			break;
 80037a2:	e73d      	b.n	8003620 <wifiModuleConfigSequence+0x34>
 80037a4:	20000320 	.word	0x20000320
 80037a8:	20000308 	.word	0x20000308
 80037ac:	2000030c 	.word	0x2000030c
 80037b0:	08006b1c 	.word	0x08006b1c
 80037b4:	08006b78 	.word	0x08006b78
 80037b8:	08006b88 	.word	0x08006b88
 80037bc:	08006bac 	.word	0x08006bac
 80037c0:	08006bbc 	.word	0x08006bbc
 80037c4:	08006bcc 	.word	0x08006bcc
 80037c8:	08006bdc 	.word	0x08006bdc
 80037cc:	08006c6c 	.word	0x08006c6c
 80037d0:	08006be8 	.word	0x08006be8
 80037d4:	08006bf8 	.word	0x08006bf8
 80037d8:	08006c0c 	.word	0x08006c0c
 80037dc:	08006c20 	.word	0x08006c20

080037e0 <wifiModuleHttpGetRequest>:

void wifiModuleHttpGetRequest(void)
{
 80037e0:	b430      	push	{r4, r5}
	hWifiModule.controlFlags.flag.packetToTransmit = ENABLE;
 80037e2:	4d0f      	ldr	r5, [pc, #60]	; (8003820 <wifiModuleHttpGetRequest+0x40>)
 80037e4:	782b      	ldrb	r3, [r5, #0]
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	46ac      	mov	ip, r5
 80037ec:	f80c 3b14 	strb.w	r3, [ip], #20

	strcpy(hWifiModule.txBuffer, AT_HTTP_GET);
 80037f0:	4c0c      	ldr	r4, [pc, #48]	; (8003824 <wifiModuleHttpGetRequest+0x44>)
 80037f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80037f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80037fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003800:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003804:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003808:	f84c 0b04 	str.w	r0, [ip], #4
 800380c:	f82c 1b02 	strh.w	r1, [ip], #2
 8003810:	0c09      	lsrs	r1, r1, #16
 8003812:	f88c 1000 	strb.w	r1, [ip]

	hWifiModule.txPacketSize = strlen(AT_HTTP_GET);
 8003816:	2336      	movs	r3, #54	; 0x36
 8003818:	806b      	strh	r3, [r5, #2]
}
 800381a:	bc30      	pop	{r4, r5}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	2000030c 	.word	0x2000030c
 8003824:	08006c38 	.word	0x08006c38

08003828 <__assert_func>:
 8003828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800382a:	4614      	mov	r4, r2
 800382c:	461a      	mov	r2, r3
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <__assert_func+0x2c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4605      	mov	r5, r0
 8003834:	68d8      	ldr	r0, [r3, #12]
 8003836:	b14c      	cbz	r4, 800384c <__assert_func+0x24>
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <__assert_func+0x30>)
 800383a:	9100      	str	r1, [sp, #0]
 800383c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003840:	4906      	ldr	r1, [pc, #24]	; (800385c <__assert_func+0x34>)
 8003842:	462b      	mov	r3, r5
 8003844:	f000 f81c 	bl	8003880 <fiprintf>
 8003848:	f001 fcce 	bl	80051e8 <abort>
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <__assert_func+0x38>)
 800384e:	461c      	mov	r4, r3
 8003850:	e7f3      	b.n	800383a <__assert_func+0x12>
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c
 8003858:	08006c6f 	.word	0x08006c6f
 800385c:	08006c7c 	.word	0x08006c7c
 8003860:	08006caa 	.word	0x08006caa

08003864 <calloc>:
 8003864:	4b02      	ldr	r3, [pc, #8]	; (8003870 <calloc+0xc>)
 8003866:	460a      	mov	r2, r1
 8003868:	4601      	mov	r1, r0
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	f000 b874 	b.w	8003958 <_calloc_r>
 8003870:	2000000c 	.word	0x2000000c

08003874 <__errno>:
 8003874:	4b01      	ldr	r3, [pc, #4]	; (800387c <__errno+0x8>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	2000000c 	.word	0x2000000c

08003880 <fiprintf>:
 8003880:	b40e      	push	{r1, r2, r3}
 8003882:	b503      	push	{r0, r1, lr}
 8003884:	4601      	mov	r1, r0
 8003886:	ab03      	add	r3, sp, #12
 8003888:	4805      	ldr	r0, [pc, #20]	; (80038a0 <fiprintf+0x20>)
 800388a:	f853 2b04 	ldr.w	r2, [r3], #4
 800388e:	6800      	ldr	r0, [r0, #0]
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	f000 f981 	bl	8003b98 <_vfiprintf_r>
 8003896:	b002      	add	sp, #8
 8003898:	f85d eb04 	ldr.w	lr, [sp], #4
 800389c:	b003      	add	sp, #12
 800389e:	4770      	bx	lr
 80038a0:	2000000c 	.word	0x2000000c

080038a4 <__libc_init_array>:
 80038a4:	b570      	push	{r4, r5, r6, lr}
 80038a6:	4d0d      	ldr	r5, [pc, #52]	; (80038dc <__libc_init_array+0x38>)
 80038a8:	4c0d      	ldr	r4, [pc, #52]	; (80038e0 <__libc_init_array+0x3c>)
 80038aa:	1b64      	subs	r4, r4, r5
 80038ac:	10a4      	asrs	r4, r4, #2
 80038ae:	2600      	movs	r6, #0
 80038b0:	42a6      	cmp	r6, r4
 80038b2:	d109      	bne.n	80038c8 <__libc_init_array+0x24>
 80038b4:	4d0b      	ldr	r5, [pc, #44]	; (80038e4 <__libc_init_array+0x40>)
 80038b6:	4c0c      	ldr	r4, [pc, #48]	; (80038e8 <__libc_init_array+0x44>)
 80038b8:	f003 f812 	bl	80068e0 <_init>
 80038bc:	1b64      	subs	r4, r4, r5
 80038be:	10a4      	asrs	r4, r4, #2
 80038c0:	2600      	movs	r6, #0
 80038c2:	42a6      	cmp	r6, r4
 80038c4:	d105      	bne.n	80038d2 <__libc_init_array+0x2e>
 80038c6:	bd70      	pop	{r4, r5, r6, pc}
 80038c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80038cc:	4798      	blx	r3
 80038ce:	3601      	adds	r6, #1
 80038d0:	e7ee      	b.n	80038b0 <__libc_init_array+0xc>
 80038d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80038d6:	4798      	blx	r3
 80038d8:	3601      	adds	r6, #1
 80038da:	e7f2      	b.n	80038c2 <__libc_init_array+0x1e>
 80038dc:	080070ac 	.word	0x080070ac
 80038e0:	080070ac 	.word	0x080070ac
 80038e4:	080070ac 	.word	0x080070ac
 80038e8:	080070b0 	.word	0x080070b0

080038ec <malloc>:
 80038ec:	4b02      	ldr	r3, [pc, #8]	; (80038f8 <malloc+0xc>)
 80038ee:	4601      	mov	r1, r0
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	f000 b8b3 	b.w	8003a5c <_malloc_r>
 80038f6:	bf00      	nop
 80038f8:	2000000c 	.word	0x2000000c

080038fc <free>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <free+0xc>)
 80038fe:	4601      	mov	r1, r0
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f000 b83f 	b.w	8003984 <_free_r>
 8003906:	bf00      	nop
 8003908:	2000000c 	.word	0x2000000c

0800390c <memcmp>:
 800390c:	b510      	push	{r4, lr}
 800390e:	3901      	subs	r1, #1
 8003910:	4402      	add	r2, r0
 8003912:	4290      	cmp	r0, r2
 8003914:	d101      	bne.n	800391a <memcmp+0xe>
 8003916:	2000      	movs	r0, #0
 8003918:	e005      	b.n	8003926 <memcmp+0x1a>
 800391a:	7803      	ldrb	r3, [r0, #0]
 800391c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003920:	42a3      	cmp	r3, r4
 8003922:	d001      	beq.n	8003928 <memcmp+0x1c>
 8003924:	1b18      	subs	r0, r3, r4
 8003926:	bd10      	pop	{r4, pc}
 8003928:	3001      	adds	r0, #1
 800392a:	e7f2      	b.n	8003912 <memcmp+0x6>

0800392c <memcpy>:
 800392c:	440a      	add	r2, r1
 800392e:	4291      	cmp	r1, r2
 8003930:	f100 33ff 	add.w	r3, r0, #4294967295
 8003934:	d100      	bne.n	8003938 <memcpy+0xc>
 8003936:	4770      	bx	lr
 8003938:	b510      	push	{r4, lr}
 800393a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800393e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003942:	4291      	cmp	r1, r2
 8003944:	d1f9      	bne.n	800393a <memcpy+0xe>
 8003946:	bd10      	pop	{r4, pc}

08003948 <memset>:
 8003948:	4402      	add	r2, r0
 800394a:	4603      	mov	r3, r0
 800394c:	4293      	cmp	r3, r2
 800394e:	d100      	bne.n	8003952 <memset+0xa>
 8003950:	4770      	bx	lr
 8003952:	f803 1b01 	strb.w	r1, [r3], #1
 8003956:	e7f9      	b.n	800394c <memset+0x4>

08003958 <_calloc_r>:
 8003958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800395a:	fba1 2402 	umull	r2, r4, r1, r2
 800395e:	b94c      	cbnz	r4, 8003974 <_calloc_r+0x1c>
 8003960:	4611      	mov	r1, r2
 8003962:	9201      	str	r2, [sp, #4]
 8003964:	f000 f87a 	bl	8003a5c <_malloc_r>
 8003968:	9a01      	ldr	r2, [sp, #4]
 800396a:	4605      	mov	r5, r0
 800396c:	b930      	cbnz	r0, 800397c <_calloc_r+0x24>
 800396e:	4628      	mov	r0, r5
 8003970:	b003      	add	sp, #12
 8003972:	bd30      	pop	{r4, r5, pc}
 8003974:	220c      	movs	r2, #12
 8003976:	6002      	str	r2, [r0, #0]
 8003978:	2500      	movs	r5, #0
 800397a:	e7f8      	b.n	800396e <_calloc_r+0x16>
 800397c:	4621      	mov	r1, r4
 800397e:	f7ff ffe3 	bl	8003948 <memset>
 8003982:	e7f4      	b.n	800396e <_calloc_r+0x16>

08003984 <_free_r>:
 8003984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003986:	2900      	cmp	r1, #0
 8003988:	d044      	beq.n	8003a14 <_free_r+0x90>
 800398a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800398e:	9001      	str	r0, [sp, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f1a1 0404 	sub.w	r4, r1, #4
 8003996:	bfb8      	it	lt
 8003998:	18e4      	addlt	r4, r4, r3
 800399a:	f002 f9cd 	bl	8005d38 <__malloc_lock>
 800399e:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <_free_r+0x94>)
 80039a0:	9801      	ldr	r0, [sp, #4]
 80039a2:	6813      	ldr	r3, [r2, #0]
 80039a4:	b933      	cbnz	r3, 80039b4 <_free_r+0x30>
 80039a6:	6063      	str	r3, [r4, #4]
 80039a8:	6014      	str	r4, [r2, #0]
 80039aa:	b003      	add	sp, #12
 80039ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039b0:	f002 b9c8 	b.w	8005d44 <__malloc_unlock>
 80039b4:	42a3      	cmp	r3, r4
 80039b6:	d908      	bls.n	80039ca <_free_r+0x46>
 80039b8:	6825      	ldr	r5, [r4, #0]
 80039ba:	1961      	adds	r1, r4, r5
 80039bc:	428b      	cmp	r3, r1
 80039be:	bf01      	itttt	eq
 80039c0:	6819      	ldreq	r1, [r3, #0]
 80039c2:	685b      	ldreq	r3, [r3, #4]
 80039c4:	1949      	addeq	r1, r1, r5
 80039c6:	6021      	streq	r1, [r4, #0]
 80039c8:	e7ed      	b.n	80039a6 <_free_r+0x22>
 80039ca:	461a      	mov	r2, r3
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	b10b      	cbz	r3, 80039d4 <_free_r+0x50>
 80039d0:	42a3      	cmp	r3, r4
 80039d2:	d9fa      	bls.n	80039ca <_free_r+0x46>
 80039d4:	6811      	ldr	r1, [r2, #0]
 80039d6:	1855      	adds	r5, r2, r1
 80039d8:	42a5      	cmp	r5, r4
 80039da:	d10b      	bne.n	80039f4 <_free_r+0x70>
 80039dc:	6824      	ldr	r4, [r4, #0]
 80039de:	4421      	add	r1, r4
 80039e0:	1854      	adds	r4, r2, r1
 80039e2:	42a3      	cmp	r3, r4
 80039e4:	6011      	str	r1, [r2, #0]
 80039e6:	d1e0      	bne.n	80039aa <_free_r+0x26>
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	6053      	str	r3, [r2, #4]
 80039ee:	4421      	add	r1, r4
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	e7da      	b.n	80039aa <_free_r+0x26>
 80039f4:	d902      	bls.n	80039fc <_free_r+0x78>
 80039f6:	230c      	movs	r3, #12
 80039f8:	6003      	str	r3, [r0, #0]
 80039fa:	e7d6      	b.n	80039aa <_free_r+0x26>
 80039fc:	6825      	ldr	r5, [r4, #0]
 80039fe:	1961      	adds	r1, r4, r5
 8003a00:	428b      	cmp	r3, r1
 8003a02:	bf04      	itt	eq
 8003a04:	6819      	ldreq	r1, [r3, #0]
 8003a06:	685b      	ldreq	r3, [r3, #4]
 8003a08:	6063      	str	r3, [r4, #4]
 8003a0a:	bf04      	itt	eq
 8003a0c:	1949      	addeq	r1, r1, r5
 8003a0e:	6021      	streq	r1, [r4, #0]
 8003a10:	6054      	str	r4, [r2, #4]
 8003a12:	e7ca      	b.n	80039aa <_free_r+0x26>
 8003a14:	b003      	add	sp, #12
 8003a16:	bd30      	pop	{r4, r5, pc}
 8003a18:	20000578 	.word	0x20000578

08003a1c <sbrk_aligned>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	4e0e      	ldr	r6, [pc, #56]	; (8003a58 <sbrk_aligned+0x3c>)
 8003a20:	460c      	mov	r4, r1
 8003a22:	6831      	ldr	r1, [r6, #0]
 8003a24:	4605      	mov	r5, r0
 8003a26:	b911      	cbnz	r1, 8003a2e <sbrk_aligned+0x12>
 8003a28:	f000 fb7a 	bl	8004120 <_sbrk_r>
 8003a2c:	6030      	str	r0, [r6, #0]
 8003a2e:	4621      	mov	r1, r4
 8003a30:	4628      	mov	r0, r5
 8003a32:	f000 fb75 	bl	8004120 <_sbrk_r>
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	d00a      	beq.n	8003a50 <sbrk_aligned+0x34>
 8003a3a:	1cc4      	adds	r4, r0, #3
 8003a3c:	f024 0403 	bic.w	r4, r4, #3
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d007      	beq.n	8003a54 <sbrk_aligned+0x38>
 8003a44:	1a21      	subs	r1, r4, r0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f000 fb6a 	bl	8004120 <_sbrk_r>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d101      	bne.n	8003a54 <sbrk_aligned+0x38>
 8003a50:	f04f 34ff 	mov.w	r4, #4294967295
 8003a54:	4620      	mov	r0, r4
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	2000057c 	.word	0x2000057c

08003a5c <_malloc_r>:
 8003a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a60:	1ccd      	adds	r5, r1, #3
 8003a62:	f025 0503 	bic.w	r5, r5, #3
 8003a66:	3508      	adds	r5, #8
 8003a68:	2d0c      	cmp	r5, #12
 8003a6a:	bf38      	it	cc
 8003a6c:	250c      	movcc	r5, #12
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	4607      	mov	r7, r0
 8003a72:	db01      	blt.n	8003a78 <_malloc_r+0x1c>
 8003a74:	42a9      	cmp	r1, r5
 8003a76:	d905      	bls.n	8003a84 <_malloc_r+0x28>
 8003a78:	230c      	movs	r3, #12
 8003a7a:	603b      	str	r3, [r7, #0]
 8003a7c:	2600      	movs	r6, #0
 8003a7e:	4630      	mov	r0, r6
 8003a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a84:	4e2e      	ldr	r6, [pc, #184]	; (8003b40 <_malloc_r+0xe4>)
 8003a86:	f002 f957 	bl	8005d38 <__malloc_lock>
 8003a8a:	6833      	ldr	r3, [r6, #0]
 8003a8c:	461c      	mov	r4, r3
 8003a8e:	bb34      	cbnz	r4, 8003ade <_malloc_r+0x82>
 8003a90:	4629      	mov	r1, r5
 8003a92:	4638      	mov	r0, r7
 8003a94:	f7ff ffc2 	bl	8003a1c <sbrk_aligned>
 8003a98:	1c43      	adds	r3, r0, #1
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	d14d      	bne.n	8003b3a <_malloc_r+0xde>
 8003a9e:	6834      	ldr	r4, [r6, #0]
 8003aa0:	4626      	mov	r6, r4
 8003aa2:	2e00      	cmp	r6, #0
 8003aa4:	d140      	bne.n	8003b28 <_malloc_r+0xcc>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	4631      	mov	r1, r6
 8003aaa:	4638      	mov	r0, r7
 8003aac:	eb04 0803 	add.w	r8, r4, r3
 8003ab0:	f000 fb36 	bl	8004120 <_sbrk_r>
 8003ab4:	4580      	cmp	r8, r0
 8003ab6:	d13a      	bne.n	8003b2e <_malloc_r+0xd2>
 8003ab8:	6821      	ldr	r1, [r4, #0]
 8003aba:	3503      	adds	r5, #3
 8003abc:	1a6d      	subs	r5, r5, r1
 8003abe:	f025 0503 	bic.w	r5, r5, #3
 8003ac2:	3508      	adds	r5, #8
 8003ac4:	2d0c      	cmp	r5, #12
 8003ac6:	bf38      	it	cc
 8003ac8:	250c      	movcc	r5, #12
 8003aca:	4629      	mov	r1, r5
 8003acc:	4638      	mov	r0, r7
 8003ace:	f7ff ffa5 	bl	8003a1c <sbrk_aligned>
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d02b      	beq.n	8003b2e <_malloc_r+0xd2>
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	442b      	add	r3, r5
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	e00e      	b.n	8003afc <_malloc_r+0xa0>
 8003ade:	6822      	ldr	r2, [r4, #0]
 8003ae0:	1b52      	subs	r2, r2, r5
 8003ae2:	d41e      	bmi.n	8003b22 <_malloc_r+0xc6>
 8003ae4:	2a0b      	cmp	r2, #11
 8003ae6:	d916      	bls.n	8003b16 <_malloc_r+0xba>
 8003ae8:	1961      	adds	r1, r4, r5
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	6025      	str	r5, [r4, #0]
 8003aee:	bf18      	it	ne
 8003af0:	6059      	strne	r1, [r3, #4]
 8003af2:	6863      	ldr	r3, [r4, #4]
 8003af4:	bf08      	it	eq
 8003af6:	6031      	streq	r1, [r6, #0]
 8003af8:	5162      	str	r2, [r4, r5]
 8003afa:	604b      	str	r3, [r1, #4]
 8003afc:	4638      	mov	r0, r7
 8003afe:	f104 060b 	add.w	r6, r4, #11
 8003b02:	f002 f91f 	bl	8005d44 <__malloc_unlock>
 8003b06:	f026 0607 	bic.w	r6, r6, #7
 8003b0a:	1d23      	adds	r3, r4, #4
 8003b0c:	1af2      	subs	r2, r6, r3
 8003b0e:	d0b6      	beq.n	8003a7e <_malloc_r+0x22>
 8003b10:	1b9b      	subs	r3, r3, r6
 8003b12:	50a3      	str	r3, [r4, r2]
 8003b14:	e7b3      	b.n	8003a7e <_malloc_r+0x22>
 8003b16:	6862      	ldr	r2, [r4, #4]
 8003b18:	42a3      	cmp	r3, r4
 8003b1a:	bf0c      	ite	eq
 8003b1c:	6032      	streq	r2, [r6, #0]
 8003b1e:	605a      	strne	r2, [r3, #4]
 8003b20:	e7ec      	b.n	8003afc <_malloc_r+0xa0>
 8003b22:	4623      	mov	r3, r4
 8003b24:	6864      	ldr	r4, [r4, #4]
 8003b26:	e7b2      	b.n	8003a8e <_malloc_r+0x32>
 8003b28:	4634      	mov	r4, r6
 8003b2a:	6876      	ldr	r6, [r6, #4]
 8003b2c:	e7b9      	b.n	8003aa2 <_malloc_r+0x46>
 8003b2e:	230c      	movs	r3, #12
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4638      	mov	r0, r7
 8003b34:	f002 f906 	bl	8005d44 <__malloc_unlock>
 8003b38:	e7a1      	b.n	8003a7e <_malloc_r+0x22>
 8003b3a:	6025      	str	r5, [r4, #0]
 8003b3c:	e7de      	b.n	8003afc <_malloc_r+0xa0>
 8003b3e:	bf00      	nop
 8003b40:	20000578 	.word	0x20000578

08003b44 <__sfputc_r>:
 8003b44:	6893      	ldr	r3, [r2, #8]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	b410      	push	{r4}
 8003b4c:	6093      	str	r3, [r2, #8]
 8003b4e:	da08      	bge.n	8003b62 <__sfputc_r+0x1e>
 8003b50:	6994      	ldr	r4, [r2, #24]
 8003b52:	42a3      	cmp	r3, r4
 8003b54:	db01      	blt.n	8003b5a <__sfputc_r+0x16>
 8003b56:	290a      	cmp	r1, #10
 8003b58:	d103      	bne.n	8003b62 <__sfputc_r+0x1e>
 8003b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b5e:	f001 ba83 	b.w	8005068 <__swbuf_r>
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	1c58      	adds	r0, r3, #1
 8003b66:	6010      	str	r0, [r2, #0]
 8003b68:	7019      	strb	r1, [r3, #0]
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <__sfputs_r>:
 8003b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	18d5      	adds	r5, r2, r3
 8003b7c:	42ac      	cmp	r4, r5
 8003b7e:	d101      	bne.n	8003b84 <__sfputs_r+0x12>
 8003b80:	2000      	movs	r0, #0
 8003b82:	e007      	b.n	8003b94 <__sfputs_r+0x22>
 8003b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b88:	463a      	mov	r2, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7ff ffda 	bl	8003b44 <__sfputc_r>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d1f3      	bne.n	8003b7c <__sfputs_r+0xa>
 8003b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b98 <_vfiprintf_r>:
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	460d      	mov	r5, r1
 8003b9e:	b09d      	sub	sp, #116	; 0x74
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	4698      	mov	r8, r3
 8003ba4:	4606      	mov	r6, r0
 8003ba6:	b118      	cbz	r0, 8003bb0 <_vfiprintf_r+0x18>
 8003ba8:	6983      	ldr	r3, [r0, #24]
 8003baa:	b90b      	cbnz	r3, 8003bb0 <_vfiprintf_r+0x18>
 8003bac:	f001 fc3e 	bl	800542c <__sinit>
 8003bb0:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <_vfiprintf_r+0x240>)
 8003bb2:	429d      	cmp	r5, r3
 8003bb4:	d11b      	bne.n	8003bee <_vfiprintf_r+0x56>
 8003bb6:	6875      	ldr	r5, [r6, #4]
 8003bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bba:	07d9      	lsls	r1, r3, #31
 8003bbc:	d405      	bmi.n	8003bca <_vfiprintf_r+0x32>
 8003bbe:	89ab      	ldrh	r3, [r5, #12]
 8003bc0:	059a      	lsls	r2, r3, #22
 8003bc2:	d402      	bmi.n	8003bca <_vfiprintf_r+0x32>
 8003bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bc6:	f002 f83e 	bl	8005c46 <__retarget_lock_acquire_recursive>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	d501      	bpl.n	8003bd4 <_vfiprintf_r+0x3c>
 8003bd0:	692b      	ldr	r3, [r5, #16]
 8003bd2:	b9eb      	cbnz	r3, 8003c10 <_vfiprintf_r+0x78>
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f001 fa98 	bl	800510c <__swsetup_r>
 8003bdc:	b1c0      	cbz	r0, 8003c10 <_vfiprintf_r+0x78>
 8003bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003be0:	07dc      	lsls	r4, r3, #31
 8003be2:	d50e      	bpl.n	8003c02 <_vfiprintf_r+0x6a>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295
 8003be8:	b01d      	add	sp, #116	; 0x74
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	4b7b      	ldr	r3, [pc, #492]	; (8003ddc <_vfiprintf_r+0x244>)
 8003bf0:	429d      	cmp	r5, r3
 8003bf2:	d101      	bne.n	8003bf8 <_vfiprintf_r+0x60>
 8003bf4:	68b5      	ldr	r5, [r6, #8]
 8003bf6:	e7df      	b.n	8003bb8 <_vfiprintf_r+0x20>
 8003bf8:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <_vfiprintf_r+0x248>)
 8003bfa:	429d      	cmp	r5, r3
 8003bfc:	bf08      	it	eq
 8003bfe:	68f5      	ldreq	r5, [r6, #12]
 8003c00:	e7da      	b.n	8003bb8 <_vfiprintf_r+0x20>
 8003c02:	89ab      	ldrh	r3, [r5, #12]
 8003c04:	0598      	lsls	r0, r3, #22
 8003c06:	d4ed      	bmi.n	8003be4 <_vfiprintf_r+0x4c>
 8003c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c0a:	f002 f81d 	bl	8005c48 <__retarget_lock_release_recursive>
 8003c0e:	e7e9      	b.n	8003be4 <_vfiprintf_r+0x4c>
 8003c10:	2300      	movs	r3, #0
 8003c12:	9309      	str	r3, [sp, #36]	; 0x24
 8003c14:	2320      	movs	r3, #32
 8003c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c1e:	2330      	movs	r3, #48	; 0x30
 8003c20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003de4 <_vfiprintf_r+0x24c>
 8003c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c28:	f04f 0901 	mov.w	r9, #1
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	469a      	mov	sl, r3
 8003c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c34:	b10a      	cbz	r2, 8003c3a <_vfiprintf_r+0xa2>
 8003c36:	2a25      	cmp	r2, #37	; 0x25
 8003c38:	d1f9      	bne.n	8003c2e <_vfiprintf_r+0x96>
 8003c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c3e:	d00b      	beq.n	8003c58 <_vfiprintf_r+0xc0>
 8003c40:	465b      	mov	r3, fp
 8003c42:	4622      	mov	r2, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	4630      	mov	r0, r6
 8003c48:	f7ff ff93 	bl	8003b72 <__sfputs_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f000 80aa 	beq.w	8003da6 <_vfiprintf_r+0x20e>
 8003c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c54:	445a      	add	r2, fp
 8003c56:	9209      	str	r2, [sp, #36]	; 0x24
 8003c58:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a2 	beq.w	8003da6 <_vfiprintf_r+0x20e>
 8003c62:	2300      	movs	r3, #0
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c6c:	f10a 0a01 	add.w	sl, sl, #1
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	9307      	str	r3, [sp, #28]
 8003c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c78:	931a      	str	r3, [sp, #104]	; 0x68
 8003c7a:	4654      	mov	r4, sl
 8003c7c:	2205      	movs	r2, #5
 8003c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c82:	4858      	ldr	r0, [pc, #352]	; (8003de4 <_vfiprintf_r+0x24c>)
 8003c84:	f7fc fac4 	bl	8000210 <memchr>
 8003c88:	9a04      	ldr	r2, [sp, #16]
 8003c8a:	b9d8      	cbnz	r0, 8003cc4 <_vfiprintf_r+0x12c>
 8003c8c:	06d1      	lsls	r1, r2, #27
 8003c8e:	bf44      	itt	mi
 8003c90:	2320      	movmi	r3, #32
 8003c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c96:	0713      	lsls	r3, r2, #28
 8003c98:	bf44      	itt	mi
 8003c9a:	232b      	movmi	r3, #43	; 0x2b
 8003c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca6:	d015      	beq.n	8003cd4 <_vfiprintf_r+0x13c>
 8003ca8:	9a07      	ldr	r2, [sp, #28]
 8003caa:	4654      	mov	r4, sl
 8003cac:	2000      	movs	r0, #0
 8003cae:	f04f 0c0a 	mov.w	ip, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb8:	3b30      	subs	r3, #48	; 0x30
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	d94e      	bls.n	8003d5c <_vfiprintf_r+0x1c4>
 8003cbe:	b1b0      	cbz	r0, 8003cee <_vfiprintf_r+0x156>
 8003cc0:	9207      	str	r2, [sp, #28]
 8003cc2:	e014      	b.n	8003cee <_vfiprintf_r+0x156>
 8003cc4:	eba0 0308 	sub.w	r3, r0, r8
 8003cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	9304      	str	r3, [sp, #16]
 8003cd0:	46a2      	mov	sl, r4
 8003cd2:	e7d2      	b.n	8003c7a <_vfiprintf_r+0xe2>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	1d19      	adds	r1, r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	9103      	str	r1, [sp, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bfbb      	ittet	lt
 8003ce0:	425b      	neglt	r3, r3
 8003ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce6:	9307      	strge	r3, [sp, #28]
 8003ce8:	9307      	strlt	r3, [sp, #28]
 8003cea:	bfb8      	it	lt
 8003cec:	9204      	strlt	r2, [sp, #16]
 8003cee:	7823      	ldrb	r3, [r4, #0]
 8003cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf2:	d10c      	bne.n	8003d0e <_vfiprintf_r+0x176>
 8003cf4:	7863      	ldrb	r3, [r4, #1]
 8003cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf8:	d135      	bne.n	8003d66 <_vfiprintf_r+0x1ce>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	1d1a      	adds	r2, r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfb8      	it	lt
 8003d06:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d0a:	3402      	adds	r4, #2
 8003d0c:	9305      	str	r3, [sp, #20]
 8003d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003df4 <_vfiprintf_r+0x25c>
 8003d12:	7821      	ldrb	r1, [r4, #0]
 8003d14:	2203      	movs	r2, #3
 8003d16:	4650      	mov	r0, sl
 8003d18:	f7fc fa7a 	bl	8000210 <memchr>
 8003d1c:	b140      	cbz	r0, 8003d30 <_vfiprintf_r+0x198>
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	eba0 000a 	sub.w	r0, r0, sl
 8003d24:	fa03 f000 	lsl.w	r0, r3, r0
 8003d28:	9b04      	ldr	r3, [sp, #16]
 8003d2a:	4303      	orrs	r3, r0
 8003d2c:	3401      	adds	r4, #1
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d34:	482c      	ldr	r0, [pc, #176]	; (8003de8 <_vfiprintf_r+0x250>)
 8003d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	f7fc fa68 	bl	8000210 <memchr>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d03f      	beq.n	8003dc4 <_vfiprintf_r+0x22c>
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <_vfiprintf_r+0x254>)
 8003d46:	bb1b      	cbnz	r3, 8003d90 <_vfiprintf_r+0x1f8>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	3307      	adds	r3, #7
 8003d4c:	f023 0307 	bic.w	r3, r3, #7
 8003d50:	3308      	adds	r3, #8
 8003d52:	9303      	str	r3, [sp, #12]
 8003d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d56:	443b      	add	r3, r7
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5a:	e767      	b.n	8003c2c <_vfiprintf_r+0x94>
 8003d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d60:	460c      	mov	r4, r1
 8003d62:	2001      	movs	r0, #1
 8003d64:	e7a5      	b.n	8003cb2 <_vfiprintf_r+0x11a>
 8003d66:	2300      	movs	r3, #0
 8003d68:	3401      	adds	r4, #1
 8003d6a:	9305      	str	r3, [sp, #20]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 0c0a 	mov.w	ip, #10
 8003d72:	4620      	mov	r0, r4
 8003d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d78:	3a30      	subs	r2, #48	; 0x30
 8003d7a:	2a09      	cmp	r2, #9
 8003d7c:	d903      	bls.n	8003d86 <_vfiprintf_r+0x1ee>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0c5      	beq.n	8003d0e <_vfiprintf_r+0x176>
 8003d82:	9105      	str	r1, [sp, #20]
 8003d84:	e7c3      	b.n	8003d0e <_vfiprintf_r+0x176>
 8003d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e7f0      	b.n	8003d72 <_vfiprintf_r+0x1da>
 8003d90:	ab03      	add	r3, sp, #12
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	462a      	mov	r2, r5
 8003d96:	4b16      	ldr	r3, [pc, #88]	; (8003df0 <_vfiprintf_r+0x258>)
 8003d98:	a904      	add	r1, sp, #16
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	f3af 8000 	nop.w
 8003da0:	4607      	mov	r7, r0
 8003da2:	1c78      	adds	r0, r7, #1
 8003da4:	d1d6      	bne.n	8003d54 <_vfiprintf_r+0x1bc>
 8003da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003da8:	07d9      	lsls	r1, r3, #31
 8003daa:	d405      	bmi.n	8003db8 <_vfiprintf_r+0x220>
 8003dac:	89ab      	ldrh	r3, [r5, #12]
 8003dae:	059a      	lsls	r2, r3, #22
 8003db0:	d402      	bmi.n	8003db8 <_vfiprintf_r+0x220>
 8003db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003db4:	f001 ff48 	bl	8005c48 <__retarget_lock_release_recursive>
 8003db8:	89ab      	ldrh	r3, [r5, #12]
 8003dba:	065b      	lsls	r3, r3, #25
 8003dbc:	f53f af12 	bmi.w	8003be4 <_vfiprintf_r+0x4c>
 8003dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dc2:	e711      	b.n	8003be8 <_vfiprintf_r+0x50>
 8003dc4:	ab03      	add	r3, sp, #12
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	462a      	mov	r2, r5
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <_vfiprintf_r+0x258>)
 8003dcc:	a904      	add	r1, sp, #16
 8003dce:	4630      	mov	r0, r6
 8003dd0:	f000 f880 	bl	8003ed4 <_printf_i>
 8003dd4:	e7e4      	b.n	8003da0 <_vfiprintf_r+0x208>
 8003dd6:	bf00      	nop
 8003dd8:	08006e64 	.word	0x08006e64
 8003ddc:	08006e84 	.word	0x08006e84
 8003de0:	08006e44 	.word	0x08006e44
 8003de4:	08006cb0 	.word	0x08006cb0
 8003de8:	08006cba 	.word	0x08006cba
 8003dec:	00000000 	.word	0x00000000
 8003df0:	08003b73 	.word	0x08003b73
 8003df4:	08006cb6 	.word	0x08006cb6

08003df8 <_printf_common>:
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	4699      	mov	r9, r3
 8003e00:	688a      	ldr	r2, [r1, #8]
 8003e02:	690b      	ldr	r3, [r1, #16]
 8003e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bfb8      	it	lt
 8003e0c:	4613      	movlt	r3, r2
 8003e0e:	6033      	str	r3, [r6, #0]
 8003e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e14:	4607      	mov	r7, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	b10a      	cbz	r2, 8003e1e <_printf_common+0x26>
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	0699      	lsls	r1, r3, #26
 8003e22:	bf42      	ittt	mi
 8003e24:	6833      	ldrmi	r3, [r6, #0]
 8003e26:	3302      	addmi	r3, #2
 8003e28:	6033      	strmi	r3, [r6, #0]
 8003e2a:	6825      	ldr	r5, [r4, #0]
 8003e2c:	f015 0506 	ands.w	r5, r5, #6
 8003e30:	d106      	bne.n	8003e40 <_printf_common+0x48>
 8003e32:	f104 0a19 	add.w	sl, r4, #25
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	6832      	ldr	r2, [r6, #0]
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	dc26      	bgt.n	8003e8e <_printf_common+0x96>
 8003e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e44:	1e13      	subs	r3, r2, #0
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	0692      	lsls	r2, r2, #26
 8003e4e:	d42b      	bmi.n	8003ea8 <_printf_common+0xb0>
 8003e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e54:	4649      	mov	r1, r9
 8003e56:	4638      	mov	r0, r7
 8003e58:	47c0      	blx	r8
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d01e      	beq.n	8003e9c <_printf_common+0xa4>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	68e5      	ldr	r5, [r4, #12]
 8003e62:	6832      	ldr	r2, [r6, #0]
 8003e64:	f003 0306 	and.w	r3, r3, #6
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	bf08      	it	eq
 8003e6c:	1aad      	subeq	r5, r5, r2
 8003e6e:	68a3      	ldr	r3, [r4, #8]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	bf0c      	ite	eq
 8003e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e78:	2500      	movne	r5, #0
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	bfc4      	itt	gt
 8003e7e:	1a9b      	subgt	r3, r3, r2
 8003e80:	18ed      	addgt	r5, r5, r3
 8003e82:	2600      	movs	r6, #0
 8003e84:	341a      	adds	r4, #26
 8003e86:	42b5      	cmp	r5, r6
 8003e88:	d11a      	bne.n	8003ec0 <_printf_common+0xc8>
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	e008      	b.n	8003ea0 <_printf_common+0xa8>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4652      	mov	r2, sl
 8003e92:	4649      	mov	r1, r9
 8003e94:	4638      	mov	r0, r7
 8003e96:	47c0      	blx	r8
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d103      	bne.n	8003ea4 <_printf_common+0xac>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	e7c6      	b.n	8003e36 <_printf_common+0x3e>
 8003ea8:	18e1      	adds	r1, r4, r3
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	2030      	movs	r0, #48	; 0x30
 8003eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb2:	4422      	add	r2, r4
 8003eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	e7c7      	b.n	8003e50 <_printf_common+0x58>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	4649      	mov	r1, r9
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	47c0      	blx	r8
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d0e6      	beq.n	8003e9c <_printf_common+0xa4>
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7d9      	b.n	8003e86 <_printf_common+0x8e>
	...

08003ed4 <_printf_i>:
 8003ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	7e0f      	ldrb	r7, [r1, #24]
 8003eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003edc:	2f78      	cmp	r7, #120	; 0x78
 8003ede:	4691      	mov	r9, r2
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	469a      	mov	sl, r3
 8003ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003eea:	d807      	bhi.n	8003efc <_printf_i+0x28>
 8003eec:	2f62      	cmp	r7, #98	; 0x62
 8003eee:	d80a      	bhi.n	8003f06 <_printf_i+0x32>
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f000 80d8 	beq.w	80040a6 <_printf_i+0x1d2>
 8003ef6:	2f58      	cmp	r7, #88	; 0x58
 8003ef8:	f000 80a3 	beq.w	8004042 <_printf_i+0x16e>
 8003efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f04:	e03a      	b.n	8003f7c <_printf_i+0xa8>
 8003f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f0a:	2b15      	cmp	r3, #21
 8003f0c:	d8f6      	bhi.n	8003efc <_printf_i+0x28>
 8003f0e:	a101      	add	r1, pc, #4	; (adr r1, 8003f14 <_printf_i+0x40>)
 8003f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f81 	.word	0x08003f81
 8003f1c:	08003efd 	.word	0x08003efd
 8003f20:	08003efd 	.word	0x08003efd
 8003f24:	08003efd 	.word	0x08003efd
 8003f28:	08003efd 	.word	0x08003efd
 8003f2c:	08003f81 	.word	0x08003f81
 8003f30:	08003efd 	.word	0x08003efd
 8003f34:	08003efd 	.word	0x08003efd
 8003f38:	08003efd 	.word	0x08003efd
 8003f3c:	08003efd 	.word	0x08003efd
 8003f40:	0800408d 	.word	0x0800408d
 8003f44:	08003fb1 	.word	0x08003fb1
 8003f48:	0800406f 	.word	0x0800406f
 8003f4c:	08003efd 	.word	0x08003efd
 8003f50:	08003efd 	.word	0x08003efd
 8003f54:	080040af 	.word	0x080040af
 8003f58:	08003efd 	.word	0x08003efd
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003efd 	.word	0x08003efd
 8003f64:	08003efd 	.word	0x08003efd
 8003f68:	08004077 	.word	0x08004077
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	602a      	str	r2, [r5, #0]
 8003f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0a3      	b.n	80040c8 <_printf_i+0x1f4>
 8003f80:	6820      	ldr	r0, [r4, #0]
 8003f82:	6829      	ldr	r1, [r5, #0]
 8003f84:	0606      	lsls	r6, r0, #24
 8003f86:	f101 0304 	add.w	r3, r1, #4
 8003f8a:	d50a      	bpl.n	8003fa2 <_printf_i+0xce>
 8003f8c:	680e      	ldr	r6, [r1, #0]
 8003f8e:	602b      	str	r3, [r5, #0]
 8003f90:	2e00      	cmp	r6, #0
 8003f92:	da03      	bge.n	8003f9c <_printf_i+0xc8>
 8003f94:	232d      	movs	r3, #45	; 0x2d
 8003f96:	4276      	negs	r6, r6
 8003f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f9c:	485e      	ldr	r0, [pc, #376]	; (8004118 <_printf_i+0x244>)
 8003f9e:	230a      	movs	r3, #10
 8003fa0:	e019      	b.n	8003fd6 <_printf_i+0x102>
 8003fa2:	680e      	ldr	r6, [r1, #0]
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003faa:	bf18      	it	ne
 8003fac:	b236      	sxthne	r6, r6
 8003fae:	e7ef      	b.n	8003f90 <_printf_i+0xbc>
 8003fb0:	682b      	ldr	r3, [r5, #0]
 8003fb2:	6820      	ldr	r0, [r4, #0]
 8003fb4:	1d19      	adds	r1, r3, #4
 8003fb6:	6029      	str	r1, [r5, #0]
 8003fb8:	0601      	lsls	r1, r0, #24
 8003fba:	d501      	bpl.n	8003fc0 <_printf_i+0xec>
 8003fbc:	681e      	ldr	r6, [r3, #0]
 8003fbe:	e002      	b.n	8003fc6 <_printf_i+0xf2>
 8003fc0:	0646      	lsls	r6, r0, #25
 8003fc2:	d5fb      	bpl.n	8003fbc <_printf_i+0xe8>
 8003fc4:	881e      	ldrh	r6, [r3, #0]
 8003fc6:	4854      	ldr	r0, [pc, #336]	; (8004118 <_printf_i+0x244>)
 8003fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8003fca:	bf0c      	ite	eq
 8003fcc:	2308      	moveq	r3, #8
 8003fce:	230a      	movne	r3, #10
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fd6:	6865      	ldr	r5, [r4, #4]
 8003fd8:	60a5      	str	r5, [r4, #8]
 8003fda:	2d00      	cmp	r5, #0
 8003fdc:	bfa2      	ittt	ge
 8003fde:	6821      	ldrge	r1, [r4, #0]
 8003fe0:	f021 0104 	bicge.w	r1, r1, #4
 8003fe4:	6021      	strge	r1, [r4, #0]
 8003fe6:	b90e      	cbnz	r6, 8003fec <_printf_i+0x118>
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	d04d      	beq.n	8004088 <_printf_i+0x1b4>
 8003fec:	4615      	mov	r5, r2
 8003fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8003ff6:	5dc7      	ldrb	r7, [r0, r7]
 8003ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ffc:	4637      	mov	r7, r6
 8003ffe:	42bb      	cmp	r3, r7
 8004000:	460e      	mov	r6, r1
 8004002:	d9f4      	bls.n	8003fee <_printf_i+0x11a>
 8004004:	2b08      	cmp	r3, #8
 8004006:	d10b      	bne.n	8004020 <_printf_i+0x14c>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	07de      	lsls	r6, r3, #31
 800400c:	d508      	bpl.n	8004020 <_printf_i+0x14c>
 800400e:	6923      	ldr	r3, [r4, #16]
 8004010:	6861      	ldr	r1, [r4, #4]
 8004012:	4299      	cmp	r1, r3
 8004014:	bfde      	ittt	le
 8004016:	2330      	movle	r3, #48	; 0x30
 8004018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800401c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004020:	1b52      	subs	r2, r2, r5
 8004022:	6122      	str	r2, [r4, #16]
 8004024:	f8cd a000 	str.w	sl, [sp]
 8004028:	464b      	mov	r3, r9
 800402a:	aa03      	add	r2, sp, #12
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f7ff fee2 	bl	8003df8 <_printf_common>
 8004034:	3001      	adds	r0, #1
 8004036:	d14c      	bne.n	80040d2 <_printf_i+0x1fe>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	b004      	add	sp, #16
 800403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004042:	4835      	ldr	r0, [pc, #212]	; (8004118 <_printf_i+0x244>)
 8004044:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004048:	6829      	ldr	r1, [r5, #0]
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004050:	6029      	str	r1, [r5, #0]
 8004052:	061d      	lsls	r5, r3, #24
 8004054:	d514      	bpl.n	8004080 <_printf_i+0x1ac>
 8004056:	07df      	lsls	r7, r3, #31
 8004058:	bf44      	itt	mi
 800405a:	f043 0320 	orrmi.w	r3, r3, #32
 800405e:	6023      	strmi	r3, [r4, #0]
 8004060:	b91e      	cbnz	r6, 800406a <_printf_i+0x196>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	f023 0320 	bic.w	r3, r3, #32
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	2310      	movs	r3, #16
 800406c:	e7b0      	b.n	8003fd0 <_printf_i+0xfc>
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	f043 0320 	orr.w	r3, r3, #32
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	2378      	movs	r3, #120	; 0x78
 8004078:	4828      	ldr	r0, [pc, #160]	; (800411c <_printf_i+0x248>)
 800407a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800407e:	e7e3      	b.n	8004048 <_printf_i+0x174>
 8004080:	0659      	lsls	r1, r3, #25
 8004082:	bf48      	it	mi
 8004084:	b2b6      	uxthmi	r6, r6
 8004086:	e7e6      	b.n	8004056 <_printf_i+0x182>
 8004088:	4615      	mov	r5, r2
 800408a:	e7bb      	b.n	8004004 <_printf_i+0x130>
 800408c:	682b      	ldr	r3, [r5, #0]
 800408e:	6826      	ldr	r6, [r4, #0]
 8004090:	6961      	ldr	r1, [r4, #20]
 8004092:	1d18      	adds	r0, r3, #4
 8004094:	6028      	str	r0, [r5, #0]
 8004096:	0635      	lsls	r5, r6, #24
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	d501      	bpl.n	80040a0 <_printf_i+0x1cc>
 800409c:	6019      	str	r1, [r3, #0]
 800409e:	e002      	b.n	80040a6 <_printf_i+0x1d2>
 80040a0:	0670      	lsls	r0, r6, #25
 80040a2:	d5fb      	bpl.n	800409c <_printf_i+0x1c8>
 80040a4:	8019      	strh	r1, [r3, #0]
 80040a6:	2300      	movs	r3, #0
 80040a8:	6123      	str	r3, [r4, #16]
 80040aa:	4615      	mov	r5, r2
 80040ac:	e7ba      	b.n	8004024 <_printf_i+0x150>
 80040ae:	682b      	ldr	r3, [r5, #0]
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	602a      	str	r2, [r5, #0]
 80040b4:	681d      	ldr	r5, [r3, #0]
 80040b6:	6862      	ldr	r2, [r4, #4]
 80040b8:	2100      	movs	r1, #0
 80040ba:	4628      	mov	r0, r5
 80040bc:	f7fc f8a8 	bl	8000210 <memchr>
 80040c0:	b108      	cbz	r0, 80040c6 <_printf_i+0x1f2>
 80040c2:	1b40      	subs	r0, r0, r5
 80040c4:	6060      	str	r0, [r4, #4]
 80040c6:	6863      	ldr	r3, [r4, #4]
 80040c8:	6123      	str	r3, [r4, #16]
 80040ca:	2300      	movs	r3, #0
 80040cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d0:	e7a8      	b.n	8004024 <_printf_i+0x150>
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	462a      	mov	r2, r5
 80040d6:	4649      	mov	r1, r9
 80040d8:	4640      	mov	r0, r8
 80040da:	47d0      	blx	sl
 80040dc:	3001      	adds	r0, #1
 80040de:	d0ab      	beq.n	8004038 <_printf_i+0x164>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	079b      	lsls	r3, r3, #30
 80040e4:	d413      	bmi.n	800410e <_printf_i+0x23a>
 80040e6:	68e0      	ldr	r0, [r4, #12]
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	4298      	cmp	r0, r3
 80040ec:	bfb8      	it	lt
 80040ee:	4618      	movlt	r0, r3
 80040f0:	e7a4      	b.n	800403c <_printf_i+0x168>
 80040f2:	2301      	movs	r3, #1
 80040f4:	4632      	mov	r2, r6
 80040f6:	4649      	mov	r1, r9
 80040f8:	4640      	mov	r0, r8
 80040fa:	47d0      	blx	sl
 80040fc:	3001      	adds	r0, #1
 80040fe:	d09b      	beq.n	8004038 <_printf_i+0x164>
 8004100:	3501      	adds	r5, #1
 8004102:	68e3      	ldr	r3, [r4, #12]
 8004104:	9903      	ldr	r1, [sp, #12]
 8004106:	1a5b      	subs	r3, r3, r1
 8004108:	42ab      	cmp	r3, r5
 800410a:	dcf2      	bgt.n	80040f2 <_printf_i+0x21e>
 800410c:	e7eb      	b.n	80040e6 <_printf_i+0x212>
 800410e:	2500      	movs	r5, #0
 8004110:	f104 0619 	add.w	r6, r4, #25
 8004114:	e7f5      	b.n	8004102 <_printf_i+0x22e>
 8004116:	bf00      	nop
 8004118:	08006cc1 	.word	0x08006cc1
 800411c:	08006cd2 	.word	0x08006cd2

08004120 <_sbrk_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d06      	ldr	r5, [pc, #24]	; (800413c <_sbrk_r+0x1c>)
 8004124:	2300      	movs	r3, #0
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	f7fd f966 	bl	80013fc <_sbrk>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_sbrk_r+0x1a>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_sbrk_r+0x1a>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	20000584 	.word	0x20000584

08004140 <strchr>:
 8004140:	b2c9      	uxtb	r1, r1
 8004142:	4603      	mov	r3, r0
 8004144:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004148:	b11a      	cbz	r2, 8004152 <strchr+0x12>
 800414a:	428a      	cmp	r2, r1
 800414c:	d1f9      	bne.n	8004142 <strchr+0x2>
 800414e:	4618      	mov	r0, r3
 8004150:	4770      	bx	lr
 8004152:	2900      	cmp	r1, #0
 8004154:	bf18      	it	ne
 8004156:	2300      	movne	r3, #0
 8004158:	e7f9      	b.n	800414e <strchr+0xe>

0800415a <strncmp>:
 800415a:	b510      	push	{r4, lr}
 800415c:	b17a      	cbz	r2, 800417e <strncmp+0x24>
 800415e:	4603      	mov	r3, r0
 8004160:	3901      	subs	r1, #1
 8004162:	1884      	adds	r4, r0, r2
 8004164:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004168:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800416c:	4290      	cmp	r0, r2
 800416e:	d101      	bne.n	8004174 <strncmp+0x1a>
 8004170:	42a3      	cmp	r3, r4
 8004172:	d101      	bne.n	8004178 <strncmp+0x1e>
 8004174:	1a80      	subs	r0, r0, r2
 8004176:	bd10      	pop	{r4, pc}
 8004178:	2800      	cmp	r0, #0
 800417a:	d1f3      	bne.n	8004164 <strncmp+0xa>
 800417c:	e7fa      	b.n	8004174 <strncmp+0x1a>
 800417e:	4610      	mov	r0, r2
 8004180:	e7f9      	b.n	8004176 <strncmp+0x1c>

08004182 <sulp>:
 8004182:	b570      	push	{r4, r5, r6, lr}
 8004184:	4604      	mov	r4, r0
 8004186:	460d      	mov	r5, r1
 8004188:	ec45 4b10 	vmov	d0, r4, r5
 800418c:	4616      	mov	r6, r2
 800418e:	f002 f951 	bl	8006434 <__ulp>
 8004192:	ec51 0b10 	vmov	r0, r1, d0
 8004196:	b17e      	cbz	r6, 80041b8 <sulp+0x36>
 8004198:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800419c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	dd09      	ble.n	80041b8 <sulp+0x36>
 80041a4:	051b      	lsls	r3, r3, #20
 80041a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80041aa:	2400      	movs	r4, #0
 80041ac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80041b0:	4622      	mov	r2, r4
 80041b2:	462b      	mov	r3, r5
 80041b4:	f7fc fa38 	bl	8000628 <__aeabi_dmul>
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	0000      	movs	r0, r0
 80041bc:	0000      	movs	r0, r0
	...

080041c0 <_strtod_l>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	ed2d 8b02 	vpush	{d8}
 80041c8:	b09d      	sub	sp, #116	; 0x74
 80041ca:	461f      	mov	r7, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	9318      	str	r3, [sp, #96]	; 0x60
 80041d0:	4ba2      	ldr	r3, [pc, #648]	; (800445c <_strtod_l+0x29c>)
 80041d2:	9213      	str	r2, [sp, #76]	; 0x4c
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	4604      	mov	r4, r0
 80041da:	4618      	mov	r0, r3
 80041dc:	4688      	mov	r8, r1
 80041de:	f7fc f809 	bl	80001f4 <strlen>
 80041e2:	f04f 0a00 	mov.w	sl, #0
 80041e6:	4605      	mov	r5, r0
 80041e8:	f04f 0b00 	mov.w	fp, #0
 80041ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80041f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80041f2:	781a      	ldrb	r2, [r3, #0]
 80041f4:	2a2b      	cmp	r2, #43	; 0x2b
 80041f6:	d04e      	beq.n	8004296 <_strtod_l+0xd6>
 80041f8:	d83b      	bhi.n	8004272 <_strtod_l+0xb2>
 80041fa:	2a0d      	cmp	r2, #13
 80041fc:	d834      	bhi.n	8004268 <_strtod_l+0xa8>
 80041fe:	2a08      	cmp	r2, #8
 8004200:	d834      	bhi.n	800426c <_strtod_l+0xac>
 8004202:	2a00      	cmp	r2, #0
 8004204:	d03e      	beq.n	8004284 <_strtod_l+0xc4>
 8004206:	2300      	movs	r3, #0
 8004208:	930a      	str	r3, [sp, #40]	; 0x28
 800420a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800420c:	7833      	ldrb	r3, [r6, #0]
 800420e:	2b30      	cmp	r3, #48	; 0x30
 8004210:	f040 80b0 	bne.w	8004374 <_strtod_l+0x1b4>
 8004214:	7873      	ldrb	r3, [r6, #1]
 8004216:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800421a:	2b58      	cmp	r3, #88	; 0x58
 800421c:	d168      	bne.n	80042f0 <_strtod_l+0x130>
 800421e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	ab18      	add	r3, sp, #96	; 0x60
 8004224:	9702      	str	r7, [sp, #8]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4a8d      	ldr	r2, [pc, #564]	; (8004460 <_strtod_l+0x2a0>)
 800422a:	ab19      	add	r3, sp, #100	; 0x64
 800422c:	a917      	add	r1, sp, #92	; 0x5c
 800422e:	4620      	mov	r0, r4
 8004230:	f001 fa00 	bl	8005634 <__gethex>
 8004234:	f010 0707 	ands.w	r7, r0, #7
 8004238:	4605      	mov	r5, r0
 800423a:	d005      	beq.n	8004248 <_strtod_l+0x88>
 800423c:	2f06      	cmp	r7, #6
 800423e:	d12c      	bne.n	800429a <_strtod_l+0xda>
 8004240:	3601      	adds	r6, #1
 8004242:	2300      	movs	r3, #0
 8004244:	9617      	str	r6, [sp, #92]	; 0x5c
 8004246:	930a      	str	r3, [sp, #40]	; 0x28
 8004248:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8590 	bne.w	8004d70 <_strtod_l+0xbb0>
 8004250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004252:	b1eb      	cbz	r3, 8004290 <_strtod_l+0xd0>
 8004254:	4652      	mov	r2, sl
 8004256:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800425a:	ec43 2b10 	vmov	d0, r2, r3
 800425e:	b01d      	add	sp, #116	; 0x74
 8004260:	ecbd 8b02 	vpop	{d8}
 8004264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004268:	2a20      	cmp	r2, #32
 800426a:	d1cc      	bne.n	8004206 <_strtod_l+0x46>
 800426c:	3301      	adds	r3, #1
 800426e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004270:	e7be      	b.n	80041f0 <_strtod_l+0x30>
 8004272:	2a2d      	cmp	r2, #45	; 0x2d
 8004274:	d1c7      	bne.n	8004206 <_strtod_l+0x46>
 8004276:	2201      	movs	r2, #1
 8004278:	920a      	str	r2, [sp, #40]	; 0x28
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	9217      	str	r2, [sp, #92]	; 0x5c
 800427e:	785b      	ldrb	r3, [r3, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1c2      	bne.n	800420a <_strtod_l+0x4a>
 8004284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004286:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 856e 	bne.w	8004d6c <_strtod_l+0xbac>
 8004290:	4652      	mov	r2, sl
 8004292:	465b      	mov	r3, fp
 8004294:	e7e1      	b.n	800425a <_strtod_l+0x9a>
 8004296:	2200      	movs	r2, #0
 8004298:	e7ee      	b.n	8004278 <_strtod_l+0xb8>
 800429a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800429c:	b13a      	cbz	r2, 80042ae <_strtod_l+0xee>
 800429e:	2135      	movs	r1, #53	; 0x35
 80042a0:	a81a      	add	r0, sp, #104	; 0x68
 80042a2:	f002 f9d2 	bl	800664a <__copybits>
 80042a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80042a8:	4620      	mov	r0, r4
 80042aa:	f001 fd91 	bl	8005dd0 <_Bfree>
 80042ae:	3f01      	subs	r7, #1
 80042b0:	2f04      	cmp	r7, #4
 80042b2:	d806      	bhi.n	80042c2 <_strtod_l+0x102>
 80042b4:	e8df f007 	tbb	[pc, r7]
 80042b8:	1714030a 	.word	0x1714030a
 80042bc:	0a          	.byte	0x0a
 80042bd:	00          	.byte	0x00
 80042be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80042c2:	0728      	lsls	r0, r5, #28
 80042c4:	d5c0      	bpl.n	8004248 <_strtod_l+0x88>
 80042c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80042ca:	e7bd      	b.n	8004248 <_strtod_l+0x88>
 80042cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80042d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80042da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80042de:	e7f0      	b.n	80042c2 <_strtod_l+0x102>
 80042e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004464 <_strtod_l+0x2a4>
 80042e4:	e7ed      	b.n	80042c2 <_strtod_l+0x102>
 80042e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80042ea:	f04f 3aff 	mov.w	sl, #4294967295
 80042ee:	e7e8      	b.n	80042c2 <_strtod_l+0x102>
 80042f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d0f9      	beq.n	80042f0 <_strtod_l+0x130>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0a3      	beq.n	8004248 <_strtod_l+0x88>
 8004300:	2301      	movs	r3, #1
 8004302:	f04f 0900 	mov.w	r9, #0
 8004306:	9304      	str	r3, [sp, #16]
 8004308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800430a:	9308      	str	r3, [sp, #32]
 800430c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004310:	464f      	mov	r7, r9
 8004312:	220a      	movs	r2, #10
 8004314:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004316:	7806      	ldrb	r6, [r0, #0]
 8004318:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800431c:	b2d9      	uxtb	r1, r3
 800431e:	2909      	cmp	r1, #9
 8004320:	d92a      	bls.n	8004378 <_strtod_l+0x1b8>
 8004322:	9905      	ldr	r1, [sp, #20]
 8004324:	462a      	mov	r2, r5
 8004326:	f7ff ff18 	bl	800415a <strncmp>
 800432a:	b398      	cbz	r0, 8004394 <_strtod_l+0x1d4>
 800432c:	2000      	movs	r0, #0
 800432e:	4632      	mov	r2, r6
 8004330:	463d      	mov	r5, r7
 8004332:	9005      	str	r0, [sp, #20]
 8004334:	4603      	mov	r3, r0
 8004336:	2a65      	cmp	r2, #101	; 0x65
 8004338:	d001      	beq.n	800433e <_strtod_l+0x17e>
 800433a:	2a45      	cmp	r2, #69	; 0x45
 800433c:	d118      	bne.n	8004370 <_strtod_l+0x1b0>
 800433e:	b91d      	cbnz	r5, 8004348 <_strtod_l+0x188>
 8004340:	9a04      	ldr	r2, [sp, #16]
 8004342:	4302      	orrs	r2, r0
 8004344:	d09e      	beq.n	8004284 <_strtod_l+0xc4>
 8004346:	2500      	movs	r5, #0
 8004348:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800434c:	f108 0201 	add.w	r2, r8, #1
 8004350:	9217      	str	r2, [sp, #92]	; 0x5c
 8004352:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004356:	2a2b      	cmp	r2, #43	; 0x2b
 8004358:	d075      	beq.n	8004446 <_strtod_l+0x286>
 800435a:	2a2d      	cmp	r2, #45	; 0x2d
 800435c:	d07b      	beq.n	8004456 <_strtod_l+0x296>
 800435e:	f04f 0c00 	mov.w	ip, #0
 8004362:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004366:	2909      	cmp	r1, #9
 8004368:	f240 8082 	bls.w	8004470 <_strtod_l+0x2b0>
 800436c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004370:	2600      	movs	r6, #0
 8004372:	e09d      	b.n	80044b0 <_strtod_l+0x2f0>
 8004374:	2300      	movs	r3, #0
 8004376:	e7c4      	b.n	8004302 <_strtod_l+0x142>
 8004378:	2f08      	cmp	r7, #8
 800437a:	bfd8      	it	le
 800437c:	9907      	ldrle	r1, [sp, #28]
 800437e:	f100 0001 	add.w	r0, r0, #1
 8004382:	bfda      	itte	le
 8004384:	fb02 3301 	mlale	r3, r2, r1, r3
 8004388:	9307      	strle	r3, [sp, #28]
 800438a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800438e:	3701      	adds	r7, #1
 8004390:	9017      	str	r0, [sp, #92]	; 0x5c
 8004392:	e7bf      	b.n	8004314 <_strtod_l+0x154>
 8004394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004396:	195a      	adds	r2, r3, r5
 8004398:	9217      	str	r2, [sp, #92]	; 0x5c
 800439a:	5d5a      	ldrb	r2, [r3, r5]
 800439c:	2f00      	cmp	r7, #0
 800439e:	d037      	beq.n	8004410 <_strtod_l+0x250>
 80043a0:	9005      	str	r0, [sp, #20]
 80043a2:	463d      	mov	r5, r7
 80043a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80043a8:	2b09      	cmp	r3, #9
 80043aa:	d912      	bls.n	80043d2 <_strtod_l+0x212>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e7c2      	b.n	8004336 <_strtod_l+0x176>
 80043b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80043b6:	785a      	ldrb	r2, [r3, #1]
 80043b8:	3001      	adds	r0, #1
 80043ba:	2a30      	cmp	r2, #48	; 0x30
 80043bc:	d0f8      	beq.n	80043b0 <_strtod_l+0x1f0>
 80043be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	f200 84d9 	bhi.w	8004d7a <_strtod_l+0xbba>
 80043c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80043ca:	9005      	str	r0, [sp, #20]
 80043cc:	2000      	movs	r0, #0
 80043ce:	9308      	str	r3, [sp, #32]
 80043d0:	4605      	mov	r5, r0
 80043d2:	3a30      	subs	r2, #48	; 0x30
 80043d4:	f100 0301 	add.w	r3, r0, #1
 80043d8:	d014      	beq.n	8004404 <_strtod_l+0x244>
 80043da:	9905      	ldr	r1, [sp, #20]
 80043dc:	4419      	add	r1, r3
 80043de:	9105      	str	r1, [sp, #20]
 80043e0:	462b      	mov	r3, r5
 80043e2:	eb00 0e05 	add.w	lr, r0, r5
 80043e6:	210a      	movs	r1, #10
 80043e8:	4573      	cmp	r3, lr
 80043ea:	d113      	bne.n	8004414 <_strtod_l+0x254>
 80043ec:	182b      	adds	r3, r5, r0
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	f105 0501 	add.w	r5, r5, #1
 80043f4:	4405      	add	r5, r0
 80043f6:	dc1c      	bgt.n	8004432 <_strtod_l+0x272>
 80043f8:	9907      	ldr	r1, [sp, #28]
 80043fa:	230a      	movs	r3, #10
 80043fc:	fb03 2301 	mla	r3, r3, r1, r2
 8004400:	9307      	str	r3, [sp, #28]
 8004402:	2300      	movs	r3, #0
 8004404:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004406:	1c51      	adds	r1, r2, #1
 8004408:	9117      	str	r1, [sp, #92]	; 0x5c
 800440a:	7852      	ldrb	r2, [r2, #1]
 800440c:	4618      	mov	r0, r3
 800440e:	e7c9      	b.n	80043a4 <_strtod_l+0x1e4>
 8004410:	4638      	mov	r0, r7
 8004412:	e7d2      	b.n	80043ba <_strtod_l+0x1fa>
 8004414:	2b08      	cmp	r3, #8
 8004416:	dc04      	bgt.n	8004422 <_strtod_l+0x262>
 8004418:	9e07      	ldr	r6, [sp, #28]
 800441a:	434e      	muls	r6, r1
 800441c:	9607      	str	r6, [sp, #28]
 800441e:	3301      	adds	r3, #1
 8004420:	e7e2      	b.n	80043e8 <_strtod_l+0x228>
 8004422:	f103 0c01 	add.w	ip, r3, #1
 8004426:	f1bc 0f10 	cmp.w	ip, #16
 800442a:	bfd8      	it	le
 800442c:	fb01 f909 	mulle.w	r9, r1, r9
 8004430:	e7f5      	b.n	800441e <_strtod_l+0x25e>
 8004432:	2d10      	cmp	r5, #16
 8004434:	bfdc      	itt	le
 8004436:	230a      	movle	r3, #10
 8004438:	fb03 2909 	mlale	r9, r3, r9, r2
 800443c:	e7e1      	b.n	8004402 <_strtod_l+0x242>
 800443e:	2300      	movs	r3, #0
 8004440:	9305      	str	r3, [sp, #20]
 8004442:	2301      	movs	r3, #1
 8004444:	e77c      	b.n	8004340 <_strtod_l+0x180>
 8004446:	f04f 0c00 	mov.w	ip, #0
 800444a:	f108 0202 	add.w	r2, r8, #2
 800444e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004450:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004454:	e785      	b.n	8004362 <_strtod_l+0x1a2>
 8004456:	f04f 0c01 	mov.w	ip, #1
 800445a:	e7f6      	b.n	800444a <_strtod_l+0x28a>
 800445c:	08006f1c 	.word	0x08006f1c
 8004460:	08006cf0 	.word	0x08006cf0
 8004464:	7ff00000 	.word	0x7ff00000
 8004468:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800446a:	1c51      	adds	r1, r2, #1
 800446c:	9117      	str	r1, [sp, #92]	; 0x5c
 800446e:	7852      	ldrb	r2, [r2, #1]
 8004470:	2a30      	cmp	r2, #48	; 0x30
 8004472:	d0f9      	beq.n	8004468 <_strtod_l+0x2a8>
 8004474:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004478:	2908      	cmp	r1, #8
 800447a:	f63f af79 	bhi.w	8004370 <_strtod_l+0x1b0>
 800447e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004482:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004484:	9206      	str	r2, [sp, #24]
 8004486:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004488:	1c51      	adds	r1, r2, #1
 800448a:	9117      	str	r1, [sp, #92]	; 0x5c
 800448c:	7852      	ldrb	r2, [r2, #1]
 800448e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004492:	2e09      	cmp	r6, #9
 8004494:	d937      	bls.n	8004506 <_strtod_l+0x346>
 8004496:	9e06      	ldr	r6, [sp, #24]
 8004498:	1b89      	subs	r1, r1, r6
 800449a:	2908      	cmp	r1, #8
 800449c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80044a0:	dc02      	bgt.n	80044a8 <_strtod_l+0x2e8>
 80044a2:	4576      	cmp	r6, lr
 80044a4:	bfa8      	it	ge
 80044a6:	4676      	movge	r6, lr
 80044a8:	f1bc 0f00 	cmp.w	ip, #0
 80044ac:	d000      	beq.n	80044b0 <_strtod_l+0x2f0>
 80044ae:	4276      	negs	r6, r6
 80044b0:	2d00      	cmp	r5, #0
 80044b2:	d14d      	bne.n	8004550 <_strtod_l+0x390>
 80044b4:	9904      	ldr	r1, [sp, #16]
 80044b6:	4301      	orrs	r1, r0
 80044b8:	f47f aec6 	bne.w	8004248 <_strtod_l+0x88>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f aee1 	bne.w	8004284 <_strtod_l+0xc4>
 80044c2:	2a69      	cmp	r2, #105	; 0x69
 80044c4:	d027      	beq.n	8004516 <_strtod_l+0x356>
 80044c6:	dc24      	bgt.n	8004512 <_strtod_l+0x352>
 80044c8:	2a49      	cmp	r2, #73	; 0x49
 80044ca:	d024      	beq.n	8004516 <_strtod_l+0x356>
 80044cc:	2a4e      	cmp	r2, #78	; 0x4e
 80044ce:	f47f aed9 	bne.w	8004284 <_strtod_l+0xc4>
 80044d2:	499f      	ldr	r1, [pc, #636]	; (8004750 <_strtod_l+0x590>)
 80044d4:	a817      	add	r0, sp, #92	; 0x5c
 80044d6:	f001 fb05 	bl	8005ae4 <__match>
 80044da:	2800      	cmp	r0, #0
 80044dc:	f43f aed2 	beq.w	8004284 <_strtod_l+0xc4>
 80044e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b28      	cmp	r3, #40	; 0x28
 80044e6:	d12d      	bne.n	8004544 <_strtod_l+0x384>
 80044e8:	499a      	ldr	r1, [pc, #616]	; (8004754 <_strtod_l+0x594>)
 80044ea:	aa1a      	add	r2, sp, #104	; 0x68
 80044ec:	a817      	add	r0, sp, #92	; 0x5c
 80044ee:	f001 fb0d 	bl	8005b0c <__hexnan>
 80044f2:	2805      	cmp	r0, #5
 80044f4:	d126      	bne.n	8004544 <_strtod_l+0x384>
 80044f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044f8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80044fc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004500:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004504:	e6a0      	b.n	8004248 <_strtod_l+0x88>
 8004506:	210a      	movs	r1, #10
 8004508:	fb01 2e0e 	mla	lr, r1, lr, r2
 800450c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004510:	e7b9      	b.n	8004486 <_strtod_l+0x2c6>
 8004512:	2a6e      	cmp	r2, #110	; 0x6e
 8004514:	e7db      	b.n	80044ce <_strtod_l+0x30e>
 8004516:	4990      	ldr	r1, [pc, #576]	; (8004758 <_strtod_l+0x598>)
 8004518:	a817      	add	r0, sp, #92	; 0x5c
 800451a:	f001 fae3 	bl	8005ae4 <__match>
 800451e:	2800      	cmp	r0, #0
 8004520:	f43f aeb0 	beq.w	8004284 <_strtod_l+0xc4>
 8004524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004526:	498d      	ldr	r1, [pc, #564]	; (800475c <_strtod_l+0x59c>)
 8004528:	3b01      	subs	r3, #1
 800452a:	a817      	add	r0, sp, #92	; 0x5c
 800452c:	9317      	str	r3, [sp, #92]	; 0x5c
 800452e:	f001 fad9 	bl	8005ae4 <__match>
 8004532:	b910      	cbnz	r0, 800453a <_strtod_l+0x37a>
 8004534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004536:	3301      	adds	r3, #1
 8004538:	9317      	str	r3, [sp, #92]	; 0x5c
 800453a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800476c <_strtod_l+0x5ac>
 800453e:	f04f 0a00 	mov.w	sl, #0
 8004542:	e681      	b.n	8004248 <_strtod_l+0x88>
 8004544:	4886      	ldr	r0, [pc, #536]	; (8004760 <_strtod_l+0x5a0>)
 8004546:	f002 f8c7 	bl	80066d8 <nan>
 800454a:	ec5b ab10 	vmov	sl, fp, d0
 800454e:	e67b      	b.n	8004248 <_strtod_l+0x88>
 8004550:	9b05      	ldr	r3, [sp, #20]
 8004552:	9807      	ldr	r0, [sp, #28]
 8004554:	1af3      	subs	r3, r6, r3
 8004556:	2f00      	cmp	r7, #0
 8004558:	bf08      	it	eq
 800455a:	462f      	moveq	r7, r5
 800455c:	2d10      	cmp	r5, #16
 800455e:	9306      	str	r3, [sp, #24]
 8004560:	46a8      	mov	r8, r5
 8004562:	bfa8      	it	ge
 8004564:	f04f 0810 	movge.w	r8, #16
 8004568:	f7fb ffe4 	bl	8000534 <__aeabi_ui2d>
 800456c:	2d09      	cmp	r5, #9
 800456e:	4682      	mov	sl, r0
 8004570:	468b      	mov	fp, r1
 8004572:	dd13      	ble.n	800459c <_strtod_l+0x3dc>
 8004574:	4b7b      	ldr	r3, [pc, #492]	; (8004764 <_strtod_l+0x5a4>)
 8004576:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800457a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800457e:	f7fc f853 	bl	8000628 <__aeabi_dmul>
 8004582:	4682      	mov	sl, r0
 8004584:	4648      	mov	r0, r9
 8004586:	468b      	mov	fp, r1
 8004588:	f7fb ffd4 	bl	8000534 <__aeabi_ui2d>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4650      	mov	r0, sl
 8004592:	4659      	mov	r1, fp
 8004594:	f7fb fe92 	bl	80002bc <__adddf3>
 8004598:	4682      	mov	sl, r0
 800459a:	468b      	mov	fp, r1
 800459c:	2d0f      	cmp	r5, #15
 800459e:	dc38      	bgt.n	8004612 <_strtod_l+0x452>
 80045a0:	9b06      	ldr	r3, [sp, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f43f ae50 	beq.w	8004248 <_strtod_l+0x88>
 80045a8:	dd24      	ble.n	80045f4 <_strtod_l+0x434>
 80045aa:	2b16      	cmp	r3, #22
 80045ac:	dc0b      	bgt.n	80045c6 <_strtod_l+0x406>
 80045ae:	496d      	ldr	r1, [pc, #436]	; (8004764 <_strtod_l+0x5a4>)
 80045b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045b8:	4652      	mov	r2, sl
 80045ba:	465b      	mov	r3, fp
 80045bc:	f7fc f834 	bl	8000628 <__aeabi_dmul>
 80045c0:	4682      	mov	sl, r0
 80045c2:	468b      	mov	fp, r1
 80045c4:	e640      	b.n	8004248 <_strtod_l+0x88>
 80045c6:	9a06      	ldr	r2, [sp, #24]
 80045c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80045cc:	4293      	cmp	r3, r2
 80045ce:	db20      	blt.n	8004612 <_strtod_l+0x452>
 80045d0:	4c64      	ldr	r4, [pc, #400]	; (8004764 <_strtod_l+0x5a4>)
 80045d2:	f1c5 050f 	rsb	r5, r5, #15
 80045d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80045da:	4652      	mov	r2, sl
 80045dc:	465b      	mov	r3, fp
 80045de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045e2:	f7fc f821 	bl	8000628 <__aeabi_dmul>
 80045e6:	9b06      	ldr	r3, [sp, #24]
 80045e8:	1b5d      	subs	r5, r3, r5
 80045ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80045ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80045f2:	e7e3      	b.n	80045bc <_strtod_l+0x3fc>
 80045f4:	9b06      	ldr	r3, [sp, #24]
 80045f6:	3316      	adds	r3, #22
 80045f8:	db0b      	blt.n	8004612 <_strtod_l+0x452>
 80045fa:	9b05      	ldr	r3, [sp, #20]
 80045fc:	1b9e      	subs	r6, r3, r6
 80045fe:	4b59      	ldr	r3, [pc, #356]	; (8004764 <_strtod_l+0x5a4>)
 8004600:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004608:	4650      	mov	r0, sl
 800460a:	4659      	mov	r1, fp
 800460c:	f7fc f936 	bl	800087c <__aeabi_ddiv>
 8004610:	e7d6      	b.n	80045c0 <_strtod_l+0x400>
 8004612:	9b06      	ldr	r3, [sp, #24]
 8004614:	eba5 0808 	sub.w	r8, r5, r8
 8004618:	4498      	add	r8, r3
 800461a:	f1b8 0f00 	cmp.w	r8, #0
 800461e:	dd74      	ble.n	800470a <_strtod_l+0x54a>
 8004620:	f018 030f 	ands.w	r3, r8, #15
 8004624:	d00a      	beq.n	800463c <_strtod_l+0x47c>
 8004626:	494f      	ldr	r1, [pc, #316]	; (8004764 <_strtod_l+0x5a4>)
 8004628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800462c:	4652      	mov	r2, sl
 800462e:	465b      	mov	r3, fp
 8004630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004634:	f7fb fff8 	bl	8000628 <__aeabi_dmul>
 8004638:	4682      	mov	sl, r0
 800463a:	468b      	mov	fp, r1
 800463c:	f038 080f 	bics.w	r8, r8, #15
 8004640:	d04f      	beq.n	80046e2 <_strtod_l+0x522>
 8004642:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004646:	dd22      	ble.n	800468e <_strtod_l+0x4ce>
 8004648:	2500      	movs	r5, #0
 800464a:	462e      	mov	r6, r5
 800464c:	9507      	str	r5, [sp, #28]
 800464e:	9505      	str	r5, [sp, #20]
 8004650:	2322      	movs	r3, #34	; 0x22
 8004652:	f8df b118 	ldr.w	fp, [pc, #280]	; 800476c <_strtod_l+0x5ac>
 8004656:	6023      	str	r3, [r4, #0]
 8004658:	f04f 0a00 	mov.w	sl, #0
 800465c:	9b07      	ldr	r3, [sp, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f43f adf2 	beq.w	8004248 <_strtod_l+0x88>
 8004664:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004666:	4620      	mov	r0, r4
 8004668:	f001 fbb2 	bl	8005dd0 <_Bfree>
 800466c:	9905      	ldr	r1, [sp, #20]
 800466e:	4620      	mov	r0, r4
 8004670:	f001 fbae 	bl	8005dd0 <_Bfree>
 8004674:	4631      	mov	r1, r6
 8004676:	4620      	mov	r0, r4
 8004678:	f001 fbaa 	bl	8005dd0 <_Bfree>
 800467c:	9907      	ldr	r1, [sp, #28]
 800467e:	4620      	mov	r0, r4
 8004680:	f001 fba6 	bl	8005dd0 <_Bfree>
 8004684:	4629      	mov	r1, r5
 8004686:	4620      	mov	r0, r4
 8004688:	f001 fba2 	bl	8005dd0 <_Bfree>
 800468c:	e5dc      	b.n	8004248 <_strtod_l+0x88>
 800468e:	4b36      	ldr	r3, [pc, #216]	; (8004768 <_strtod_l+0x5a8>)
 8004690:	9304      	str	r3, [sp, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004698:	4650      	mov	r0, sl
 800469a:	4659      	mov	r1, fp
 800469c:	4699      	mov	r9, r3
 800469e:	f1b8 0f01 	cmp.w	r8, #1
 80046a2:	dc21      	bgt.n	80046e8 <_strtod_l+0x528>
 80046a4:	b10b      	cbz	r3, 80046aa <_strtod_l+0x4ea>
 80046a6:	4682      	mov	sl, r0
 80046a8:	468b      	mov	fp, r1
 80046aa:	4b2f      	ldr	r3, [pc, #188]	; (8004768 <_strtod_l+0x5a8>)
 80046ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80046b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80046b4:	4652      	mov	r2, sl
 80046b6:	465b      	mov	r3, fp
 80046b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80046bc:	f7fb ffb4 	bl	8000628 <__aeabi_dmul>
 80046c0:	4b2a      	ldr	r3, [pc, #168]	; (800476c <_strtod_l+0x5ac>)
 80046c2:	460a      	mov	r2, r1
 80046c4:	400b      	ands	r3, r1
 80046c6:	492a      	ldr	r1, [pc, #168]	; (8004770 <_strtod_l+0x5b0>)
 80046c8:	428b      	cmp	r3, r1
 80046ca:	4682      	mov	sl, r0
 80046cc:	d8bc      	bhi.n	8004648 <_strtod_l+0x488>
 80046ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80046d2:	428b      	cmp	r3, r1
 80046d4:	bf86      	itte	hi
 80046d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8004774 <_strtod_l+0x5b4>
 80046da:	f04f 3aff 	movhi.w	sl, #4294967295
 80046de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80046e2:	2300      	movs	r3, #0
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	e084      	b.n	80047f2 <_strtod_l+0x632>
 80046e8:	f018 0f01 	tst.w	r8, #1
 80046ec:	d005      	beq.n	80046fa <_strtod_l+0x53a>
 80046ee:	9b04      	ldr	r3, [sp, #16]
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f7fb ff98 	bl	8000628 <__aeabi_dmul>
 80046f8:	2301      	movs	r3, #1
 80046fa:	9a04      	ldr	r2, [sp, #16]
 80046fc:	3208      	adds	r2, #8
 80046fe:	f109 0901 	add.w	r9, r9, #1
 8004702:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004706:	9204      	str	r2, [sp, #16]
 8004708:	e7c9      	b.n	800469e <_strtod_l+0x4de>
 800470a:	d0ea      	beq.n	80046e2 <_strtod_l+0x522>
 800470c:	f1c8 0800 	rsb	r8, r8, #0
 8004710:	f018 020f 	ands.w	r2, r8, #15
 8004714:	d00a      	beq.n	800472c <_strtod_l+0x56c>
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_strtod_l+0x5a4>)
 8004718:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800471c:	4650      	mov	r0, sl
 800471e:	4659      	mov	r1, fp
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	f7fc f8aa 	bl	800087c <__aeabi_ddiv>
 8004728:	4682      	mov	sl, r0
 800472a:	468b      	mov	fp, r1
 800472c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004730:	d0d7      	beq.n	80046e2 <_strtod_l+0x522>
 8004732:	f1b8 0f1f 	cmp.w	r8, #31
 8004736:	dd1f      	ble.n	8004778 <_strtod_l+0x5b8>
 8004738:	2500      	movs	r5, #0
 800473a:	462e      	mov	r6, r5
 800473c:	9507      	str	r5, [sp, #28]
 800473e:	9505      	str	r5, [sp, #20]
 8004740:	2322      	movs	r3, #34	; 0x22
 8004742:	f04f 0a00 	mov.w	sl, #0
 8004746:	f04f 0b00 	mov.w	fp, #0
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	e786      	b.n	800465c <_strtod_l+0x49c>
 800474e:	bf00      	nop
 8004750:	08006cec 	.word	0x08006cec
 8004754:	08006d04 	.word	0x08006d04
 8004758:	08006ce3 	.word	0x08006ce3
 800475c:	08006ce6 	.word	0x08006ce6
 8004760:	08006caa 	.word	0x08006caa
 8004764:	08006fd0 	.word	0x08006fd0
 8004768:	08006fa8 	.word	0x08006fa8
 800476c:	7ff00000 	.word	0x7ff00000
 8004770:	7ca00000 	.word	0x7ca00000
 8004774:	7fefffff 	.word	0x7fefffff
 8004778:	f018 0310 	ands.w	r3, r8, #16
 800477c:	bf18      	it	ne
 800477e:	236a      	movne	r3, #106	; 0x6a
 8004780:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8004b30 <_strtod_l+0x970>
 8004784:	9304      	str	r3, [sp, #16]
 8004786:	4650      	mov	r0, sl
 8004788:	4659      	mov	r1, fp
 800478a:	2300      	movs	r3, #0
 800478c:	f018 0f01 	tst.w	r8, #1
 8004790:	d004      	beq.n	800479c <_strtod_l+0x5dc>
 8004792:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004796:	f7fb ff47 	bl	8000628 <__aeabi_dmul>
 800479a:	2301      	movs	r3, #1
 800479c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80047a0:	f109 0908 	add.w	r9, r9, #8
 80047a4:	d1f2      	bne.n	800478c <_strtod_l+0x5cc>
 80047a6:	b10b      	cbz	r3, 80047ac <_strtod_l+0x5ec>
 80047a8:	4682      	mov	sl, r0
 80047aa:	468b      	mov	fp, r1
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	b1c3      	cbz	r3, 80047e2 <_strtod_l+0x622>
 80047b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80047b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	4659      	mov	r1, fp
 80047bc:	dd11      	ble.n	80047e2 <_strtod_l+0x622>
 80047be:	2b1f      	cmp	r3, #31
 80047c0:	f340 8124 	ble.w	8004a0c <_strtod_l+0x84c>
 80047c4:	2b34      	cmp	r3, #52	; 0x34
 80047c6:	bfde      	ittt	le
 80047c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80047cc:	f04f 33ff 	movle.w	r3, #4294967295
 80047d0:	fa03 f202 	lslle.w	r2, r3, r2
 80047d4:	f04f 0a00 	mov.w	sl, #0
 80047d8:	bfcc      	ite	gt
 80047da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80047de:	ea02 0b01 	andle.w	fp, r2, r1
 80047e2:	2200      	movs	r2, #0
 80047e4:	2300      	movs	r3, #0
 80047e6:	4650      	mov	r0, sl
 80047e8:	4659      	mov	r1, fp
 80047ea:	f7fc f985 	bl	8000af8 <__aeabi_dcmpeq>
 80047ee:	2800      	cmp	r0, #0
 80047f0:	d1a2      	bne.n	8004738 <_strtod_l+0x578>
 80047f2:	9b07      	ldr	r3, [sp, #28]
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	9908      	ldr	r1, [sp, #32]
 80047f8:	462b      	mov	r3, r5
 80047fa:	463a      	mov	r2, r7
 80047fc:	4620      	mov	r0, r4
 80047fe:	f001 fb4f 	bl	8005ea0 <__s2b>
 8004802:	9007      	str	r0, [sp, #28]
 8004804:	2800      	cmp	r0, #0
 8004806:	f43f af1f 	beq.w	8004648 <_strtod_l+0x488>
 800480a:	9b05      	ldr	r3, [sp, #20]
 800480c:	1b9e      	subs	r6, r3, r6
 800480e:	9b06      	ldr	r3, [sp, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	bfb4      	ite	lt
 8004814:	4633      	movlt	r3, r6
 8004816:	2300      	movge	r3, #0
 8004818:	930c      	str	r3, [sp, #48]	; 0x30
 800481a:	9b06      	ldr	r3, [sp, #24]
 800481c:	2500      	movs	r5, #0
 800481e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004822:	9312      	str	r3, [sp, #72]	; 0x48
 8004824:	462e      	mov	r6, r5
 8004826:	9b07      	ldr	r3, [sp, #28]
 8004828:	4620      	mov	r0, r4
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	f001 fa90 	bl	8005d50 <_Balloc>
 8004830:	9005      	str	r0, [sp, #20]
 8004832:	2800      	cmp	r0, #0
 8004834:	f43f af0c 	beq.w	8004650 <_strtod_l+0x490>
 8004838:	9b07      	ldr	r3, [sp, #28]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	3202      	adds	r2, #2
 800483e:	f103 010c 	add.w	r1, r3, #12
 8004842:	0092      	lsls	r2, r2, #2
 8004844:	300c      	adds	r0, #12
 8004846:	f7ff f871 	bl	800392c <memcpy>
 800484a:	ec4b ab10 	vmov	d0, sl, fp
 800484e:	aa1a      	add	r2, sp, #104	; 0x68
 8004850:	a919      	add	r1, sp, #100	; 0x64
 8004852:	4620      	mov	r0, r4
 8004854:	f001 fe6a 	bl	800652c <__d2b>
 8004858:	ec4b ab18 	vmov	d8, sl, fp
 800485c:	9018      	str	r0, [sp, #96]	; 0x60
 800485e:	2800      	cmp	r0, #0
 8004860:	f43f aef6 	beq.w	8004650 <_strtod_l+0x490>
 8004864:	2101      	movs	r1, #1
 8004866:	4620      	mov	r0, r4
 8004868:	f001 fbb4 	bl	8005fd4 <__i2b>
 800486c:	4606      	mov	r6, r0
 800486e:	2800      	cmp	r0, #0
 8004870:	f43f aeee 	beq.w	8004650 <_strtod_l+0x490>
 8004874:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004876:	9904      	ldr	r1, [sp, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	bfab      	itete	ge
 800487c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800487e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8004880:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8004882:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8004886:	bfac      	ite	ge
 8004888:	eb03 0902 	addge.w	r9, r3, r2
 800488c:	1ad7      	sublt	r7, r2, r3
 800488e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004890:	eba3 0801 	sub.w	r8, r3, r1
 8004894:	4490      	add	r8, r2
 8004896:	4ba1      	ldr	r3, [pc, #644]	; (8004b1c <_strtod_l+0x95c>)
 8004898:	f108 38ff 	add.w	r8, r8, #4294967295
 800489c:	4598      	cmp	r8, r3
 800489e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048a2:	f280 80c7 	bge.w	8004a34 <_strtod_l+0x874>
 80048a6:	eba3 0308 	sub.w	r3, r3, r8
 80048aa:	2b1f      	cmp	r3, #31
 80048ac:	eba2 0203 	sub.w	r2, r2, r3
 80048b0:	f04f 0101 	mov.w	r1, #1
 80048b4:	f300 80b1 	bgt.w	8004a1a <_strtod_l+0x85a>
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	930d      	str	r3, [sp, #52]	; 0x34
 80048be:	2300      	movs	r3, #0
 80048c0:	9308      	str	r3, [sp, #32]
 80048c2:	eb09 0802 	add.w	r8, r9, r2
 80048c6:	9b04      	ldr	r3, [sp, #16]
 80048c8:	45c1      	cmp	r9, r8
 80048ca:	4417      	add	r7, r2
 80048cc:	441f      	add	r7, r3
 80048ce:	464b      	mov	r3, r9
 80048d0:	bfa8      	it	ge
 80048d2:	4643      	movge	r3, r8
 80048d4:	42bb      	cmp	r3, r7
 80048d6:	bfa8      	it	ge
 80048d8:	463b      	movge	r3, r7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	bfc2      	ittt	gt
 80048de:	eba8 0803 	subgt.w	r8, r8, r3
 80048e2:	1aff      	subgt	r7, r7, r3
 80048e4:	eba9 0903 	subgt.w	r9, r9, r3
 80048e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	dd17      	ble.n	800491e <_strtod_l+0x75e>
 80048ee:	4631      	mov	r1, r6
 80048f0:	461a      	mov	r2, r3
 80048f2:	4620      	mov	r0, r4
 80048f4:	f001 fc2e 	bl	8006154 <__pow5mult>
 80048f8:	4606      	mov	r6, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	f43f aea8 	beq.w	8004650 <_strtod_l+0x490>
 8004900:	4601      	mov	r1, r0
 8004902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004904:	4620      	mov	r0, r4
 8004906:	f001 fb7b 	bl	8006000 <__multiply>
 800490a:	900b      	str	r0, [sp, #44]	; 0x2c
 800490c:	2800      	cmp	r0, #0
 800490e:	f43f ae9f 	beq.w	8004650 <_strtod_l+0x490>
 8004912:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004914:	4620      	mov	r0, r4
 8004916:	f001 fa5b 	bl	8005dd0 <_Bfree>
 800491a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800491c:	9318      	str	r3, [sp, #96]	; 0x60
 800491e:	f1b8 0f00 	cmp.w	r8, #0
 8004922:	f300 808c 	bgt.w	8004a3e <_strtod_l+0x87e>
 8004926:	9b06      	ldr	r3, [sp, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	dd08      	ble.n	800493e <_strtod_l+0x77e>
 800492c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800492e:	9905      	ldr	r1, [sp, #20]
 8004930:	4620      	mov	r0, r4
 8004932:	f001 fc0f 	bl	8006154 <__pow5mult>
 8004936:	9005      	str	r0, [sp, #20]
 8004938:	2800      	cmp	r0, #0
 800493a:	f43f ae89 	beq.w	8004650 <_strtod_l+0x490>
 800493e:	2f00      	cmp	r7, #0
 8004940:	dd08      	ble.n	8004954 <_strtod_l+0x794>
 8004942:	9905      	ldr	r1, [sp, #20]
 8004944:	463a      	mov	r2, r7
 8004946:	4620      	mov	r0, r4
 8004948:	f001 fc5e 	bl	8006208 <__lshift>
 800494c:	9005      	str	r0, [sp, #20]
 800494e:	2800      	cmp	r0, #0
 8004950:	f43f ae7e 	beq.w	8004650 <_strtod_l+0x490>
 8004954:	f1b9 0f00 	cmp.w	r9, #0
 8004958:	dd08      	ble.n	800496c <_strtod_l+0x7ac>
 800495a:	4631      	mov	r1, r6
 800495c:	464a      	mov	r2, r9
 800495e:	4620      	mov	r0, r4
 8004960:	f001 fc52 	bl	8006208 <__lshift>
 8004964:	4606      	mov	r6, r0
 8004966:	2800      	cmp	r0, #0
 8004968:	f43f ae72 	beq.w	8004650 <_strtod_l+0x490>
 800496c:	9a05      	ldr	r2, [sp, #20]
 800496e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004970:	4620      	mov	r0, r4
 8004972:	f001 fcd5 	bl	8006320 <__mdiff>
 8004976:	4605      	mov	r5, r0
 8004978:	2800      	cmp	r0, #0
 800497a:	f43f ae69 	beq.w	8004650 <_strtod_l+0x490>
 800497e:	68c3      	ldr	r3, [r0, #12]
 8004980:	930b      	str	r3, [sp, #44]	; 0x2c
 8004982:	2300      	movs	r3, #0
 8004984:	60c3      	str	r3, [r0, #12]
 8004986:	4631      	mov	r1, r6
 8004988:	f001 fcae 	bl	80062e8 <__mcmp>
 800498c:	2800      	cmp	r0, #0
 800498e:	da60      	bge.n	8004a52 <_strtod_l+0x892>
 8004990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004992:	ea53 030a 	orrs.w	r3, r3, sl
 8004996:	f040 8082 	bne.w	8004a9e <_strtod_l+0x8de>
 800499a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d17d      	bne.n	8004a9e <_strtod_l+0x8de>
 80049a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	051b      	lsls	r3, r3, #20
 80049aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049ae:	d976      	bls.n	8004a9e <_strtod_l+0x8de>
 80049b0:	696b      	ldr	r3, [r5, #20]
 80049b2:	b913      	cbnz	r3, 80049ba <_strtod_l+0x7fa>
 80049b4:	692b      	ldr	r3, [r5, #16]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	dd71      	ble.n	8004a9e <_strtod_l+0x8de>
 80049ba:	4629      	mov	r1, r5
 80049bc:	2201      	movs	r2, #1
 80049be:	4620      	mov	r0, r4
 80049c0:	f001 fc22 	bl	8006208 <__lshift>
 80049c4:	4631      	mov	r1, r6
 80049c6:	4605      	mov	r5, r0
 80049c8:	f001 fc8e 	bl	80062e8 <__mcmp>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	dd66      	ble.n	8004a9e <_strtod_l+0x8de>
 80049d0:	9904      	ldr	r1, [sp, #16]
 80049d2:	4a53      	ldr	r2, [pc, #332]	; (8004b20 <_strtod_l+0x960>)
 80049d4:	465b      	mov	r3, fp
 80049d6:	2900      	cmp	r1, #0
 80049d8:	f000 8081 	beq.w	8004ade <_strtod_l+0x91e>
 80049dc:	ea02 010b 	and.w	r1, r2, fp
 80049e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80049e4:	dc7b      	bgt.n	8004ade <_strtod_l+0x91e>
 80049e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80049ea:	f77f aea9 	ble.w	8004740 <_strtod_l+0x580>
 80049ee:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <_strtod_l+0x964>)
 80049f0:	4650      	mov	r0, sl
 80049f2:	4659      	mov	r1, fp
 80049f4:	2200      	movs	r2, #0
 80049f6:	f7fb fe17 	bl	8000628 <__aeabi_dmul>
 80049fa:	460b      	mov	r3, r1
 80049fc:	4303      	orrs	r3, r0
 80049fe:	bf08      	it	eq
 8004a00:	2322      	moveq	r3, #34	; 0x22
 8004a02:	4682      	mov	sl, r0
 8004a04:	468b      	mov	fp, r1
 8004a06:	bf08      	it	eq
 8004a08:	6023      	streq	r3, [r4, #0]
 8004a0a:	e62b      	b.n	8004664 <_strtod_l+0x4a4>
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	ea03 0a0a 	and.w	sl, r3, sl
 8004a18:	e6e3      	b.n	80047e2 <_strtod_l+0x622>
 8004a1a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004a1e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004a22:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004a26:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004a2a:	fa01 f308 	lsl.w	r3, r1, r8
 8004a2e:	9308      	str	r3, [sp, #32]
 8004a30:	910d      	str	r1, [sp, #52]	; 0x34
 8004a32:	e746      	b.n	80048c2 <_strtod_l+0x702>
 8004a34:	2300      	movs	r3, #0
 8004a36:	9308      	str	r3, [sp, #32]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	930d      	str	r3, [sp, #52]	; 0x34
 8004a3c:	e741      	b.n	80048c2 <_strtod_l+0x702>
 8004a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004a40:	4642      	mov	r2, r8
 8004a42:	4620      	mov	r0, r4
 8004a44:	f001 fbe0 	bl	8006208 <__lshift>
 8004a48:	9018      	str	r0, [sp, #96]	; 0x60
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	f47f af6b 	bne.w	8004926 <_strtod_l+0x766>
 8004a50:	e5fe      	b.n	8004650 <_strtod_l+0x490>
 8004a52:	465f      	mov	r7, fp
 8004a54:	d16e      	bne.n	8004b34 <_strtod_l+0x974>
 8004a56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a5c:	b342      	cbz	r2, 8004ab0 <_strtod_l+0x8f0>
 8004a5e:	4a32      	ldr	r2, [pc, #200]	; (8004b28 <_strtod_l+0x968>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d128      	bne.n	8004ab6 <_strtod_l+0x8f6>
 8004a64:	9b04      	ldr	r3, [sp, #16]
 8004a66:	4651      	mov	r1, sl
 8004a68:	b1eb      	cbz	r3, 8004aa6 <_strtod_l+0x8e6>
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <_strtod_l+0x960>)
 8004a6c:	403b      	ands	r3, r7
 8004a6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a72:	f04f 32ff 	mov.w	r2, #4294967295
 8004a76:	d819      	bhi.n	8004aac <_strtod_l+0x8ec>
 8004a78:	0d1b      	lsrs	r3, r3, #20
 8004a7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	4299      	cmp	r1, r3
 8004a84:	d117      	bne.n	8004ab6 <_strtod_l+0x8f6>
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <_strtod_l+0x96c>)
 8004a88:	429f      	cmp	r7, r3
 8004a8a:	d102      	bne.n	8004a92 <_strtod_l+0x8d2>
 8004a8c:	3101      	adds	r1, #1
 8004a8e:	f43f addf 	beq.w	8004650 <_strtod_l+0x490>
 8004a92:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <_strtod_l+0x960>)
 8004a94:	403b      	ands	r3, r7
 8004a96:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004a9a:	f04f 0a00 	mov.w	sl, #0
 8004a9e:	9b04      	ldr	r3, [sp, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1a4      	bne.n	80049ee <_strtod_l+0x82e>
 8004aa4:	e5de      	b.n	8004664 <_strtod_l+0x4a4>
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e7ea      	b.n	8004a82 <_strtod_l+0x8c2>
 8004aac:	4613      	mov	r3, r2
 8004aae:	e7e8      	b.n	8004a82 <_strtod_l+0x8c2>
 8004ab0:	ea53 030a 	orrs.w	r3, r3, sl
 8004ab4:	d08c      	beq.n	80049d0 <_strtod_l+0x810>
 8004ab6:	9b08      	ldr	r3, [sp, #32]
 8004ab8:	b1db      	cbz	r3, 8004af2 <_strtod_l+0x932>
 8004aba:	423b      	tst	r3, r7
 8004abc:	d0ef      	beq.n	8004a9e <_strtod_l+0x8de>
 8004abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ac0:	9a04      	ldr	r2, [sp, #16]
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	b1c3      	cbz	r3, 8004afa <_strtod_l+0x93a>
 8004ac8:	f7ff fb5b 	bl	8004182 <sulp>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	ec51 0b18 	vmov	r0, r1, d8
 8004ad4:	f7fb fbf2 	bl	80002bc <__adddf3>
 8004ad8:	4682      	mov	sl, r0
 8004ada:	468b      	mov	fp, r1
 8004adc:	e7df      	b.n	8004a9e <_strtod_l+0x8de>
 8004ade:	4013      	ands	r3, r2
 8004ae0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004ae4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004ae8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004aec:	f04f 3aff 	mov.w	sl, #4294967295
 8004af0:	e7d5      	b.n	8004a9e <_strtod_l+0x8de>
 8004af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004af4:	ea13 0f0a 	tst.w	r3, sl
 8004af8:	e7e0      	b.n	8004abc <_strtod_l+0x8fc>
 8004afa:	f7ff fb42 	bl	8004182 <sulp>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	ec51 0b18 	vmov	r0, r1, d8
 8004b06:	f7fb fbd7 	bl	80002b8 <__aeabi_dsub>
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	4682      	mov	sl, r0
 8004b10:	468b      	mov	fp, r1
 8004b12:	f7fb fff1 	bl	8000af8 <__aeabi_dcmpeq>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d0c1      	beq.n	8004a9e <_strtod_l+0x8de>
 8004b1a:	e611      	b.n	8004740 <_strtod_l+0x580>
 8004b1c:	fffffc02 	.word	0xfffffc02
 8004b20:	7ff00000 	.word	0x7ff00000
 8004b24:	39500000 	.word	0x39500000
 8004b28:	000fffff 	.word	0x000fffff
 8004b2c:	7fefffff 	.word	0x7fefffff
 8004b30:	08006d18 	.word	0x08006d18
 8004b34:	4631      	mov	r1, r6
 8004b36:	4628      	mov	r0, r5
 8004b38:	f001 fd54 	bl	80065e4 <__ratio>
 8004b3c:	ec59 8b10 	vmov	r8, r9, d0
 8004b40:	ee10 0a10 	vmov	r0, s0
 8004b44:	2200      	movs	r2, #0
 8004b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	f7fb ffe8 	bl	8000b20 <__aeabi_dcmple>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d07a      	beq.n	8004c4a <_strtod_l+0xa8a>
 8004b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04a      	beq.n	8004bf0 <_strtod_l+0xa30>
 8004b5a:	4b95      	ldr	r3, [pc, #596]	; (8004db0 <_strtod_l+0xbf0>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b62:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8004db0 <_strtod_l+0xbf0>
 8004b66:	f04f 0800 	mov.w	r8, #0
 8004b6a:	4b92      	ldr	r3, [pc, #584]	; (8004db4 <_strtod_l+0xbf4>)
 8004b6c:	403b      	ands	r3, r7
 8004b6e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b72:	4b91      	ldr	r3, [pc, #580]	; (8004db8 <_strtod_l+0xbf8>)
 8004b74:	429a      	cmp	r2, r3
 8004b76:	f040 80b0 	bne.w	8004cda <_strtod_l+0xb1a>
 8004b7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b7e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004b82:	ec4b ab10 	vmov	d0, sl, fp
 8004b86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b8a:	f001 fc53 	bl	8006434 <__ulp>
 8004b8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b92:	ec53 2b10 	vmov	r2, r3, d0
 8004b96:	f7fb fd47 	bl	8000628 <__aeabi_dmul>
 8004b9a:	4652      	mov	r2, sl
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	f7fb fb8d 	bl	80002bc <__adddf3>
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	4983      	ldr	r1, [pc, #524]	; (8004db4 <_strtod_l+0xbf4>)
 8004ba6:	4a85      	ldr	r2, [pc, #532]	; (8004dbc <_strtod_l+0xbfc>)
 8004ba8:	4019      	ands	r1, r3
 8004baa:	4291      	cmp	r1, r2
 8004bac:	4682      	mov	sl, r0
 8004bae:	d960      	bls.n	8004c72 <_strtod_l+0xab2>
 8004bb0:	ee18 3a90 	vmov	r3, s17
 8004bb4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d104      	bne.n	8004bc6 <_strtod_l+0xa06>
 8004bbc:	ee18 3a10 	vmov	r3, s16
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f43f ad45 	beq.w	8004650 <_strtod_l+0x490>
 8004bc6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8004dc8 <_strtod_l+0xc08>
 8004bca:	f04f 3aff 	mov.w	sl, #4294967295
 8004bce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f001 f8fd 	bl	8005dd0 <_Bfree>
 8004bd6:	9905      	ldr	r1, [sp, #20]
 8004bd8:	4620      	mov	r0, r4
 8004bda:	f001 f8f9 	bl	8005dd0 <_Bfree>
 8004bde:	4631      	mov	r1, r6
 8004be0:	4620      	mov	r0, r4
 8004be2:	f001 f8f5 	bl	8005dd0 <_Bfree>
 8004be6:	4629      	mov	r1, r5
 8004be8:	4620      	mov	r0, r4
 8004bea:	f001 f8f1 	bl	8005dd0 <_Bfree>
 8004bee:	e61a      	b.n	8004826 <_strtod_l+0x666>
 8004bf0:	f1ba 0f00 	cmp.w	sl, #0
 8004bf4:	d11b      	bne.n	8004c2e <_strtod_l+0xa6e>
 8004bf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004bfa:	b9f3      	cbnz	r3, 8004c3a <_strtod_l+0xa7a>
 8004bfc:	4b6c      	ldr	r3, [pc, #432]	; (8004db0 <_strtod_l+0xbf0>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4640      	mov	r0, r8
 8004c02:	4649      	mov	r1, r9
 8004c04:	f7fb ff82 	bl	8000b0c <__aeabi_dcmplt>
 8004c08:	b9d0      	cbnz	r0, 8004c40 <_strtod_l+0xa80>
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4b6c      	ldr	r3, [pc, #432]	; (8004dc0 <_strtod_l+0xc00>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	f7fb fd09 	bl	8000628 <__aeabi_dmul>
 8004c16:	4680      	mov	r8, r0
 8004c18:	4689      	mov	r9, r1
 8004c1a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004c1e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8004c22:	9315      	str	r3, [sp, #84]	; 0x54
 8004c24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004c28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c2c:	e79d      	b.n	8004b6a <_strtod_l+0x9aa>
 8004c2e:	f1ba 0f01 	cmp.w	sl, #1
 8004c32:	d102      	bne.n	8004c3a <_strtod_l+0xa7a>
 8004c34:	2f00      	cmp	r7, #0
 8004c36:	f43f ad83 	beq.w	8004740 <_strtod_l+0x580>
 8004c3a:	4b62      	ldr	r3, [pc, #392]	; (8004dc4 <_strtod_l+0xc04>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	e78e      	b.n	8004b5e <_strtod_l+0x99e>
 8004c40:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004dc0 <_strtod_l+0xc00>
 8004c44:	f04f 0800 	mov.w	r8, #0
 8004c48:	e7e7      	b.n	8004c1a <_strtod_l+0xa5a>
 8004c4a:	4b5d      	ldr	r3, [pc, #372]	; (8004dc0 <_strtod_l+0xc00>)
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	2200      	movs	r2, #0
 8004c52:	f7fb fce9 	bl	8000628 <__aeabi_dmul>
 8004c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c58:	4680      	mov	r8, r0
 8004c5a:	4689      	mov	r9, r1
 8004c5c:	b933      	cbnz	r3, 8004c6c <_strtod_l+0xaac>
 8004c5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c62:	900e      	str	r0, [sp, #56]	; 0x38
 8004c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c66:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004c6a:	e7dd      	b.n	8004c28 <_strtod_l+0xa68>
 8004c6c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8004c70:	e7f9      	b.n	8004c66 <_strtod_l+0xaa6>
 8004c72:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004c76:	9b04      	ldr	r3, [sp, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1a8      	bne.n	8004bce <_strtod_l+0xa0e>
 8004c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004c80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004c82:	0d1b      	lsrs	r3, r3, #20
 8004c84:	051b      	lsls	r3, r3, #20
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d1a1      	bne.n	8004bce <_strtod_l+0xa0e>
 8004c8a:	4640      	mov	r0, r8
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	f7fb ff9d 	bl	8000bcc <__aeabi_d2lz>
 8004c92:	f7fb fc9b 	bl	80005cc <__aeabi_l2d>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	4649      	mov	r1, r9
 8004c9e:	f7fb fb0b 	bl	80002b8 <__aeabi_dsub>
 8004ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ca8:	ea43 030a 	orr.w	r3, r3, sl
 8004cac:	4313      	orrs	r3, r2
 8004cae:	4680      	mov	r8, r0
 8004cb0:	4689      	mov	r9, r1
 8004cb2:	d055      	beq.n	8004d60 <_strtod_l+0xba0>
 8004cb4:	a336      	add	r3, pc, #216	; (adr r3, 8004d90 <_strtod_l+0xbd0>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb ff27 	bl	8000b0c <__aeabi_dcmplt>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f47f acd0 	bne.w	8004664 <_strtod_l+0x4a4>
 8004cc4:	a334      	add	r3, pc, #208	; (adr r3, 8004d98 <_strtod_l+0xbd8>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb ff3b 	bl	8000b48 <__aeabi_dcmpgt>
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	f43f af7b 	beq.w	8004bce <_strtod_l+0xa0e>
 8004cd8:	e4c4      	b.n	8004664 <_strtod_l+0x4a4>
 8004cda:	9b04      	ldr	r3, [sp, #16]
 8004cdc:	b333      	cbz	r3, 8004d2c <_strtod_l+0xb6c>
 8004cde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ce0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ce4:	d822      	bhi.n	8004d2c <_strtod_l+0xb6c>
 8004ce6:	a32e      	add	r3, pc, #184	; (adr r3, 8004da0 <_strtod_l+0xbe0>)
 8004ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cec:	4640      	mov	r0, r8
 8004cee:	4649      	mov	r1, r9
 8004cf0:	f7fb ff16 	bl	8000b20 <__aeabi_dcmple>
 8004cf4:	b1a0      	cbz	r0, 8004d20 <_strtod_l+0xb60>
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	f7fb ff2f 	bl	8000b5c <__aeabi_d2uiz>
 8004cfe:	2801      	cmp	r0, #1
 8004d00:	bf38      	it	cc
 8004d02:	2001      	movcc	r0, #1
 8004d04:	f7fb fc16 	bl	8000534 <__aeabi_ui2d>
 8004d08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d0a:	4680      	mov	r8, r0
 8004d0c:	4689      	mov	r9, r1
 8004d0e:	bb23      	cbnz	r3, 8004d5a <_strtod_l+0xb9a>
 8004d10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d14:	9010      	str	r0, [sp, #64]	; 0x40
 8004d16:	9311      	str	r3, [sp, #68]	; 0x44
 8004d18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d1c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004d24:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d30:	eeb0 0a48 	vmov.f32	s0, s16
 8004d34:	eef0 0a68 	vmov.f32	s1, s17
 8004d38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d3c:	f001 fb7a 	bl	8006434 <__ulp>
 8004d40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d44:	ec53 2b10 	vmov	r2, r3, d0
 8004d48:	f7fb fc6e 	bl	8000628 <__aeabi_dmul>
 8004d4c:	ec53 2b18 	vmov	r2, r3, d8
 8004d50:	f7fb fab4 	bl	80002bc <__adddf3>
 8004d54:	4682      	mov	sl, r0
 8004d56:	468b      	mov	fp, r1
 8004d58:	e78d      	b.n	8004c76 <_strtod_l+0xab6>
 8004d5a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004d5e:	e7db      	b.n	8004d18 <_strtod_l+0xb58>
 8004d60:	a311      	add	r3, pc, #68	; (adr r3, 8004da8 <_strtod_l+0xbe8>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fed1 	bl	8000b0c <__aeabi_dcmplt>
 8004d6a:	e7b2      	b.n	8004cd2 <_strtod_l+0xb12>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004d72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	f7ff ba6b 	b.w	8004250 <_strtod_l+0x90>
 8004d7a:	2a65      	cmp	r2, #101	; 0x65
 8004d7c:	f43f ab5f 	beq.w	800443e <_strtod_l+0x27e>
 8004d80:	2a45      	cmp	r2, #69	; 0x45
 8004d82:	f43f ab5c 	beq.w	800443e <_strtod_l+0x27e>
 8004d86:	2301      	movs	r3, #1
 8004d88:	f7ff bb94 	b.w	80044b4 <_strtod_l+0x2f4>
 8004d8c:	f3af 8000 	nop.w
 8004d90:	94a03595 	.word	0x94a03595
 8004d94:	3fdfffff 	.word	0x3fdfffff
 8004d98:	35afe535 	.word	0x35afe535
 8004d9c:	3fe00000 	.word	0x3fe00000
 8004da0:	ffc00000 	.word	0xffc00000
 8004da4:	41dfffff 	.word	0x41dfffff
 8004da8:	94a03595 	.word	0x94a03595
 8004dac:	3fcfffff 	.word	0x3fcfffff
 8004db0:	3ff00000 	.word	0x3ff00000
 8004db4:	7ff00000 	.word	0x7ff00000
 8004db8:	7fe00000 	.word	0x7fe00000
 8004dbc:	7c9fffff 	.word	0x7c9fffff
 8004dc0:	3fe00000 	.word	0x3fe00000
 8004dc4:	bff00000 	.word	0xbff00000
 8004dc8:	7fefffff 	.word	0x7fefffff

08004dcc <strtod>:
 8004dcc:	460a      	mov	r2, r1
 8004dce:	4601      	mov	r1, r0
 8004dd0:	4802      	ldr	r0, [pc, #8]	; (8004ddc <strtod+0x10>)
 8004dd2:	4b03      	ldr	r3, [pc, #12]	; (8004de0 <strtod+0x14>)
 8004dd4:	6800      	ldr	r0, [r0, #0]
 8004dd6:	f7ff b9f3 	b.w	80041c0 <_strtod_l>
 8004dda:	bf00      	nop
 8004ddc:	2000000c 	.word	0x2000000c
 8004de0:	20000074 	.word	0x20000074

08004de4 <_strtoll_l.constprop.0>:
 8004de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de8:	b085      	sub	sp, #20
 8004dea:	4688      	mov	r8, r1
 8004dec:	9201      	str	r2, [sp, #4]
 8004dee:	4a47      	ldr	r2, [pc, #284]	; (8004f0c <_strtoll_l.constprop.0+0x128>)
 8004df0:	9003      	str	r0, [sp, #12]
 8004df2:	461e      	mov	r6, r3
 8004df4:	460d      	mov	r5, r1
 8004df6:	462b      	mov	r3, r5
 8004df8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dfc:	5ca7      	ldrb	r7, [r4, r2]
 8004dfe:	f017 0708 	ands.w	r7, r7, #8
 8004e02:	d1f8      	bne.n	8004df6 <_strtoll_l.constprop.0+0x12>
 8004e04:	2c2d      	cmp	r4, #45	; 0x2d
 8004e06:	d147      	bne.n	8004e98 <_strtoll_l.constprop.0+0xb4>
 8004e08:	782c      	ldrb	r4, [r5, #0]
 8004e0a:	2701      	movs	r7, #1
 8004e0c:	1c9d      	adds	r5, r3, #2
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d077      	beq.n	8004f02 <_strtoll_l.constprop.0+0x11e>
 8004e12:	2e10      	cmp	r6, #16
 8004e14:	d109      	bne.n	8004e2a <_strtoll_l.constprop.0+0x46>
 8004e16:	2c30      	cmp	r4, #48	; 0x30
 8004e18:	d107      	bne.n	8004e2a <_strtoll_l.constprop.0+0x46>
 8004e1a:	782b      	ldrb	r3, [r5, #0]
 8004e1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e20:	2b58      	cmp	r3, #88	; 0x58
 8004e22:	d169      	bne.n	8004ef8 <_strtoll_l.constprop.0+0x114>
 8004e24:	786c      	ldrb	r4, [r5, #1]
 8004e26:	2610      	movs	r6, #16
 8004e28:	3502      	adds	r5, #2
 8004e2a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 8004e2e:	f107 3bff 	add.w	fp, r7, #4294967295
 8004e32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e36:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8004e3a:	4632      	mov	r2, r6
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	4658      	mov	r0, fp
 8004e40:	4651      	mov	r1, sl
 8004e42:	f7fb feab 	bl	8000b9c <__aeabi_uldivmod>
 8004e46:	2300      	movs	r3, #0
 8004e48:	9202      	str	r2, [sp, #8]
 8004e4a:	468c      	mov	ip, r1
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4618      	mov	r0, r3
 8004e52:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004e56:	f1be 0f09 	cmp.w	lr, #9
 8004e5a:	d822      	bhi.n	8004ea2 <_strtoll_l.constprop.0+0xbe>
 8004e5c:	4674      	mov	r4, lr
 8004e5e:	42a6      	cmp	r6, r4
 8004e60:	dd30      	ble.n	8004ec4 <_strtoll_l.constprop.0+0xe0>
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d014      	beq.n	8004e92 <_strtoll_l.constprop.0+0xae>
 8004e68:	4282      	cmp	r2, r0
 8004e6a:	eb7c 0301 	sbcs.w	r3, ip, r1
 8004e6e:	d326      	bcc.n	8004ebe <_strtoll_l.constprop.0+0xda>
 8004e70:	458c      	cmp	ip, r1
 8004e72:	bf08      	it	eq
 8004e74:	4282      	cmpeq	r2, r0
 8004e76:	d102      	bne.n	8004e7e <_strtoll_l.constprop.0+0x9a>
 8004e78:	9b02      	ldr	r3, [sp, #8]
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	db1f      	blt.n	8004ebe <_strtoll_l.constprop.0+0xda>
 8004e7e:	4371      	muls	r1, r6
 8004e80:	fb00 1109 	mla	r1, r0, r9, r1
 8004e84:	fba6 0300 	umull	r0, r3, r6, r0
 8004e88:	4419      	add	r1, r3
 8004e8a:	1820      	adds	r0, r4, r0
 8004e8c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8004e90:	2301      	movs	r3, #1
 8004e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e96:	e7dc      	b.n	8004e52 <_strtoll_l.constprop.0+0x6e>
 8004e98:	2c2b      	cmp	r4, #43	; 0x2b
 8004e9a:	bf04      	itt	eq
 8004e9c:	782c      	ldrbeq	r4, [r5, #0]
 8004e9e:	1c9d      	addeq	r5, r3, #2
 8004ea0:	e7b5      	b.n	8004e0e <_strtoll_l.constprop.0+0x2a>
 8004ea2:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004ea6:	f1be 0f19 	cmp.w	lr, #25
 8004eaa:	d801      	bhi.n	8004eb0 <_strtoll_l.constprop.0+0xcc>
 8004eac:	3c37      	subs	r4, #55	; 0x37
 8004eae:	e7d6      	b.n	8004e5e <_strtoll_l.constprop.0+0x7a>
 8004eb0:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004eb4:	f1be 0f19 	cmp.w	lr, #25
 8004eb8:	d804      	bhi.n	8004ec4 <_strtoll_l.constprop.0+0xe0>
 8004eba:	3c57      	subs	r4, #87	; 0x57
 8004ebc:	e7cf      	b.n	8004e5e <_strtoll_l.constprop.0+0x7a>
 8004ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec2:	e7e6      	b.n	8004e92 <_strtoll_l.constprop.0+0xae>
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	d109      	bne.n	8004edc <_strtoll_l.constprop.0+0xf8>
 8004ec8:	9a03      	ldr	r2, [sp, #12]
 8004eca:	2322      	movs	r3, #34	; 0x22
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	9b01      	ldr	r3, [sp, #4]
 8004ed0:	4658      	mov	r0, fp
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	b953      	cbnz	r3, 8004eec <_strtoll_l.constprop.0+0x108>
 8004ed6:	b005      	add	sp, #20
 8004ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004edc:	b117      	cbz	r7, 8004ee4 <_strtoll_l.constprop.0+0x100>
 8004ede:	4240      	negs	r0, r0
 8004ee0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004ee4:	9a01      	ldr	r2, [sp, #4]
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d0f5      	beq.n	8004ed6 <_strtoll_l.constprop.0+0xf2>
 8004eea:	b10b      	cbz	r3, 8004ef0 <_strtoll_l.constprop.0+0x10c>
 8004eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8004ef0:	9b01      	ldr	r3, [sp, #4]
 8004ef2:	f8c3 8000 	str.w	r8, [r3]
 8004ef6:	e7ee      	b.n	8004ed6 <_strtoll_l.constprop.0+0xf2>
 8004ef8:	2430      	movs	r4, #48	; 0x30
 8004efa:	2e00      	cmp	r6, #0
 8004efc:	d195      	bne.n	8004e2a <_strtoll_l.constprop.0+0x46>
 8004efe:	2608      	movs	r6, #8
 8004f00:	e793      	b.n	8004e2a <_strtoll_l.constprop.0+0x46>
 8004f02:	2c30      	cmp	r4, #48	; 0x30
 8004f04:	d089      	beq.n	8004e1a <_strtoll_l.constprop.0+0x36>
 8004f06:	260a      	movs	r6, #10
 8004f08:	e78f      	b.n	8004e2a <_strtoll_l.constprop.0+0x46>
 8004f0a:	bf00      	nop
 8004f0c:	08006d41 	.word	0x08006d41

08004f10 <strtoll>:
 8004f10:	4613      	mov	r3, r2
 8004f12:	460a      	mov	r2, r1
 8004f14:	4601      	mov	r1, r0
 8004f16:	4802      	ldr	r0, [pc, #8]	; (8004f20 <strtoll+0x10>)
 8004f18:	6800      	ldr	r0, [r0, #0]
 8004f1a:	f7ff bf63 	b.w	8004de4 <_strtoll_l.constprop.0>
 8004f1e:	bf00      	nop
 8004f20:	2000000c 	.word	0x2000000c

08004f24 <_strtoull_l.constprop.0>:
 8004f24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f28:	4692      	mov	sl, r2
 8004f2a:	4a49      	ldr	r2, [pc, #292]	; (8005050 <_strtoull_l.constprop.0+0x12c>)
 8004f2c:	9001      	str	r0, [sp, #4]
 8004f2e:	4689      	mov	r9, r1
 8004f30:	461d      	mov	r5, r3
 8004f32:	460e      	mov	r6, r1
 8004f34:	4633      	mov	r3, r6
 8004f36:	f816 4b01 	ldrb.w	r4, [r6], #1
 8004f3a:	5ca7      	ldrb	r7, [r4, r2]
 8004f3c:	f017 0708 	ands.w	r7, r7, #8
 8004f40:	d1f8      	bne.n	8004f34 <_strtoull_l.constprop.0+0x10>
 8004f42:	2c2d      	cmp	r4, #45	; 0x2d
 8004f44:	d14a      	bne.n	8004fdc <_strtoull_l.constprop.0+0xb8>
 8004f46:	7834      	ldrb	r4, [r6, #0]
 8004f48:	2701      	movs	r7, #1
 8004f4a:	1c9e      	adds	r6, r3, #2
 8004f4c:	2d00      	cmp	r5, #0
 8004f4e:	d07b      	beq.n	8005048 <_strtoull_l.constprop.0+0x124>
 8004f50:	2d10      	cmp	r5, #16
 8004f52:	d109      	bne.n	8004f68 <_strtoull_l.constprop.0+0x44>
 8004f54:	2c30      	cmp	r4, #48	; 0x30
 8004f56:	d107      	bne.n	8004f68 <_strtoull_l.constprop.0+0x44>
 8004f58:	7833      	ldrb	r3, [r6, #0]
 8004f5a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004f5e:	2b58      	cmp	r3, #88	; 0x58
 8004f60:	d16d      	bne.n	800503e <_strtoull_l.constprop.0+0x11a>
 8004f62:	7874      	ldrb	r4, [r6, #1]
 8004f64:	2510      	movs	r5, #16
 8004f66:	3602      	adds	r6, #2
 8004f68:	ea4f 7be5 	mov.w	fp, r5, asr #31
 8004f6c:	462a      	mov	r2, r5
 8004f6e:	465b      	mov	r3, fp
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	f04f 31ff 	mov.w	r1, #4294967295
 8004f78:	f7fb fe10 	bl	8000b9c <__aeabi_uldivmod>
 8004f7c:	462a      	mov	r2, r5
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	4688      	mov	r8, r1
 8004f82:	465b      	mov	r3, fp
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	f04f 31ff 	mov.w	r1, #4294967295
 8004f8c:	f7fb fe06 	bl	8000b9c <__aeabi_uldivmod>
 8004f90:	2300      	movs	r3, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	4619      	mov	r1, r3
 8004f96:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004f9a:	f1bc 0f09 	cmp.w	ip, #9
 8004f9e:	d822      	bhi.n	8004fe6 <_strtoull_l.constprop.0+0xc2>
 8004fa0:	4664      	mov	r4, ip
 8004fa2:	42a5      	cmp	r5, r4
 8004fa4:	dd30      	ble.n	8005008 <_strtoull_l.constprop.0+0xe4>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	db2b      	blt.n	8005002 <_strtoull_l.constprop.0+0xde>
 8004faa:	9b00      	ldr	r3, [sp, #0]
 8004fac:	4283      	cmp	r3, r0
 8004fae:	eb78 0301 	sbcs.w	r3, r8, r1
 8004fb2:	d326      	bcc.n	8005002 <_strtoull_l.constprop.0+0xde>
 8004fb4:	9b00      	ldr	r3, [sp, #0]
 8004fb6:	4588      	cmp	r8, r1
 8004fb8:	bf08      	it	eq
 8004fba:	4283      	cmpeq	r3, r0
 8004fbc:	d101      	bne.n	8004fc2 <_strtoull_l.constprop.0+0x9e>
 8004fbe:	42a2      	cmp	r2, r4
 8004fc0:	db1f      	blt.n	8005002 <_strtoull_l.constprop.0+0xde>
 8004fc2:	4369      	muls	r1, r5
 8004fc4:	fb00 110b 	mla	r1, r0, fp, r1
 8004fc8:	fba5 0300 	umull	r0, r3, r5, r0
 8004fcc:	4419      	add	r1, r3
 8004fce:	1820      	adds	r0, r4, r0
 8004fd0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f816 4b01 	ldrb.w	r4, [r6], #1
 8004fda:	e7dc      	b.n	8004f96 <_strtoull_l.constprop.0+0x72>
 8004fdc:	2c2b      	cmp	r4, #43	; 0x2b
 8004fde:	bf04      	itt	eq
 8004fe0:	7834      	ldrbeq	r4, [r6, #0]
 8004fe2:	1c9e      	addeq	r6, r3, #2
 8004fe4:	e7b2      	b.n	8004f4c <_strtoull_l.constprop.0+0x28>
 8004fe6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004fea:	f1bc 0f19 	cmp.w	ip, #25
 8004fee:	d801      	bhi.n	8004ff4 <_strtoull_l.constprop.0+0xd0>
 8004ff0:	3c37      	subs	r4, #55	; 0x37
 8004ff2:	e7d6      	b.n	8004fa2 <_strtoull_l.constprop.0+0x7e>
 8004ff4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ff8:	f1bc 0f19 	cmp.w	ip, #25
 8004ffc:	d804      	bhi.n	8005008 <_strtoull_l.constprop.0+0xe4>
 8004ffe:	3c57      	subs	r4, #87	; 0x57
 8005000:	e7cf      	b.n	8004fa2 <_strtoull_l.constprop.0+0x7e>
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
 8005006:	e7e6      	b.n	8004fd6 <_strtoull_l.constprop.0+0xb2>
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0b      	bge.n	8005024 <_strtoull_l.constprop.0+0x100>
 800500c:	9a01      	ldr	r2, [sp, #4]
 800500e:	2322      	movs	r3, #34	; 0x22
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4601      	mov	r1, r0
 8005018:	f1ba 0f00 	cmp.w	sl, #0
 800501c:	d10a      	bne.n	8005034 <_strtoull_l.constprop.0+0x110>
 800501e:	b003      	add	sp, #12
 8005020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005024:	b117      	cbz	r7, 800502c <_strtoull_l.constprop.0+0x108>
 8005026:	4240      	negs	r0, r0
 8005028:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800502c:	f1ba 0f00 	cmp.w	sl, #0
 8005030:	d0f5      	beq.n	800501e <_strtoull_l.constprop.0+0xfa>
 8005032:	b10b      	cbz	r3, 8005038 <_strtoull_l.constprop.0+0x114>
 8005034:	f106 39ff 	add.w	r9, r6, #4294967295
 8005038:	f8ca 9000 	str.w	r9, [sl]
 800503c:	e7ef      	b.n	800501e <_strtoull_l.constprop.0+0xfa>
 800503e:	2430      	movs	r4, #48	; 0x30
 8005040:	2d00      	cmp	r5, #0
 8005042:	d191      	bne.n	8004f68 <_strtoull_l.constprop.0+0x44>
 8005044:	2508      	movs	r5, #8
 8005046:	e78f      	b.n	8004f68 <_strtoull_l.constprop.0+0x44>
 8005048:	2c30      	cmp	r4, #48	; 0x30
 800504a:	d085      	beq.n	8004f58 <_strtoull_l.constprop.0+0x34>
 800504c:	250a      	movs	r5, #10
 800504e:	e78b      	b.n	8004f68 <_strtoull_l.constprop.0+0x44>
 8005050:	08006d41 	.word	0x08006d41

08005054 <strtoull>:
 8005054:	4613      	mov	r3, r2
 8005056:	460a      	mov	r2, r1
 8005058:	4601      	mov	r1, r0
 800505a:	4802      	ldr	r0, [pc, #8]	; (8005064 <strtoull+0x10>)
 800505c:	6800      	ldr	r0, [r0, #0]
 800505e:	f7ff bf61 	b.w	8004f24 <_strtoull_l.constprop.0>
 8005062:	bf00      	nop
 8005064:	2000000c 	.word	0x2000000c

08005068 <__swbuf_r>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	460e      	mov	r6, r1
 800506c:	4614      	mov	r4, r2
 800506e:	4605      	mov	r5, r0
 8005070:	b118      	cbz	r0, 800507a <__swbuf_r+0x12>
 8005072:	6983      	ldr	r3, [r0, #24]
 8005074:	b90b      	cbnz	r3, 800507a <__swbuf_r+0x12>
 8005076:	f000 f9d9 	bl	800542c <__sinit>
 800507a:	4b21      	ldr	r3, [pc, #132]	; (8005100 <__swbuf_r+0x98>)
 800507c:	429c      	cmp	r4, r3
 800507e:	d12b      	bne.n	80050d8 <__swbuf_r+0x70>
 8005080:	686c      	ldr	r4, [r5, #4]
 8005082:	69a3      	ldr	r3, [r4, #24]
 8005084:	60a3      	str	r3, [r4, #8]
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	071a      	lsls	r2, r3, #28
 800508a:	d52f      	bpl.n	80050ec <__swbuf_r+0x84>
 800508c:	6923      	ldr	r3, [r4, #16]
 800508e:	b36b      	cbz	r3, 80050ec <__swbuf_r+0x84>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	1ac0      	subs	r0, r0, r3
 8005096:	6963      	ldr	r3, [r4, #20]
 8005098:	b2f6      	uxtb	r6, r6
 800509a:	4283      	cmp	r3, r0
 800509c:	4637      	mov	r7, r6
 800509e:	dc04      	bgt.n	80050aa <__swbuf_r+0x42>
 80050a0:	4621      	mov	r1, r4
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f92e 	bl	8005304 <_fflush_r>
 80050a8:	bb30      	cbnz	r0, 80050f8 <__swbuf_r+0x90>
 80050aa:	68a3      	ldr	r3, [r4, #8]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	60a3      	str	r3, [r4, #8]
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	6022      	str	r2, [r4, #0]
 80050b6:	701e      	strb	r6, [r3, #0]
 80050b8:	6963      	ldr	r3, [r4, #20]
 80050ba:	3001      	adds	r0, #1
 80050bc:	4283      	cmp	r3, r0
 80050be:	d004      	beq.n	80050ca <__swbuf_r+0x62>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	07db      	lsls	r3, r3, #31
 80050c4:	d506      	bpl.n	80050d4 <__swbuf_r+0x6c>
 80050c6:	2e0a      	cmp	r6, #10
 80050c8:	d104      	bne.n	80050d4 <__swbuf_r+0x6c>
 80050ca:	4621      	mov	r1, r4
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 f919 	bl	8005304 <_fflush_r>
 80050d2:	b988      	cbnz	r0, 80050f8 <__swbuf_r+0x90>
 80050d4:	4638      	mov	r0, r7
 80050d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <__swbuf_r+0x9c>)
 80050da:	429c      	cmp	r4, r3
 80050dc:	d101      	bne.n	80050e2 <__swbuf_r+0x7a>
 80050de:	68ac      	ldr	r4, [r5, #8]
 80050e0:	e7cf      	b.n	8005082 <__swbuf_r+0x1a>
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <__swbuf_r+0xa0>)
 80050e4:	429c      	cmp	r4, r3
 80050e6:	bf08      	it	eq
 80050e8:	68ec      	ldreq	r4, [r5, #12]
 80050ea:	e7ca      	b.n	8005082 <__swbuf_r+0x1a>
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f80c 	bl	800510c <__swsetup_r>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d0cb      	beq.n	8005090 <__swbuf_r+0x28>
 80050f8:	f04f 37ff 	mov.w	r7, #4294967295
 80050fc:	e7ea      	b.n	80050d4 <__swbuf_r+0x6c>
 80050fe:	bf00      	nop
 8005100:	08006e64 	.word	0x08006e64
 8005104:	08006e84 	.word	0x08006e84
 8005108:	08006e44 	.word	0x08006e44

0800510c <__swsetup_r>:
 800510c:	4b32      	ldr	r3, [pc, #200]	; (80051d8 <__swsetup_r+0xcc>)
 800510e:	b570      	push	{r4, r5, r6, lr}
 8005110:	681d      	ldr	r5, [r3, #0]
 8005112:	4606      	mov	r6, r0
 8005114:	460c      	mov	r4, r1
 8005116:	b125      	cbz	r5, 8005122 <__swsetup_r+0x16>
 8005118:	69ab      	ldr	r3, [r5, #24]
 800511a:	b913      	cbnz	r3, 8005122 <__swsetup_r+0x16>
 800511c:	4628      	mov	r0, r5
 800511e:	f000 f985 	bl	800542c <__sinit>
 8005122:	4b2e      	ldr	r3, [pc, #184]	; (80051dc <__swsetup_r+0xd0>)
 8005124:	429c      	cmp	r4, r3
 8005126:	d10f      	bne.n	8005148 <__swsetup_r+0x3c>
 8005128:	686c      	ldr	r4, [r5, #4]
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005130:	0719      	lsls	r1, r3, #28
 8005132:	d42c      	bmi.n	800518e <__swsetup_r+0x82>
 8005134:	06dd      	lsls	r5, r3, #27
 8005136:	d411      	bmi.n	800515c <__swsetup_r+0x50>
 8005138:	2309      	movs	r3, #9
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005140:	81a3      	strh	r3, [r4, #12]
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	e03e      	b.n	80051c6 <__swsetup_r+0xba>
 8005148:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <__swsetup_r+0xd4>)
 800514a:	429c      	cmp	r4, r3
 800514c:	d101      	bne.n	8005152 <__swsetup_r+0x46>
 800514e:	68ac      	ldr	r4, [r5, #8]
 8005150:	e7eb      	b.n	800512a <__swsetup_r+0x1e>
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <__swsetup_r+0xd8>)
 8005154:	429c      	cmp	r4, r3
 8005156:	bf08      	it	eq
 8005158:	68ec      	ldreq	r4, [r5, #12]
 800515a:	e7e6      	b.n	800512a <__swsetup_r+0x1e>
 800515c:	0758      	lsls	r0, r3, #29
 800515e:	d512      	bpl.n	8005186 <__swsetup_r+0x7a>
 8005160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005162:	b141      	cbz	r1, 8005176 <__swsetup_r+0x6a>
 8005164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005168:	4299      	cmp	r1, r3
 800516a:	d002      	beq.n	8005172 <__swsetup_r+0x66>
 800516c:	4630      	mov	r0, r6
 800516e:	f7fe fc09 	bl	8003984 <_free_r>
 8005172:	2300      	movs	r3, #0
 8005174:	6363      	str	r3, [r4, #52]	; 0x34
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	2300      	movs	r3, #0
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	89a3      	ldrh	r3, [r4, #12]
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	81a3      	strh	r3, [r4, #12]
 800518e:	6923      	ldr	r3, [r4, #16]
 8005190:	b94b      	cbnz	r3, 80051a6 <__swsetup_r+0x9a>
 8005192:	89a3      	ldrh	r3, [r4, #12]
 8005194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519c:	d003      	beq.n	80051a6 <__swsetup_r+0x9a>
 800519e:	4621      	mov	r1, r4
 80051a0:	4630      	mov	r0, r6
 80051a2:	f000 fd77 	bl	8005c94 <__smakebuf_r>
 80051a6:	89a0      	ldrh	r0, [r4, #12]
 80051a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051ac:	f010 0301 	ands.w	r3, r0, #1
 80051b0:	d00a      	beq.n	80051c8 <__swsetup_r+0xbc>
 80051b2:	2300      	movs	r3, #0
 80051b4:	60a3      	str	r3, [r4, #8]
 80051b6:	6963      	ldr	r3, [r4, #20]
 80051b8:	425b      	negs	r3, r3
 80051ba:	61a3      	str	r3, [r4, #24]
 80051bc:	6923      	ldr	r3, [r4, #16]
 80051be:	b943      	cbnz	r3, 80051d2 <__swsetup_r+0xc6>
 80051c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051c4:	d1ba      	bne.n	800513c <__swsetup_r+0x30>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	0781      	lsls	r1, r0, #30
 80051ca:	bf58      	it	pl
 80051cc:	6963      	ldrpl	r3, [r4, #20]
 80051ce:	60a3      	str	r3, [r4, #8]
 80051d0:	e7f4      	b.n	80051bc <__swsetup_r+0xb0>
 80051d2:	2000      	movs	r0, #0
 80051d4:	e7f7      	b.n	80051c6 <__swsetup_r+0xba>
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c
 80051dc:	08006e64 	.word	0x08006e64
 80051e0:	08006e84 	.word	0x08006e84
 80051e4:	08006e44 	.word	0x08006e44

080051e8 <abort>:
 80051e8:	b508      	push	{r3, lr}
 80051ea:	2006      	movs	r0, #6
 80051ec:	f001 faa4 	bl	8006738 <raise>
 80051f0:	2001      	movs	r0, #1
 80051f2:	f7fc f8d7 	bl	80013a4 <_exit>
	...

080051f8 <__sflush_r>:
 80051f8:	898a      	ldrh	r2, [r1, #12]
 80051fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fe:	4605      	mov	r5, r0
 8005200:	0710      	lsls	r0, r2, #28
 8005202:	460c      	mov	r4, r1
 8005204:	d458      	bmi.n	80052b8 <__sflush_r+0xc0>
 8005206:	684b      	ldr	r3, [r1, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	dc05      	bgt.n	8005218 <__sflush_r+0x20>
 800520c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800520e:	2b00      	cmp	r3, #0
 8005210:	dc02      	bgt.n	8005218 <__sflush_r+0x20>
 8005212:	2000      	movs	r0, #0
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800521a:	2e00      	cmp	r6, #0
 800521c:	d0f9      	beq.n	8005212 <__sflush_r+0x1a>
 800521e:	2300      	movs	r3, #0
 8005220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005224:	682f      	ldr	r7, [r5, #0]
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	d032      	beq.n	8005290 <__sflush_r+0x98>
 800522a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800522c:	89a3      	ldrh	r3, [r4, #12]
 800522e:	075a      	lsls	r2, r3, #29
 8005230:	d505      	bpl.n	800523e <__sflush_r+0x46>
 8005232:	6863      	ldr	r3, [r4, #4]
 8005234:	1ac0      	subs	r0, r0, r3
 8005236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005238:	b10b      	cbz	r3, 800523e <__sflush_r+0x46>
 800523a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800523c:	1ac0      	subs	r0, r0, r3
 800523e:	2300      	movs	r3, #0
 8005240:	4602      	mov	r2, r0
 8005242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005244:	6a21      	ldr	r1, [r4, #32]
 8005246:	4628      	mov	r0, r5
 8005248:	47b0      	blx	r6
 800524a:	1c43      	adds	r3, r0, #1
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	d106      	bne.n	800525e <__sflush_r+0x66>
 8005250:	6829      	ldr	r1, [r5, #0]
 8005252:	291d      	cmp	r1, #29
 8005254:	d82c      	bhi.n	80052b0 <__sflush_r+0xb8>
 8005256:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <__sflush_r+0x108>)
 8005258:	40ca      	lsrs	r2, r1
 800525a:	07d6      	lsls	r6, r2, #31
 800525c:	d528      	bpl.n	80052b0 <__sflush_r+0xb8>
 800525e:	2200      	movs	r2, #0
 8005260:	6062      	str	r2, [r4, #4]
 8005262:	04d9      	lsls	r1, r3, #19
 8005264:	6922      	ldr	r2, [r4, #16]
 8005266:	6022      	str	r2, [r4, #0]
 8005268:	d504      	bpl.n	8005274 <__sflush_r+0x7c>
 800526a:	1c42      	adds	r2, r0, #1
 800526c:	d101      	bne.n	8005272 <__sflush_r+0x7a>
 800526e:	682b      	ldr	r3, [r5, #0]
 8005270:	b903      	cbnz	r3, 8005274 <__sflush_r+0x7c>
 8005272:	6560      	str	r0, [r4, #84]	; 0x54
 8005274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005276:	602f      	str	r7, [r5, #0]
 8005278:	2900      	cmp	r1, #0
 800527a:	d0ca      	beq.n	8005212 <__sflush_r+0x1a>
 800527c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005280:	4299      	cmp	r1, r3
 8005282:	d002      	beq.n	800528a <__sflush_r+0x92>
 8005284:	4628      	mov	r0, r5
 8005286:	f7fe fb7d 	bl	8003984 <_free_r>
 800528a:	2000      	movs	r0, #0
 800528c:	6360      	str	r0, [r4, #52]	; 0x34
 800528e:	e7c1      	b.n	8005214 <__sflush_r+0x1c>
 8005290:	6a21      	ldr	r1, [r4, #32]
 8005292:	2301      	movs	r3, #1
 8005294:	4628      	mov	r0, r5
 8005296:	47b0      	blx	r6
 8005298:	1c41      	adds	r1, r0, #1
 800529a:	d1c7      	bne.n	800522c <__sflush_r+0x34>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0c4      	beq.n	800522c <__sflush_r+0x34>
 80052a2:	2b1d      	cmp	r3, #29
 80052a4:	d001      	beq.n	80052aa <__sflush_r+0xb2>
 80052a6:	2b16      	cmp	r3, #22
 80052a8:	d101      	bne.n	80052ae <__sflush_r+0xb6>
 80052aa:	602f      	str	r7, [r5, #0]
 80052ac:	e7b1      	b.n	8005212 <__sflush_r+0x1a>
 80052ae:	89a3      	ldrh	r3, [r4, #12]
 80052b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b4:	81a3      	strh	r3, [r4, #12]
 80052b6:	e7ad      	b.n	8005214 <__sflush_r+0x1c>
 80052b8:	690f      	ldr	r7, [r1, #16]
 80052ba:	2f00      	cmp	r7, #0
 80052bc:	d0a9      	beq.n	8005212 <__sflush_r+0x1a>
 80052be:	0793      	lsls	r3, r2, #30
 80052c0:	680e      	ldr	r6, [r1, #0]
 80052c2:	bf08      	it	eq
 80052c4:	694b      	ldreq	r3, [r1, #20]
 80052c6:	600f      	str	r7, [r1, #0]
 80052c8:	bf18      	it	ne
 80052ca:	2300      	movne	r3, #0
 80052cc:	eba6 0807 	sub.w	r8, r6, r7
 80052d0:	608b      	str	r3, [r1, #8]
 80052d2:	f1b8 0f00 	cmp.w	r8, #0
 80052d6:	dd9c      	ble.n	8005212 <__sflush_r+0x1a>
 80052d8:	6a21      	ldr	r1, [r4, #32]
 80052da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052dc:	4643      	mov	r3, r8
 80052de:	463a      	mov	r2, r7
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b0      	blx	r6
 80052e4:	2800      	cmp	r0, #0
 80052e6:	dc06      	bgt.n	80052f6 <__sflush_r+0xfe>
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ee:	81a3      	strh	r3, [r4, #12]
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	e78e      	b.n	8005214 <__sflush_r+0x1c>
 80052f6:	4407      	add	r7, r0
 80052f8:	eba8 0800 	sub.w	r8, r8, r0
 80052fc:	e7e9      	b.n	80052d2 <__sflush_r+0xda>
 80052fe:	bf00      	nop
 8005300:	20400001 	.word	0x20400001

08005304 <_fflush_r>:
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	690b      	ldr	r3, [r1, #16]
 8005308:	4605      	mov	r5, r0
 800530a:	460c      	mov	r4, r1
 800530c:	b913      	cbnz	r3, 8005314 <_fflush_r+0x10>
 800530e:	2500      	movs	r5, #0
 8005310:	4628      	mov	r0, r5
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	b118      	cbz	r0, 800531e <_fflush_r+0x1a>
 8005316:	6983      	ldr	r3, [r0, #24]
 8005318:	b90b      	cbnz	r3, 800531e <_fflush_r+0x1a>
 800531a:	f000 f887 	bl	800542c <__sinit>
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <_fflush_r+0x6c>)
 8005320:	429c      	cmp	r4, r3
 8005322:	d11b      	bne.n	800535c <_fflush_r+0x58>
 8005324:	686c      	ldr	r4, [r5, #4]
 8005326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0ef      	beq.n	800530e <_fflush_r+0xa>
 800532e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005330:	07d0      	lsls	r0, r2, #31
 8005332:	d404      	bmi.n	800533e <_fflush_r+0x3a>
 8005334:	0599      	lsls	r1, r3, #22
 8005336:	d402      	bmi.n	800533e <_fflush_r+0x3a>
 8005338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800533a:	f000 fc84 	bl	8005c46 <__retarget_lock_acquire_recursive>
 800533e:	4628      	mov	r0, r5
 8005340:	4621      	mov	r1, r4
 8005342:	f7ff ff59 	bl	80051f8 <__sflush_r>
 8005346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005348:	07da      	lsls	r2, r3, #31
 800534a:	4605      	mov	r5, r0
 800534c:	d4e0      	bmi.n	8005310 <_fflush_r+0xc>
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	059b      	lsls	r3, r3, #22
 8005352:	d4dd      	bmi.n	8005310 <_fflush_r+0xc>
 8005354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005356:	f000 fc77 	bl	8005c48 <__retarget_lock_release_recursive>
 800535a:	e7d9      	b.n	8005310 <_fflush_r+0xc>
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <_fflush_r+0x70>)
 800535e:	429c      	cmp	r4, r3
 8005360:	d101      	bne.n	8005366 <_fflush_r+0x62>
 8005362:	68ac      	ldr	r4, [r5, #8]
 8005364:	e7df      	b.n	8005326 <_fflush_r+0x22>
 8005366:	4b04      	ldr	r3, [pc, #16]	; (8005378 <_fflush_r+0x74>)
 8005368:	429c      	cmp	r4, r3
 800536a:	bf08      	it	eq
 800536c:	68ec      	ldreq	r4, [r5, #12]
 800536e:	e7da      	b.n	8005326 <_fflush_r+0x22>
 8005370:	08006e64 	.word	0x08006e64
 8005374:	08006e84 	.word	0x08006e84
 8005378:	08006e44 	.word	0x08006e44

0800537c <std>:
 800537c:	2300      	movs	r3, #0
 800537e:	b510      	push	{r4, lr}
 8005380:	4604      	mov	r4, r0
 8005382:	e9c0 3300 	strd	r3, r3, [r0]
 8005386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800538a:	6083      	str	r3, [r0, #8]
 800538c:	8181      	strh	r1, [r0, #12]
 800538e:	6643      	str	r3, [r0, #100]	; 0x64
 8005390:	81c2      	strh	r2, [r0, #14]
 8005392:	6183      	str	r3, [r0, #24]
 8005394:	4619      	mov	r1, r3
 8005396:	2208      	movs	r2, #8
 8005398:	305c      	adds	r0, #92	; 0x5c
 800539a:	f7fe fad5 	bl	8003948 <memset>
 800539e:	4b05      	ldr	r3, [pc, #20]	; (80053b4 <std+0x38>)
 80053a0:	6263      	str	r3, [r4, #36]	; 0x24
 80053a2:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <std+0x3c>)
 80053a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <std+0x40>)
 80053a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <std+0x44>)
 80053ac:	6224      	str	r4, [r4, #32]
 80053ae:	6323      	str	r3, [r4, #48]	; 0x30
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	08006771 	.word	0x08006771
 80053b8:	08006793 	.word	0x08006793
 80053bc:	080067cb 	.word	0x080067cb
 80053c0:	080067ef 	.word	0x080067ef

080053c4 <_cleanup_r>:
 80053c4:	4901      	ldr	r1, [pc, #4]	; (80053cc <_cleanup_r+0x8>)
 80053c6:	f000 b8af 	b.w	8005528 <_fwalk_reent>
 80053ca:	bf00      	nop
 80053cc:	08005305 	.word	0x08005305

080053d0 <__sfmoreglue>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	2268      	movs	r2, #104	; 0x68
 80053d4:	1e4d      	subs	r5, r1, #1
 80053d6:	4355      	muls	r5, r2
 80053d8:	460e      	mov	r6, r1
 80053da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80053de:	f7fe fb3d 	bl	8003a5c <_malloc_r>
 80053e2:	4604      	mov	r4, r0
 80053e4:	b140      	cbz	r0, 80053f8 <__sfmoreglue+0x28>
 80053e6:	2100      	movs	r1, #0
 80053e8:	e9c0 1600 	strd	r1, r6, [r0]
 80053ec:	300c      	adds	r0, #12
 80053ee:	60a0      	str	r0, [r4, #8]
 80053f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80053f4:	f7fe faa8 	bl	8003948 <memset>
 80053f8:	4620      	mov	r0, r4
 80053fa:	bd70      	pop	{r4, r5, r6, pc}

080053fc <__sfp_lock_acquire>:
 80053fc:	4801      	ldr	r0, [pc, #4]	; (8005404 <__sfp_lock_acquire+0x8>)
 80053fe:	f000 bc22 	b.w	8005c46 <__retarget_lock_acquire_recursive>
 8005402:	bf00      	nop
 8005404:	20000581 	.word	0x20000581

08005408 <__sfp_lock_release>:
 8005408:	4801      	ldr	r0, [pc, #4]	; (8005410 <__sfp_lock_release+0x8>)
 800540a:	f000 bc1d 	b.w	8005c48 <__retarget_lock_release_recursive>
 800540e:	bf00      	nop
 8005410:	20000581 	.word	0x20000581

08005414 <__sinit_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	; (800541c <__sinit_lock_acquire+0x8>)
 8005416:	f000 bc16 	b.w	8005c46 <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	20000582 	.word	0x20000582

08005420 <__sinit_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	; (8005428 <__sinit_lock_release+0x8>)
 8005422:	f000 bc11 	b.w	8005c48 <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	20000582 	.word	0x20000582

0800542c <__sinit>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	f7ff fff0 	bl	8005414 <__sinit_lock_acquire>
 8005434:	69a3      	ldr	r3, [r4, #24]
 8005436:	b11b      	cbz	r3, 8005440 <__sinit+0x14>
 8005438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800543c:	f7ff bff0 	b.w	8005420 <__sinit_lock_release>
 8005440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005444:	6523      	str	r3, [r4, #80]	; 0x50
 8005446:	4b13      	ldr	r3, [pc, #76]	; (8005494 <__sinit+0x68>)
 8005448:	4a13      	ldr	r2, [pc, #76]	; (8005498 <__sinit+0x6c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	62a2      	str	r2, [r4, #40]	; 0x28
 800544e:	42a3      	cmp	r3, r4
 8005450:	bf04      	itt	eq
 8005452:	2301      	moveq	r3, #1
 8005454:	61a3      	streq	r3, [r4, #24]
 8005456:	4620      	mov	r0, r4
 8005458:	f000 f820 	bl	800549c <__sfp>
 800545c:	6060      	str	r0, [r4, #4]
 800545e:	4620      	mov	r0, r4
 8005460:	f000 f81c 	bl	800549c <__sfp>
 8005464:	60a0      	str	r0, [r4, #8]
 8005466:	4620      	mov	r0, r4
 8005468:	f000 f818 	bl	800549c <__sfp>
 800546c:	2200      	movs	r2, #0
 800546e:	60e0      	str	r0, [r4, #12]
 8005470:	2104      	movs	r1, #4
 8005472:	6860      	ldr	r0, [r4, #4]
 8005474:	f7ff ff82 	bl	800537c <std>
 8005478:	68a0      	ldr	r0, [r4, #8]
 800547a:	2201      	movs	r2, #1
 800547c:	2109      	movs	r1, #9
 800547e:	f7ff ff7d 	bl	800537c <std>
 8005482:	68e0      	ldr	r0, [r4, #12]
 8005484:	2202      	movs	r2, #2
 8005486:	2112      	movs	r1, #18
 8005488:	f7ff ff78 	bl	800537c <std>
 800548c:	2301      	movs	r3, #1
 800548e:	61a3      	str	r3, [r4, #24]
 8005490:	e7d2      	b.n	8005438 <__sinit+0xc>
 8005492:	bf00      	nop
 8005494:	08006cac 	.word	0x08006cac
 8005498:	080053c5 	.word	0x080053c5

0800549c <__sfp>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	4607      	mov	r7, r0
 80054a0:	f7ff ffac 	bl	80053fc <__sfp_lock_acquire>
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <__sfp+0x84>)
 80054a6:	681e      	ldr	r6, [r3, #0]
 80054a8:	69b3      	ldr	r3, [r6, #24]
 80054aa:	b913      	cbnz	r3, 80054b2 <__sfp+0x16>
 80054ac:	4630      	mov	r0, r6
 80054ae:	f7ff ffbd 	bl	800542c <__sinit>
 80054b2:	3648      	adds	r6, #72	; 0x48
 80054b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	d503      	bpl.n	80054c4 <__sfp+0x28>
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	b30b      	cbz	r3, 8005504 <__sfp+0x68>
 80054c0:	6836      	ldr	r6, [r6, #0]
 80054c2:	e7f7      	b.n	80054b4 <__sfp+0x18>
 80054c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054c8:	b9d5      	cbnz	r5, 8005500 <__sfp+0x64>
 80054ca:	4b16      	ldr	r3, [pc, #88]	; (8005524 <__sfp+0x88>)
 80054cc:	60e3      	str	r3, [r4, #12]
 80054ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80054d2:	6665      	str	r5, [r4, #100]	; 0x64
 80054d4:	f000 fbb6 	bl	8005c44 <__retarget_lock_init_recursive>
 80054d8:	f7ff ff96 	bl	8005408 <__sfp_lock_release>
 80054dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80054e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80054e4:	6025      	str	r5, [r4, #0]
 80054e6:	61a5      	str	r5, [r4, #24]
 80054e8:	2208      	movs	r2, #8
 80054ea:	4629      	mov	r1, r5
 80054ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80054f0:	f7fe fa2a 	bl	8003948 <memset>
 80054f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80054f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80054fc:	4620      	mov	r0, r4
 80054fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005500:	3468      	adds	r4, #104	; 0x68
 8005502:	e7d9      	b.n	80054b8 <__sfp+0x1c>
 8005504:	2104      	movs	r1, #4
 8005506:	4638      	mov	r0, r7
 8005508:	f7ff ff62 	bl	80053d0 <__sfmoreglue>
 800550c:	4604      	mov	r4, r0
 800550e:	6030      	str	r0, [r6, #0]
 8005510:	2800      	cmp	r0, #0
 8005512:	d1d5      	bne.n	80054c0 <__sfp+0x24>
 8005514:	f7ff ff78 	bl	8005408 <__sfp_lock_release>
 8005518:	230c      	movs	r3, #12
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	e7ee      	b.n	80054fc <__sfp+0x60>
 800551e:	bf00      	nop
 8005520:	08006cac 	.word	0x08006cac
 8005524:	ffff0001 	.word	0xffff0001

08005528 <_fwalk_reent>:
 8005528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800552c:	4606      	mov	r6, r0
 800552e:	4688      	mov	r8, r1
 8005530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005534:	2700      	movs	r7, #0
 8005536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800553a:	f1b9 0901 	subs.w	r9, r9, #1
 800553e:	d505      	bpl.n	800554c <_fwalk_reent+0x24>
 8005540:	6824      	ldr	r4, [r4, #0]
 8005542:	2c00      	cmp	r4, #0
 8005544:	d1f7      	bne.n	8005536 <_fwalk_reent+0xe>
 8005546:	4638      	mov	r0, r7
 8005548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800554c:	89ab      	ldrh	r3, [r5, #12]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d907      	bls.n	8005562 <_fwalk_reent+0x3a>
 8005552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005556:	3301      	adds	r3, #1
 8005558:	d003      	beq.n	8005562 <_fwalk_reent+0x3a>
 800555a:	4629      	mov	r1, r5
 800555c:	4630      	mov	r0, r6
 800555e:	47c0      	blx	r8
 8005560:	4307      	orrs	r7, r0
 8005562:	3568      	adds	r5, #104	; 0x68
 8005564:	e7e9      	b.n	800553a <_fwalk_reent+0x12>

08005566 <rshift>:
 8005566:	6903      	ldr	r3, [r0, #16]
 8005568:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800556c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005570:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005574:	f100 0414 	add.w	r4, r0, #20
 8005578:	dd45      	ble.n	8005606 <rshift+0xa0>
 800557a:	f011 011f 	ands.w	r1, r1, #31
 800557e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005582:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005586:	d10c      	bne.n	80055a2 <rshift+0x3c>
 8005588:	f100 0710 	add.w	r7, r0, #16
 800558c:	4629      	mov	r1, r5
 800558e:	42b1      	cmp	r1, r6
 8005590:	d334      	bcc.n	80055fc <rshift+0x96>
 8005592:	1a9b      	subs	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	1eea      	subs	r2, r5, #3
 8005598:	4296      	cmp	r6, r2
 800559a:	bf38      	it	cc
 800559c:	2300      	movcc	r3, #0
 800559e:	4423      	add	r3, r4
 80055a0:	e015      	b.n	80055ce <rshift+0x68>
 80055a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80055a6:	f1c1 0820 	rsb	r8, r1, #32
 80055aa:	40cf      	lsrs	r7, r1
 80055ac:	f105 0e04 	add.w	lr, r5, #4
 80055b0:	46a1      	mov	r9, r4
 80055b2:	4576      	cmp	r6, lr
 80055b4:	46f4      	mov	ip, lr
 80055b6:	d815      	bhi.n	80055e4 <rshift+0x7e>
 80055b8:	1a9a      	subs	r2, r3, r2
 80055ba:	0092      	lsls	r2, r2, #2
 80055bc:	3a04      	subs	r2, #4
 80055be:	3501      	adds	r5, #1
 80055c0:	42ae      	cmp	r6, r5
 80055c2:	bf38      	it	cc
 80055c4:	2200      	movcc	r2, #0
 80055c6:	18a3      	adds	r3, r4, r2
 80055c8:	50a7      	str	r7, [r4, r2]
 80055ca:	b107      	cbz	r7, 80055ce <rshift+0x68>
 80055cc:	3304      	adds	r3, #4
 80055ce:	1b1a      	subs	r2, r3, r4
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80055d6:	bf08      	it	eq
 80055d8:	2300      	moveq	r3, #0
 80055da:	6102      	str	r2, [r0, #16]
 80055dc:	bf08      	it	eq
 80055de:	6143      	streq	r3, [r0, #20]
 80055e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055e4:	f8dc c000 	ldr.w	ip, [ip]
 80055e8:	fa0c fc08 	lsl.w	ip, ip, r8
 80055ec:	ea4c 0707 	orr.w	r7, ip, r7
 80055f0:	f849 7b04 	str.w	r7, [r9], #4
 80055f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80055f8:	40cf      	lsrs	r7, r1
 80055fa:	e7da      	b.n	80055b2 <rshift+0x4c>
 80055fc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005600:	f847 cf04 	str.w	ip, [r7, #4]!
 8005604:	e7c3      	b.n	800558e <rshift+0x28>
 8005606:	4623      	mov	r3, r4
 8005608:	e7e1      	b.n	80055ce <rshift+0x68>

0800560a <__hexdig_fun>:
 800560a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800560e:	2b09      	cmp	r3, #9
 8005610:	d802      	bhi.n	8005618 <__hexdig_fun+0xe>
 8005612:	3820      	subs	r0, #32
 8005614:	b2c0      	uxtb	r0, r0
 8005616:	4770      	bx	lr
 8005618:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800561c:	2b05      	cmp	r3, #5
 800561e:	d801      	bhi.n	8005624 <__hexdig_fun+0x1a>
 8005620:	3847      	subs	r0, #71	; 0x47
 8005622:	e7f7      	b.n	8005614 <__hexdig_fun+0xa>
 8005624:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005628:	2b05      	cmp	r3, #5
 800562a:	d801      	bhi.n	8005630 <__hexdig_fun+0x26>
 800562c:	3827      	subs	r0, #39	; 0x27
 800562e:	e7f1      	b.n	8005614 <__hexdig_fun+0xa>
 8005630:	2000      	movs	r0, #0
 8005632:	4770      	bx	lr

08005634 <__gethex>:
 8005634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005638:	ed2d 8b02 	vpush	{d8}
 800563c:	b089      	sub	sp, #36	; 0x24
 800563e:	ee08 0a10 	vmov	s16, r0
 8005642:	9304      	str	r3, [sp, #16]
 8005644:	4bb4      	ldr	r3, [pc, #720]	; (8005918 <__gethex+0x2e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	4618      	mov	r0, r3
 800564c:	468b      	mov	fp, r1
 800564e:	4690      	mov	r8, r2
 8005650:	f7fa fdd0 	bl	80001f4 <strlen>
 8005654:	9b01      	ldr	r3, [sp, #4]
 8005656:	f8db 2000 	ldr.w	r2, [fp]
 800565a:	4403      	add	r3, r0
 800565c:	4682      	mov	sl, r0
 800565e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005662:	9305      	str	r3, [sp, #20]
 8005664:	1c93      	adds	r3, r2, #2
 8005666:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800566a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800566e:	32fe      	adds	r2, #254	; 0xfe
 8005670:	18d1      	adds	r1, r2, r3
 8005672:	461f      	mov	r7, r3
 8005674:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005678:	9100      	str	r1, [sp, #0]
 800567a:	2830      	cmp	r0, #48	; 0x30
 800567c:	d0f8      	beq.n	8005670 <__gethex+0x3c>
 800567e:	f7ff ffc4 	bl	800560a <__hexdig_fun>
 8005682:	4604      	mov	r4, r0
 8005684:	2800      	cmp	r0, #0
 8005686:	d13a      	bne.n	80056fe <__gethex+0xca>
 8005688:	9901      	ldr	r1, [sp, #4]
 800568a:	4652      	mov	r2, sl
 800568c:	4638      	mov	r0, r7
 800568e:	f7fe fd64 	bl	800415a <strncmp>
 8005692:	4605      	mov	r5, r0
 8005694:	2800      	cmp	r0, #0
 8005696:	d168      	bne.n	800576a <__gethex+0x136>
 8005698:	f817 000a 	ldrb.w	r0, [r7, sl]
 800569c:	eb07 060a 	add.w	r6, r7, sl
 80056a0:	f7ff ffb3 	bl	800560a <__hexdig_fun>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d062      	beq.n	800576e <__gethex+0x13a>
 80056a8:	4633      	mov	r3, r6
 80056aa:	7818      	ldrb	r0, [r3, #0]
 80056ac:	2830      	cmp	r0, #48	; 0x30
 80056ae:	461f      	mov	r7, r3
 80056b0:	f103 0301 	add.w	r3, r3, #1
 80056b4:	d0f9      	beq.n	80056aa <__gethex+0x76>
 80056b6:	f7ff ffa8 	bl	800560a <__hexdig_fun>
 80056ba:	2301      	movs	r3, #1
 80056bc:	fab0 f480 	clz	r4, r0
 80056c0:	0964      	lsrs	r4, r4, #5
 80056c2:	4635      	mov	r5, r6
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	463a      	mov	r2, r7
 80056c8:	4616      	mov	r6, r2
 80056ca:	3201      	adds	r2, #1
 80056cc:	7830      	ldrb	r0, [r6, #0]
 80056ce:	f7ff ff9c 	bl	800560a <__hexdig_fun>
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d1f8      	bne.n	80056c8 <__gethex+0x94>
 80056d6:	9901      	ldr	r1, [sp, #4]
 80056d8:	4652      	mov	r2, sl
 80056da:	4630      	mov	r0, r6
 80056dc:	f7fe fd3d 	bl	800415a <strncmp>
 80056e0:	b980      	cbnz	r0, 8005704 <__gethex+0xd0>
 80056e2:	b94d      	cbnz	r5, 80056f8 <__gethex+0xc4>
 80056e4:	eb06 050a 	add.w	r5, r6, sl
 80056e8:	462a      	mov	r2, r5
 80056ea:	4616      	mov	r6, r2
 80056ec:	3201      	adds	r2, #1
 80056ee:	7830      	ldrb	r0, [r6, #0]
 80056f0:	f7ff ff8b 	bl	800560a <__hexdig_fun>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d1f8      	bne.n	80056ea <__gethex+0xb6>
 80056f8:	1bad      	subs	r5, r5, r6
 80056fa:	00ad      	lsls	r5, r5, #2
 80056fc:	e004      	b.n	8005708 <__gethex+0xd4>
 80056fe:	2400      	movs	r4, #0
 8005700:	4625      	mov	r5, r4
 8005702:	e7e0      	b.n	80056c6 <__gethex+0x92>
 8005704:	2d00      	cmp	r5, #0
 8005706:	d1f7      	bne.n	80056f8 <__gethex+0xc4>
 8005708:	7833      	ldrb	r3, [r6, #0]
 800570a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800570e:	2b50      	cmp	r3, #80	; 0x50
 8005710:	d13b      	bne.n	800578a <__gethex+0x156>
 8005712:	7873      	ldrb	r3, [r6, #1]
 8005714:	2b2b      	cmp	r3, #43	; 0x2b
 8005716:	d02c      	beq.n	8005772 <__gethex+0x13e>
 8005718:	2b2d      	cmp	r3, #45	; 0x2d
 800571a:	d02e      	beq.n	800577a <__gethex+0x146>
 800571c:	1c71      	adds	r1, r6, #1
 800571e:	f04f 0900 	mov.w	r9, #0
 8005722:	7808      	ldrb	r0, [r1, #0]
 8005724:	f7ff ff71 	bl	800560a <__hexdig_fun>
 8005728:	1e43      	subs	r3, r0, #1
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b18      	cmp	r3, #24
 800572e:	d82c      	bhi.n	800578a <__gethex+0x156>
 8005730:	f1a0 0210 	sub.w	r2, r0, #16
 8005734:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005738:	f7ff ff67 	bl	800560a <__hexdig_fun>
 800573c:	1e43      	subs	r3, r0, #1
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b18      	cmp	r3, #24
 8005742:	d91d      	bls.n	8005780 <__gethex+0x14c>
 8005744:	f1b9 0f00 	cmp.w	r9, #0
 8005748:	d000      	beq.n	800574c <__gethex+0x118>
 800574a:	4252      	negs	r2, r2
 800574c:	4415      	add	r5, r2
 800574e:	f8cb 1000 	str.w	r1, [fp]
 8005752:	b1e4      	cbz	r4, 800578e <__gethex+0x15a>
 8005754:	9b00      	ldr	r3, [sp, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bf14      	ite	ne
 800575a:	2700      	movne	r7, #0
 800575c:	2706      	moveq	r7, #6
 800575e:	4638      	mov	r0, r7
 8005760:	b009      	add	sp, #36	; 0x24
 8005762:	ecbd 8b02 	vpop	{d8}
 8005766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576a:	463e      	mov	r6, r7
 800576c:	4625      	mov	r5, r4
 800576e:	2401      	movs	r4, #1
 8005770:	e7ca      	b.n	8005708 <__gethex+0xd4>
 8005772:	f04f 0900 	mov.w	r9, #0
 8005776:	1cb1      	adds	r1, r6, #2
 8005778:	e7d3      	b.n	8005722 <__gethex+0xee>
 800577a:	f04f 0901 	mov.w	r9, #1
 800577e:	e7fa      	b.n	8005776 <__gethex+0x142>
 8005780:	230a      	movs	r3, #10
 8005782:	fb03 0202 	mla	r2, r3, r2, r0
 8005786:	3a10      	subs	r2, #16
 8005788:	e7d4      	b.n	8005734 <__gethex+0x100>
 800578a:	4631      	mov	r1, r6
 800578c:	e7df      	b.n	800574e <__gethex+0x11a>
 800578e:	1bf3      	subs	r3, r6, r7
 8005790:	3b01      	subs	r3, #1
 8005792:	4621      	mov	r1, r4
 8005794:	2b07      	cmp	r3, #7
 8005796:	dc0b      	bgt.n	80057b0 <__gethex+0x17c>
 8005798:	ee18 0a10 	vmov	r0, s16
 800579c:	f000 fad8 	bl	8005d50 <_Balloc>
 80057a0:	4604      	mov	r4, r0
 80057a2:	b940      	cbnz	r0, 80057b6 <__gethex+0x182>
 80057a4:	4b5d      	ldr	r3, [pc, #372]	; (800591c <__gethex+0x2e8>)
 80057a6:	4602      	mov	r2, r0
 80057a8:	21de      	movs	r1, #222	; 0xde
 80057aa:	485d      	ldr	r0, [pc, #372]	; (8005920 <__gethex+0x2ec>)
 80057ac:	f7fe f83c 	bl	8003828 <__assert_func>
 80057b0:	3101      	adds	r1, #1
 80057b2:	105b      	asrs	r3, r3, #1
 80057b4:	e7ee      	b.n	8005794 <__gethex+0x160>
 80057b6:	f100 0914 	add.w	r9, r0, #20
 80057ba:	f04f 0b00 	mov.w	fp, #0
 80057be:	f1ca 0301 	rsb	r3, sl, #1
 80057c2:	f8cd 9008 	str.w	r9, [sp, #8]
 80057c6:	f8cd b000 	str.w	fp, [sp]
 80057ca:	9306      	str	r3, [sp, #24]
 80057cc:	42b7      	cmp	r7, r6
 80057ce:	d340      	bcc.n	8005852 <__gethex+0x21e>
 80057d0:	9802      	ldr	r0, [sp, #8]
 80057d2:	9b00      	ldr	r3, [sp, #0]
 80057d4:	f840 3b04 	str.w	r3, [r0], #4
 80057d8:	eba0 0009 	sub.w	r0, r0, r9
 80057dc:	1080      	asrs	r0, r0, #2
 80057de:	0146      	lsls	r6, r0, #5
 80057e0:	6120      	str	r0, [r4, #16]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fba6 	bl	8005f34 <__hi0bits>
 80057e8:	1a30      	subs	r0, r6, r0
 80057ea:	f8d8 6000 	ldr.w	r6, [r8]
 80057ee:	42b0      	cmp	r0, r6
 80057f0:	dd63      	ble.n	80058ba <__gethex+0x286>
 80057f2:	1b87      	subs	r7, r0, r6
 80057f4:	4639      	mov	r1, r7
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 ff4a 	bl	8006690 <__any_on>
 80057fc:	4682      	mov	sl, r0
 80057fe:	b1a8      	cbz	r0, 800582c <__gethex+0x1f8>
 8005800:	1e7b      	subs	r3, r7, #1
 8005802:	1159      	asrs	r1, r3, #5
 8005804:	f003 021f 	and.w	r2, r3, #31
 8005808:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800580c:	f04f 0a01 	mov.w	sl, #1
 8005810:	fa0a f202 	lsl.w	r2, sl, r2
 8005814:	420a      	tst	r2, r1
 8005816:	d009      	beq.n	800582c <__gethex+0x1f8>
 8005818:	4553      	cmp	r3, sl
 800581a:	dd05      	ble.n	8005828 <__gethex+0x1f4>
 800581c:	1eb9      	subs	r1, r7, #2
 800581e:	4620      	mov	r0, r4
 8005820:	f000 ff36 	bl	8006690 <__any_on>
 8005824:	2800      	cmp	r0, #0
 8005826:	d145      	bne.n	80058b4 <__gethex+0x280>
 8005828:	f04f 0a02 	mov.w	sl, #2
 800582c:	4639      	mov	r1, r7
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff fe99 	bl	8005566 <rshift>
 8005834:	443d      	add	r5, r7
 8005836:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800583a:	42ab      	cmp	r3, r5
 800583c:	da4c      	bge.n	80058d8 <__gethex+0x2a4>
 800583e:	ee18 0a10 	vmov	r0, s16
 8005842:	4621      	mov	r1, r4
 8005844:	f000 fac4 	bl	8005dd0 <_Bfree>
 8005848:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800584a:	2300      	movs	r3, #0
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	27a3      	movs	r7, #163	; 0xa3
 8005850:	e785      	b.n	800575e <__gethex+0x12a>
 8005852:	1e73      	subs	r3, r6, #1
 8005854:	9a05      	ldr	r2, [sp, #20]
 8005856:	9303      	str	r3, [sp, #12]
 8005858:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800585c:	4293      	cmp	r3, r2
 800585e:	d019      	beq.n	8005894 <__gethex+0x260>
 8005860:	f1bb 0f20 	cmp.w	fp, #32
 8005864:	d107      	bne.n	8005876 <__gethex+0x242>
 8005866:	9b02      	ldr	r3, [sp, #8]
 8005868:	9a00      	ldr	r2, [sp, #0]
 800586a:	f843 2b04 	str.w	r2, [r3], #4
 800586e:	9302      	str	r3, [sp, #8]
 8005870:	2300      	movs	r3, #0
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	469b      	mov	fp, r3
 8005876:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800587a:	f7ff fec6 	bl	800560a <__hexdig_fun>
 800587e:	9b00      	ldr	r3, [sp, #0]
 8005880:	f000 000f 	and.w	r0, r0, #15
 8005884:	fa00 f00b 	lsl.w	r0, r0, fp
 8005888:	4303      	orrs	r3, r0
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	f10b 0b04 	add.w	fp, fp, #4
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	e00d      	b.n	80058b0 <__gethex+0x27c>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	9a06      	ldr	r2, [sp, #24]
 8005898:	4413      	add	r3, r2
 800589a:	42bb      	cmp	r3, r7
 800589c:	d3e0      	bcc.n	8005860 <__gethex+0x22c>
 800589e:	4618      	mov	r0, r3
 80058a0:	9901      	ldr	r1, [sp, #4]
 80058a2:	9307      	str	r3, [sp, #28]
 80058a4:	4652      	mov	r2, sl
 80058a6:	f7fe fc58 	bl	800415a <strncmp>
 80058aa:	9b07      	ldr	r3, [sp, #28]
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d1d7      	bne.n	8005860 <__gethex+0x22c>
 80058b0:	461e      	mov	r6, r3
 80058b2:	e78b      	b.n	80057cc <__gethex+0x198>
 80058b4:	f04f 0a03 	mov.w	sl, #3
 80058b8:	e7b8      	b.n	800582c <__gethex+0x1f8>
 80058ba:	da0a      	bge.n	80058d2 <__gethex+0x29e>
 80058bc:	1a37      	subs	r7, r6, r0
 80058be:	4621      	mov	r1, r4
 80058c0:	ee18 0a10 	vmov	r0, s16
 80058c4:	463a      	mov	r2, r7
 80058c6:	f000 fc9f 	bl	8006208 <__lshift>
 80058ca:	1bed      	subs	r5, r5, r7
 80058cc:	4604      	mov	r4, r0
 80058ce:	f100 0914 	add.w	r9, r0, #20
 80058d2:	f04f 0a00 	mov.w	sl, #0
 80058d6:	e7ae      	b.n	8005836 <__gethex+0x202>
 80058d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80058dc:	42a8      	cmp	r0, r5
 80058de:	dd72      	ble.n	80059c6 <__gethex+0x392>
 80058e0:	1b45      	subs	r5, r0, r5
 80058e2:	42ae      	cmp	r6, r5
 80058e4:	dc36      	bgt.n	8005954 <__gethex+0x320>
 80058e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d02a      	beq.n	8005944 <__gethex+0x310>
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d02c      	beq.n	800594c <__gethex+0x318>
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d11c      	bne.n	8005930 <__gethex+0x2fc>
 80058f6:	42ae      	cmp	r6, r5
 80058f8:	d11a      	bne.n	8005930 <__gethex+0x2fc>
 80058fa:	2e01      	cmp	r6, #1
 80058fc:	d112      	bne.n	8005924 <__gethex+0x2f0>
 80058fe:	9a04      	ldr	r2, [sp, #16]
 8005900:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	2301      	movs	r3, #1
 8005908:	6123      	str	r3, [r4, #16]
 800590a:	f8c9 3000 	str.w	r3, [r9]
 800590e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005910:	2762      	movs	r7, #98	; 0x62
 8005912:	601c      	str	r4, [r3, #0]
 8005914:	e723      	b.n	800575e <__gethex+0x12a>
 8005916:	bf00      	nop
 8005918:	08006f1c 	.word	0x08006f1c
 800591c:	08006ea4 	.word	0x08006ea4
 8005920:	08006eb5 	.word	0x08006eb5
 8005924:	1e71      	subs	r1, r6, #1
 8005926:	4620      	mov	r0, r4
 8005928:	f000 feb2 	bl	8006690 <__any_on>
 800592c:	2800      	cmp	r0, #0
 800592e:	d1e6      	bne.n	80058fe <__gethex+0x2ca>
 8005930:	ee18 0a10 	vmov	r0, s16
 8005934:	4621      	mov	r1, r4
 8005936:	f000 fa4b 	bl	8005dd0 <_Bfree>
 800593a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800593c:	2300      	movs	r3, #0
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	2750      	movs	r7, #80	; 0x50
 8005942:	e70c      	b.n	800575e <__gethex+0x12a>
 8005944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1f2      	bne.n	8005930 <__gethex+0x2fc>
 800594a:	e7d8      	b.n	80058fe <__gethex+0x2ca>
 800594c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1d5      	bne.n	80058fe <__gethex+0x2ca>
 8005952:	e7ed      	b.n	8005930 <__gethex+0x2fc>
 8005954:	1e6f      	subs	r7, r5, #1
 8005956:	f1ba 0f00 	cmp.w	sl, #0
 800595a:	d131      	bne.n	80059c0 <__gethex+0x38c>
 800595c:	b127      	cbz	r7, 8005968 <__gethex+0x334>
 800595e:	4639      	mov	r1, r7
 8005960:	4620      	mov	r0, r4
 8005962:	f000 fe95 	bl	8006690 <__any_on>
 8005966:	4682      	mov	sl, r0
 8005968:	117b      	asrs	r3, r7, #5
 800596a:	2101      	movs	r1, #1
 800596c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005970:	f007 071f 	and.w	r7, r7, #31
 8005974:	fa01 f707 	lsl.w	r7, r1, r7
 8005978:	421f      	tst	r7, r3
 800597a:	4629      	mov	r1, r5
 800597c:	4620      	mov	r0, r4
 800597e:	bf18      	it	ne
 8005980:	f04a 0a02 	orrne.w	sl, sl, #2
 8005984:	1b76      	subs	r6, r6, r5
 8005986:	f7ff fdee 	bl	8005566 <rshift>
 800598a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800598e:	2702      	movs	r7, #2
 8005990:	f1ba 0f00 	cmp.w	sl, #0
 8005994:	d048      	beq.n	8005a28 <__gethex+0x3f4>
 8005996:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d015      	beq.n	80059ca <__gethex+0x396>
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d017      	beq.n	80059d2 <__gethex+0x39e>
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d109      	bne.n	80059ba <__gethex+0x386>
 80059a6:	f01a 0f02 	tst.w	sl, #2
 80059aa:	d006      	beq.n	80059ba <__gethex+0x386>
 80059ac:	f8d9 0000 	ldr.w	r0, [r9]
 80059b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80059b4:	f01a 0f01 	tst.w	sl, #1
 80059b8:	d10e      	bne.n	80059d8 <__gethex+0x3a4>
 80059ba:	f047 0710 	orr.w	r7, r7, #16
 80059be:	e033      	b.n	8005a28 <__gethex+0x3f4>
 80059c0:	f04f 0a01 	mov.w	sl, #1
 80059c4:	e7d0      	b.n	8005968 <__gethex+0x334>
 80059c6:	2701      	movs	r7, #1
 80059c8:	e7e2      	b.n	8005990 <__gethex+0x35c>
 80059ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059cc:	f1c3 0301 	rsb	r3, r3, #1
 80059d0:	9315      	str	r3, [sp, #84]	; 0x54
 80059d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <__gethex+0x386>
 80059d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80059dc:	f104 0314 	add.w	r3, r4, #20
 80059e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80059e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80059e8:	f04f 0c00 	mov.w	ip, #0
 80059ec:	4618      	mov	r0, r3
 80059ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 80059f6:	d01c      	beq.n	8005a32 <__gethex+0x3fe>
 80059f8:	3201      	adds	r2, #1
 80059fa:	6002      	str	r2, [r0, #0]
 80059fc:	2f02      	cmp	r7, #2
 80059fe:	f104 0314 	add.w	r3, r4, #20
 8005a02:	d13f      	bne.n	8005a84 <__gethex+0x450>
 8005a04:	f8d8 2000 	ldr.w	r2, [r8]
 8005a08:	3a01      	subs	r2, #1
 8005a0a:	42b2      	cmp	r2, r6
 8005a0c:	d10a      	bne.n	8005a24 <__gethex+0x3f0>
 8005a0e:	1171      	asrs	r1, r6, #5
 8005a10:	2201      	movs	r2, #1
 8005a12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005a16:	f006 061f 	and.w	r6, r6, #31
 8005a1a:	fa02 f606 	lsl.w	r6, r2, r6
 8005a1e:	421e      	tst	r6, r3
 8005a20:	bf18      	it	ne
 8005a22:	4617      	movne	r7, r2
 8005a24:	f047 0720 	orr.w	r7, r7, #32
 8005a28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a2a:	601c      	str	r4, [r3, #0]
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	601d      	str	r5, [r3, #0]
 8005a30:	e695      	b.n	800575e <__gethex+0x12a>
 8005a32:	4299      	cmp	r1, r3
 8005a34:	f843 cc04 	str.w	ip, [r3, #-4]
 8005a38:	d8d8      	bhi.n	80059ec <__gethex+0x3b8>
 8005a3a:	68a3      	ldr	r3, [r4, #8]
 8005a3c:	459b      	cmp	fp, r3
 8005a3e:	db19      	blt.n	8005a74 <__gethex+0x440>
 8005a40:	6861      	ldr	r1, [r4, #4]
 8005a42:	ee18 0a10 	vmov	r0, s16
 8005a46:	3101      	adds	r1, #1
 8005a48:	f000 f982 	bl	8005d50 <_Balloc>
 8005a4c:	4681      	mov	r9, r0
 8005a4e:	b918      	cbnz	r0, 8005a58 <__gethex+0x424>
 8005a50:	4b1a      	ldr	r3, [pc, #104]	; (8005abc <__gethex+0x488>)
 8005a52:	4602      	mov	r2, r0
 8005a54:	2184      	movs	r1, #132	; 0x84
 8005a56:	e6a8      	b.n	80057aa <__gethex+0x176>
 8005a58:	6922      	ldr	r2, [r4, #16]
 8005a5a:	3202      	adds	r2, #2
 8005a5c:	f104 010c 	add.w	r1, r4, #12
 8005a60:	0092      	lsls	r2, r2, #2
 8005a62:	300c      	adds	r0, #12
 8005a64:	f7fd ff62 	bl	800392c <memcpy>
 8005a68:	4621      	mov	r1, r4
 8005a6a:	ee18 0a10 	vmov	r0, s16
 8005a6e:	f000 f9af 	bl	8005dd0 <_Bfree>
 8005a72:	464c      	mov	r4, r9
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	1c5a      	adds	r2, r3, #1
 8005a78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a7c:	6122      	str	r2, [r4, #16]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]
 8005a82:	e7bb      	b.n	80059fc <__gethex+0x3c8>
 8005a84:	6922      	ldr	r2, [r4, #16]
 8005a86:	455a      	cmp	r2, fp
 8005a88:	dd0b      	ble.n	8005aa2 <__gethex+0x46e>
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f7ff fd6a 	bl	8005566 <rshift>
 8005a92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a96:	3501      	adds	r5, #1
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	f6ff aed0 	blt.w	800583e <__gethex+0x20a>
 8005a9e:	2701      	movs	r7, #1
 8005aa0:	e7c0      	b.n	8005a24 <__gethex+0x3f0>
 8005aa2:	f016 061f 	ands.w	r6, r6, #31
 8005aa6:	d0fa      	beq.n	8005a9e <__gethex+0x46a>
 8005aa8:	4453      	add	r3, sl
 8005aaa:	f1c6 0620 	rsb	r6, r6, #32
 8005aae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005ab2:	f000 fa3f 	bl	8005f34 <__hi0bits>
 8005ab6:	42b0      	cmp	r0, r6
 8005ab8:	dbe7      	blt.n	8005a8a <__gethex+0x456>
 8005aba:	e7f0      	b.n	8005a9e <__gethex+0x46a>
 8005abc:	08006ea4 	.word	0x08006ea4

08005ac0 <L_shift>:
 8005ac0:	f1c2 0208 	rsb	r2, r2, #8
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	b570      	push	{r4, r5, r6, lr}
 8005ac8:	f1c2 0620 	rsb	r6, r2, #32
 8005acc:	6843      	ldr	r3, [r0, #4]
 8005ace:	6804      	ldr	r4, [r0, #0]
 8005ad0:	fa03 f506 	lsl.w	r5, r3, r6
 8005ad4:	432c      	orrs	r4, r5
 8005ad6:	40d3      	lsrs	r3, r2
 8005ad8:	6004      	str	r4, [r0, #0]
 8005ada:	f840 3f04 	str.w	r3, [r0, #4]!
 8005ade:	4288      	cmp	r0, r1
 8005ae0:	d3f4      	bcc.n	8005acc <L_shift+0xc>
 8005ae2:	bd70      	pop	{r4, r5, r6, pc}

08005ae4 <__match>:
 8005ae4:	b530      	push	{r4, r5, lr}
 8005ae6:	6803      	ldr	r3, [r0, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aee:	b914      	cbnz	r4, 8005af6 <__match+0x12>
 8005af0:	6003      	str	r3, [r0, #0]
 8005af2:	2001      	movs	r0, #1
 8005af4:	bd30      	pop	{r4, r5, pc}
 8005af6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005afe:	2d19      	cmp	r5, #25
 8005b00:	bf98      	it	ls
 8005b02:	3220      	addls	r2, #32
 8005b04:	42a2      	cmp	r2, r4
 8005b06:	d0f0      	beq.n	8005aea <__match+0x6>
 8005b08:	2000      	movs	r0, #0
 8005b0a:	e7f3      	b.n	8005af4 <__match+0x10>

08005b0c <__hexnan>:
 8005b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b10:	680b      	ldr	r3, [r1, #0]
 8005b12:	115e      	asrs	r6, r3, #5
 8005b14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005b18:	f013 031f 	ands.w	r3, r3, #31
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	bf18      	it	ne
 8005b20:	3604      	addne	r6, #4
 8005b22:	2500      	movs	r5, #0
 8005b24:	1f37      	subs	r7, r6, #4
 8005b26:	4690      	mov	r8, r2
 8005b28:	6802      	ldr	r2, [r0, #0]
 8005b2a:	9301      	str	r3, [sp, #4]
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005b32:	46b9      	mov	r9, r7
 8005b34:	463c      	mov	r4, r7
 8005b36:	9502      	str	r5, [sp, #8]
 8005b38:	46ab      	mov	fp, r5
 8005b3a:	7851      	ldrb	r1, [r2, #1]
 8005b3c:	1c53      	adds	r3, r2, #1
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	b341      	cbz	r1, 8005b94 <__hexnan+0x88>
 8005b42:	4608      	mov	r0, r1
 8005b44:	9205      	str	r2, [sp, #20]
 8005b46:	9104      	str	r1, [sp, #16]
 8005b48:	f7ff fd5f 	bl	800560a <__hexdig_fun>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d14f      	bne.n	8005bf0 <__hexnan+0xe4>
 8005b50:	9904      	ldr	r1, [sp, #16]
 8005b52:	9a05      	ldr	r2, [sp, #20]
 8005b54:	2920      	cmp	r1, #32
 8005b56:	d818      	bhi.n	8005b8a <__hexnan+0x7e>
 8005b58:	9b02      	ldr	r3, [sp, #8]
 8005b5a:	459b      	cmp	fp, r3
 8005b5c:	dd13      	ble.n	8005b86 <__hexnan+0x7a>
 8005b5e:	454c      	cmp	r4, r9
 8005b60:	d206      	bcs.n	8005b70 <__hexnan+0x64>
 8005b62:	2d07      	cmp	r5, #7
 8005b64:	dc04      	bgt.n	8005b70 <__hexnan+0x64>
 8005b66:	462a      	mov	r2, r5
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7ff ffa8 	bl	8005ac0 <L_shift>
 8005b70:	4544      	cmp	r4, r8
 8005b72:	d950      	bls.n	8005c16 <__hexnan+0x10a>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f1a4 0904 	sub.w	r9, r4, #4
 8005b7a:	f844 3c04 	str.w	r3, [r4, #-4]
 8005b7e:	f8cd b008 	str.w	fp, [sp, #8]
 8005b82:	464c      	mov	r4, r9
 8005b84:	461d      	mov	r5, r3
 8005b86:	9a03      	ldr	r2, [sp, #12]
 8005b88:	e7d7      	b.n	8005b3a <__hexnan+0x2e>
 8005b8a:	2929      	cmp	r1, #41	; 0x29
 8005b8c:	d156      	bne.n	8005c3c <__hexnan+0x130>
 8005b8e:	3202      	adds	r2, #2
 8005b90:	f8ca 2000 	str.w	r2, [sl]
 8005b94:	f1bb 0f00 	cmp.w	fp, #0
 8005b98:	d050      	beq.n	8005c3c <__hexnan+0x130>
 8005b9a:	454c      	cmp	r4, r9
 8005b9c:	d206      	bcs.n	8005bac <__hexnan+0xa0>
 8005b9e:	2d07      	cmp	r5, #7
 8005ba0:	dc04      	bgt.n	8005bac <__hexnan+0xa0>
 8005ba2:	462a      	mov	r2, r5
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f7ff ff8a 	bl	8005ac0 <L_shift>
 8005bac:	4544      	cmp	r4, r8
 8005bae:	d934      	bls.n	8005c1a <__hexnan+0x10e>
 8005bb0:	f1a8 0204 	sub.w	r2, r8, #4
 8005bb4:	4623      	mov	r3, r4
 8005bb6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005bba:	f842 1f04 	str.w	r1, [r2, #4]!
 8005bbe:	429f      	cmp	r7, r3
 8005bc0:	d2f9      	bcs.n	8005bb6 <__hexnan+0xaa>
 8005bc2:	1b3b      	subs	r3, r7, r4
 8005bc4:	f023 0303 	bic.w	r3, r3, #3
 8005bc8:	3304      	adds	r3, #4
 8005bca:	3401      	adds	r4, #1
 8005bcc:	3e03      	subs	r6, #3
 8005bce:	42b4      	cmp	r4, r6
 8005bd0:	bf88      	it	hi
 8005bd2:	2304      	movhi	r3, #4
 8005bd4:	4443      	add	r3, r8
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f843 2b04 	str.w	r2, [r3], #4
 8005bdc:	429f      	cmp	r7, r3
 8005bde:	d2fb      	bcs.n	8005bd8 <__hexnan+0xcc>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	b91b      	cbnz	r3, 8005bec <__hexnan+0xe0>
 8005be4:	4547      	cmp	r7, r8
 8005be6:	d127      	bne.n	8005c38 <__hexnan+0x12c>
 8005be8:	2301      	movs	r3, #1
 8005bea:	603b      	str	r3, [r7, #0]
 8005bec:	2005      	movs	r0, #5
 8005bee:	e026      	b.n	8005c3e <__hexnan+0x132>
 8005bf0:	3501      	adds	r5, #1
 8005bf2:	2d08      	cmp	r5, #8
 8005bf4:	f10b 0b01 	add.w	fp, fp, #1
 8005bf8:	dd06      	ble.n	8005c08 <__hexnan+0xfc>
 8005bfa:	4544      	cmp	r4, r8
 8005bfc:	d9c3      	bls.n	8005b86 <__hexnan+0x7a>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f844 3c04 	str.w	r3, [r4, #-4]
 8005c04:	2501      	movs	r5, #1
 8005c06:	3c04      	subs	r4, #4
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	f000 000f 	and.w	r0, r0, #15
 8005c0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005c12:	6022      	str	r2, [r4, #0]
 8005c14:	e7b7      	b.n	8005b86 <__hexnan+0x7a>
 8005c16:	2508      	movs	r5, #8
 8005c18:	e7b5      	b.n	8005b86 <__hexnan+0x7a>
 8005c1a:	9b01      	ldr	r3, [sp, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0df      	beq.n	8005be0 <__hexnan+0xd4>
 8005c20:	f04f 32ff 	mov.w	r2, #4294967295
 8005c24:	f1c3 0320 	rsb	r3, r3, #32
 8005c28:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005c30:	401a      	ands	r2, r3
 8005c32:	f846 2c04 	str.w	r2, [r6, #-4]
 8005c36:	e7d3      	b.n	8005be0 <__hexnan+0xd4>
 8005c38:	3f04      	subs	r7, #4
 8005c3a:	e7d1      	b.n	8005be0 <__hexnan+0xd4>
 8005c3c:	2004      	movs	r0, #4
 8005c3e:	b007      	add	sp, #28
 8005c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c44 <__retarget_lock_init_recursive>:
 8005c44:	4770      	bx	lr

08005c46 <__retarget_lock_acquire_recursive>:
 8005c46:	4770      	bx	lr

08005c48 <__retarget_lock_release_recursive>:
 8005c48:	4770      	bx	lr

08005c4a <__swhatbuf_r>:
 8005c4a:	b570      	push	{r4, r5, r6, lr}
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	2900      	cmp	r1, #0
 8005c54:	b096      	sub	sp, #88	; 0x58
 8005c56:	4614      	mov	r4, r2
 8005c58:	461d      	mov	r5, r3
 8005c5a:	da08      	bge.n	8005c6e <__swhatbuf_r+0x24>
 8005c5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	602a      	str	r2, [r5, #0]
 8005c64:	061a      	lsls	r2, r3, #24
 8005c66:	d410      	bmi.n	8005c8a <__swhatbuf_r+0x40>
 8005c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6c:	e00e      	b.n	8005c8c <__swhatbuf_r+0x42>
 8005c6e:	466a      	mov	r2, sp
 8005c70:	f000 fdf0 	bl	8006854 <_fstat_r>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	dbf1      	blt.n	8005c5c <__swhatbuf_r+0x12>
 8005c78:	9a01      	ldr	r2, [sp, #4]
 8005c7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c82:	425a      	negs	r2, r3
 8005c84:	415a      	adcs	r2, r3
 8005c86:	602a      	str	r2, [r5, #0]
 8005c88:	e7ee      	b.n	8005c68 <__swhatbuf_r+0x1e>
 8005c8a:	2340      	movs	r3, #64	; 0x40
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	6023      	str	r3, [r4, #0]
 8005c90:	b016      	add	sp, #88	; 0x58
 8005c92:	bd70      	pop	{r4, r5, r6, pc}

08005c94 <__smakebuf_r>:
 8005c94:	898b      	ldrh	r3, [r1, #12]
 8005c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c98:	079d      	lsls	r5, r3, #30
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	d507      	bpl.n	8005cb0 <__smakebuf_r+0x1c>
 8005ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	6123      	str	r3, [r4, #16]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	6163      	str	r3, [r4, #20]
 8005cac:	b002      	add	sp, #8
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	ab01      	add	r3, sp, #4
 8005cb2:	466a      	mov	r2, sp
 8005cb4:	f7ff ffc9 	bl	8005c4a <__swhatbuf_r>
 8005cb8:	9900      	ldr	r1, [sp, #0]
 8005cba:	4605      	mov	r5, r0
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f7fd fecd 	bl	8003a5c <_malloc_r>
 8005cc2:	b948      	cbnz	r0, 8005cd8 <__smakebuf_r+0x44>
 8005cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc8:	059a      	lsls	r2, r3, #22
 8005cca:	d4ef      	bmi.n	8005cac <__smakebuf_r+0x18>
 8005ccc:	f023 0303 	bic.w	r3, r3, #3
 8005cd0:	f043 0302 	orr.w	r3, r3, #2
 8005cd4:	81a3      	strh	r3, [r4, #12]
 8005cd6:	e7e3      	b.n	8005ca0 <__smakebuf_r+0xc>
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <__smakebuf_r+0x7c>)
 8005cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	6020      	str	r0, [r4, #0]
 8005ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce4:	81a3      	strh	r3, [r4, #12]
 8005ce6:	9b00      	ldr	r3, [sp, #0]
 8005ce8:	6163      	str	r3, [r4, #20]
 8005cea:	9b01      	ldr	r3, [sp, #4]
 8005cec:	6120      	str	r0, [r4, #16]
 8005cee:	b15b      	cbz	r3, 8005d08 <__smakebuf_r+0x74>
 8005cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f000 fdbf 	bl	8006878 <_isatty_r>
 8005cfa:	b128      	cbz	r0, 8005d08 <__smakebuf_r+0x74>
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	f023 0303 	bic.w	r3, r3, #3
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	81a3      	strh	r3, [r4, #12]
 8005d08:	89a0      	ldrh	r0, [r4, #12]
 8005d0a:	4305      	orrs	r5, r0
 8005d0c:	81a5      	strh	r5, [r4, #12]
 8005d0e:	e7cd      	b.n	8005cac <__smakebuf_r+0x18>
 8005d10:	080053c5 	.word	0x080053c5

08005d14 <__ascii_mbtowc>:
 8005d14:	b082      	sub	sp, #8
 8005d16:	b901      	cbnz	r1, 8005d1a <__ascii_mbtowc+0x6>
 8005d18:	a901      	add	r1, sp, #4
 8005d1a:	b142      	cbz	r2, 8005d2e <__ascii_mbtowc+0x1a>
 8005d1c:	b14b      	cbz	r3, 8005d32 <__ascii_mbtowc+0x1e>
 8005d1e:	7813      	ldrb	r3, [r2, #0]
 8005d20:	600b      	str	r3, [r1, #0]
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	1e10      	subs	r0, r2, #0
 8005d26:	bf18      	it	ne
 8005d28:	2001      	movne	r0, #1
 8005d2a:	b002      	add	sp, #8
 8005d2c:	4770      	bx	lr
 8005d2e:	4610      	mov	r0, r2
 8005d30:	e7fb      	b.n	8005d2a <__ascii_mbtowc+0x16>
 8005d32:	f06f 0001 	mvn.w	r0, #1
 8005d36:	e7f8      	b.n	8005d2a <__ascii_mbtowc+0x16>

08005d38 <__malloc_lock>:
 8005d38:	4801      	ldr	r0, [pc, #4]	; (8005d40 <__malloc_lock+0x8>)
 8005d3a:	f7ff bf84 	b.w	8005c46 <__retarget_lock_acquire_recursive>
 8005d3e:	bf00      	nop
 8005d40:	20000580 	.word	0x20000580

08005d44 <__malloc_unlock>:
 8005d44:	4801      	ldr	r0, [pc, #4]	; (8005d4c <__malloc_unlock+0x8>)
 8005d46:	f7ff bf7f 	b.w	8005c48 <__retarget_lock_release_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	20000580 	.word	0x20000580

08005d50 <_Balloc>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d54:	4604      	mov	r4, r0
 8005d56:	460d      	mov	r5, r1
 8005d58:	b976      	cbnz	r6, 8005d78 <_Balloc+0x28>
 8005d5a:	2010      	movs	r0, #16
 8005d5c:	f7fd fdc6 	bl	80038ec <malloc>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6260      	str	r0, [r4, #36]	; 0x24
 8005d64:	b920      	cbnz	r0, 8005d70 <_Balloc+0x20>
 8005d66:	4b18      	ldr	r3, [pc, #96]	; (8005dc8 <_Balloc+0x78>)
 8005d68:	4818      	ldr	r0, [pc, #96]	; (8005dcc <_Balloc+0x7c>)
 8005d6a:	2166      	movs	r1, #102	; 0x66
 8005d6c:	f7fd fd5c 	bl	8003828 <__assert_func>
 8005d70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d74:	6006      	str	r6, [r0, #0]
 8005d76:	60c6      	str	r6, [r0, #12]
 8005d78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d7a:	68f3      	ldr	r3, [r6, #12]
 8005d7c:	b183      	cbz	r3, 8005da0 <_Balloc+0x50>
 8005d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d86:	b9b8      	cbnz	r0, 8005db8 <_Balloc+0x68>
 8005d88:	2101      	movs	r1, #1
 8005d8a:	fa01 f605 	lsl.w	r6, r1, r5
 8005d8e:	1d72      	adds	r2, r6, #5
 8005d90:	0092      	lsls	r2, r2, #2
 8005d92:	4620      	mov	r0, r4
 8005d94:	f7fd fde0 	bl	8003958 <_calloc_r>
 8005d98:	b160      	cbz	r0, 8005db4 <_Balloc+0x64>
 8005d9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d9e:	e00e      	b.n	8005dbe <_Balloc+0x6e>
 8005da0:	2221      	movs	r2, #33	; 0x21
 8005da2:	2104      	movs	r1, #4
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7fd fdd7 	bl	8003958 <_calloc_r>
 8005daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dac:	60f0      	str	r0, [r6, #12]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e4      	bne.n	8005d7e <_Balloc+0x2e>
 8005db4:	2000      	movs	r0, #0
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	6802      	ldr	r2, [r0, #0]
 8005dba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005dc4:	e7f7      	b.n	8005db6 <_Balloc+0x66>
 8005dc6:	bf00      	nop
 8005dc8:	08006f30 	.word	0x08006f30
 8005dcc:	08006f47 	.word	0x08006f47

08005dd0 <_Bfree>:
 8005dd0:	b570      	push	{r4, r5, r6, lr}
 8005dd2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	b976      	cbnz	r6, 8005df8 <_Bfree+0x28>
 8005dda:	2010      	movs	r0, #16
 8005ddc:	f7fd fd86 	bl	80038ec <malloc>
 8005de0:	4602      	mov	r2, r0
 8005de2:	6268      	str	r0, [r5, #36]	; 0x24
 8005de4:	b920      	cbnz	r0, 8005df0 <_Bfree+0x20>
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <_Bfree+0x3c>)
 8005de8:	4809      	ldr	r0, [pc, #36]	; (8005e10 <_Bfree+0x40>)
 8005dea:	218a      	movs	r1, #138	; 0x8a
 8005dec:	f7fd fd1c 	bl	8003828 <__assert_func>
 8005df0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df4:	6006      	str	r6, [r0, #0]
 8005df6:	60c6      	str	r6, [r0, #12]
 8005df8:	b13c      	cbz	r4, 8005e0a <_Bfree+0x3a>
 8005dfa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005dfc:	6862      	ldr	r2, [r4, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e04:	6021      	str	r1, [r4, #0]
 8005e06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	08006f30 	.word	0x08006f30
 8005e10:	08006f47 	.word	0x08006f47

08005e14 <__multadd>:
 8005e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	690d      	ldr	r5, [r1, #16]
 8005e1a:	4607      	mov	r7, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461e      	mov	r6, r3
 8005e20:	f101 0c14 	add.w	ip, r1, #20
 8005e24:	2000      	movs	r0, #0
 8005e26:	f8dc 3000 	ldr.w	r3, [ip]
 8005e2a:	b299      	uxth	r1, r3
 8005e2c:	fb02 6101 	mla	r1, r2, r1, r6
 8005e30:	0c1e      	lsrs	r6, r3, #16
 8005e32:	0c0b      	lsrs	r3, r1, #16
 8005e34:	fb02 3306 	mla	r3, r2, r6, r3
 8005e38:	b289      	uxth	r1, r1
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e40:	4285      	cmp	r5, r0
 8005e42:	f84c 1b04 	str.w	r1, [ip], #4
 8005e46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e4a:	dcec      	bgt.n	8005e26 <__multadd+0x12>
 8005e4c:	b30e      	cbz	r6, 8005e92 <__multadd+0x7e>
 8005e4e:	68a3      	ldr	r3, [r4, #8]
 8005e50:	42ab      	cmp	r3, r5
 8005e52:	dc19      	bgt.n	8005e88 <__multadd+0x74>
 8005e54:	6861      	ldr	r1, [r4, #4]
 8005e56:	4638      	mov	r0, r7
 8005e58:	3101      	adds	r1, #1
 8005e5a:	f7ff ff79 	bl	8005d50 <_Balloc>
 8005e5e:	4680      	mov	r8, r0
 8005e60:	b928      	cbnz	r0, 8005e6e <__multadd+0x5a>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <__multadd+0x84>)
 8005e66:	480d      	ldr	r0, [pc, #52]	; (8005e9c <__multadd+0x88>)
 8005e68:	21b5      	movs	r1, #181	; 0xb5
 8005e6a:	f7fd fcdd 	bl	8003828 <__assert_func>
 8005e6e:	6922      	ldr	r2, [r4, #16]
 8005e70:	3202      	adds	r2, #2
 8005e72:	f104 010c 	add.w	r1, r4, #12
 8005e76:	0092      	lsls	r2, r2, #2
 8005e78:	300c      	adds	r0, #12
 8005e7a:	f7fd fd57 	bl	800392c <memcpy>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4638      	mov	r0, r7
 8005e82:	f7ff ffa5 	bl	8005dd0 <_Bfree>
 8005e86:	4644      	mov	r4, r8
 8005e88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	615e      	str	r6, [r3, #20]
 8005e90:	6125      	str	r5, [r4, #16]
 8005e92:	4620      	mov	r0, r4
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e98:	08006ea4 	.word	0x08006ea4
 8005e9c:	08006f47 	.word	0x08006f47

08005ea0 <__s2b>:
 8005ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	461f      	mov	r7, r3
 8005eaa:	2209      	movs	r2, #9
 8005eac:	3308      	adds	r3, #8
 8005eae:	4606      	mov	r6, r0
 8005eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	db09      	blt.n	8005ed0 <__s2b+0x30>
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f7ff ff47 	bl	8005d50 <_Balloc>
 8005ec2:	b940      	cbnz	r0, 8005ed6 <__s2b+0x36>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <__s2b+0x8c>)
 8005ec8:	4819      	ldr	r0, [pc, #100]	; (8005f30 <__s2b+0x90>)
 8005eca:	21ce      	movs	r1, #206	; 0xce
 8005ecc:	f7fd fcac 	bl	8003828 <__assert_func>
 8005ed0:	0052      	lsls	r2, r2, #1
 8005ed2:	3101      	adds	r1, #1
 8005ed4:	e7f0      	b.n	8005eb8 <__s2b+0x18>
 8005ed6:	9b08      	ldr	r3, [sp, #32]
 8005ed8:	6143      	str	r3, [r0, #20]
 8005eda:	2d09      	cmp	r5, #9
 8005edc:	f04f 0301 	mov.w	r3, #1
 8005ee0:	6103      	str	r3, [r0, #16]
 8005ee2:	dd16      	ble.n	8005f12 <__s2b+0x72>
 8005ee4:	f104 0909 	add.w	r9, r4, #9
 8005ee8:	46c8      	mov	r8, r9
 8005eea:	442c      	add	r4, r5
 8005eec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	3b30      	subs	r3, #48	; 0x30
 8005ef4:	220a      	movs	r2, #10
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f7ff ff8c 	bl	8005e14 <__multadd>
 8005efc:	45a0      	cmp	r8, r4
 8005efe:	d1f5      	bne.n	8005eec <__s2b+0x4c>
 8005f00:	f1a5 0408 	sub.w	r4, r5, #8
 8005f04:	444c      	add	r4, r9
 8005f06:	1b2d      	subs	r5, r5, r4
 8005f08:	1963      	adds	r3, r4, r5
 8005f0a:	42bb      	cmp	r3, r7
 8005f0c:	db04      	blt.n	8005f18 <__s2b+0x78>
 8005f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f12:	340a      	adds	r4, #10
 8005f14:	2509      	movs	r5, #9
 8005f16:	e7f6      	b.n	8005f06 <__s2b+0x66>
 8005f18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	3b30      	subs	r3, #48	; 0x30
 8005f20:	220a      	movs	r2, #10
 8005f22:	4630      	mov	r0, r6
 8005f24:	f7ff ff76 	bl	8005e14 <__multadd>
 8005f28:	e7ee      	b.n	8005f08 <__s2b+0x68>
 8005f2a:	bf00      	nop
 8005f2c:	08006ea4 	.word	0x08006ea4
 8005f30:	08006f47 	.word	0x08006f47

08005f34 <__hi0bits>:
 8005f34:	0c03      	lsrs	r3, r0, #16
 8005f36:	041b      	lsls	r3, r3, #16
 8005f38:	b9d3      	cbnz	r3, 8005f70 <__hi0bits+0x3c>
 8005f3a:	0400      	lsls	r0, r0, #16
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005f42:	bf04      	itt	eq
 8005f44:	0200      	lsleq	r0, r0, #8
 8005f46:	3308      	addeq	r3, #8
 8005f48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005f4c:	bf04      	itt	eq
 8005f4e:	0100      	lsleq	r0, r0, #4
 8005f50:	3304      	addeq	r3, #4
 8005f52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005f56:	bf04      	itt	eq
 8005f58:	0080      	lsleq	r0, r0, #2
 8005f5a:	3302      	addeq	r3, #2
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	db05      	blt.n	8005f6c <__hi0bits+0x38>
 8005f60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005f64:	f103 0301 	add.w	r3, r3, #1
 8005f68:	bf08      	it	eq
 8005f6a:	2320      	moveq	r3, #32
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	4770      	bx	lr
 8005f70:	2300      	movs	r3, #0
 8005f72:	e7e4      	b.n	8005f3e <__hi0bits+0xa>

08005f74 <__lo0bits>:
 8005f74:	6803      	ldr	r3, [r0, #0]
 8005f76:	f013 0207 	ands.w	r2, r3, #7
 8005f7a:	4601      	mov	r1, r0
 8005f7c:	d00b      	beq.n	8005f96 <__lo0bits+0x22>
 8005f7e:	07da      	lsls	r2, r3, #31
 8005f80:	d423      	bmi.n	8005fca <__lo0bits+0x56>
 8005f82:	0798      	lsls	r0, r3, #30
 8005f84:	bf49      	itett	mi
 8005f86:	085b      	lsrmi	r3, r3, #1
 8005f88:	089b      	lsrpl	r3, r3, #2
 8005f8a:	2001      	movmi	r0, #1
 8005f8c:	600b      	strmi	r3, [r1, #0]
 8005f8e:	bf5c      	itt	pl
 8005f90:	600b      	strpl	r3, [r1, #0]
 8005f92:	2002      	movpl	r0, #2
 8005f94:	4770      	bx	lr
 8005f96:	b298      	uxth	r0, r3
 8005f98:	b9a8      	cbnz	r0, 8005fc6 <__lo0bits+0x52>
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	2010      	movs	r0, #16
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	b90a      	cbnz	r2, 8005fa6 <__lo0bits+0x32>
 8005fa2:	3008      	adds	r0, #8
 8005fa4:	0a1b      	lsrs	r3, r3, #8
 8005fa6:	071a      	lsls	r2, r3, #28
 8005fa8:	bf04      	itt	eq
 8005faa:	091b      	lsreq	r3, r3, #4
 8005fac:	3004      	addeq	r0, #4
 8005fae:	079a      	lsls	r2, r3, #30
 8005fb0:	bf04      	itt	eq
 8005fb2:	089b      	lsreq	r3, r3, #2
 8005fb4:	3002      	addeq	r0, #2
 8005fb6:	07da      	lsls	r2, r3, #31
 8005fb8:	d403      	bmi.n	8005fc2 <__lo0bits+0x4e>
 8005fba:	085b      	lsrs	r3, r3, #1
 8005fbc:	f100 0001 	add.w	r0, r0, #1
 8005fc0:	d005      	beq.n	8005fce <__lo0bits+0x5a>
 8005fc2:	600b      	str	r3, [r1, #0]
 8005fc4:	4770      	bx	lr
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	e7e9      	b.n	8005f9e <__lo0bits+0x2a>
 8005fca:	2000      	movs	r0, #0
 8005fcc:	4770      	bx	lr
 8005fce:	2020      	movs	r0, #32
 8005fd0:	4770      	bx	lr
	...

08005fd4 <__i2b>:
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	460c      	mov	r4, r1
 8005fd8:	2101      	movs	r1, #1
 8005fda:	f7ff feb9 	bl	8005d50 <_Balloc>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	b928      	cbnz	r0, 8005fee <__i2b+0x1a>
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <__i2b+0x24>)
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <__i2b+0x28>)
 8005fe6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005fea:	f7fd fc1d 	bl	8003828 <__assert_func>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	6144      	str	r4, [r0, #20]
 8005ff2:	6103      	str	r3, [r0, #16]
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	08006ea4 	.word	0x08006ea4
 8005ffc:	08006f47 	.word	0x08006f47

08006000 <__multiply>:
 8006000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	4691      	mov	r9, r2
 8006006:	690a      	ldr	r2, [r1, #16]
 8006008:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800600c:	429a      	cmp	r2, r3
 800600e:	bfb8      	it	lt
 8006010:	460b      	movlt	r3, r1
 8006012:	460c      	mov	r4, r1
 8006014:	bfbc      	itt	lt
 8006016:	464c      	movlt	r4, r9
 8006018:	4699      	movlt	r9, r3
 800601a:	6927      	ldr	r7, [r4, #16]
 800601c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006020:	68a3      	ldr	r3, [r4, #8]
 8006022:	6861      	ldr	r1, [r4, #4]
 8006024:	eb07 060a 	add.w	r6, r7, sl
 8006028:	42b3      	cmp	r3, r6
 800602a:	b085      	sub	sp, #20
 800602c:	bfb8      	it	lt
 800602e:	3101      	addlt	r1, #1
 8006030:	f7ff fe8e 	bl	8005d50 <_Balloc>
 8006034:	b930      	cbnz	r0, 8006044 <__multiply+0x44>
 8006036:	4602      	mov	r2, r0
 8006038:	4b44      	ldr	r3, [pc, #272]	; (800614c <__multiply+0x14c>)
 800603a:	4845      	ldr	r0, [pc, #276]	; (8006150 <__multiply+0x150>)
 800603c:	f240 115d 	movw	r1, #349	; 0x15d
 8006040:	f7fd fbf2 	bl	8003828 <__assert_func>
 8006044:	f100 0514 	add.w	r5, r0, #20
 8006048:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800604c:	462b      	mov	r3, r5
 800604e:	2200      	movs	r2, #0
 8006050:	4543      	cmp	r3, r8
 8006052:	d321      	bcc.n	8006098 <__multiply+0x98>
 8006054:	f104 0314 	add.w	r3, r4, #20
 8006058:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800605c:	f109 0314 	add.w	r3, r9, #20
 8006060:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006064:	9202      	str	r2, [sp, #8]
 8006066:	1b3a      	subs	r2, r7, r4
 8006068:	3a15      	subs	r2, #21
 800606a:	f022 0203 	bic.w	r2, r2, #3
 800606e:	3204      	adds	r2, #4
 8006070:	f104 0115 	add.w	r1, r4, #21
 8006074:	428f      	cmp	r7, r1
 8006076:	bf38      	it	cc
 8006078:	2204      	movcc	r2, #4
 800607a:	9201      	str	r2, [sp, #4]
 800607c:	9a02      	ldr	r2, [sp, #8]
 800607e:	9303      	str	r3, [sp, #12]
 8006080:	429a      	cmp	r2, r3
 8006082:	d80c      	bhi.n	800609e <__multiply+0x9e>
 8006084:	2e00      	cmp	r6, #0
 8006086:	dd03      	ble.n	8006090 <__multiply+0x90>
 8006088:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05a      	beq.n	8006146 <__multiply+0x146>
 8006090:	6106      	str	r6, [r0, #16]
 8006092:	b005      	add	sp, #20
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006098:	f843 2b04 	str.w	r2, [r3], #4
 800609c:	e7d8      	b.n	8006050 <__multiply+0x50>
 800609e:	f8b3 a000 	ldrh.w	sl, [r3]
 80060a2:	f1ba 0f00 	cmp.w	sl, #0
 80060a6:	d024      	beq.n	80060f2 <__multiply+0xf2>
 80060a8:	f104 0e14 	add.w	lr, r4, #20
 80060ac:	46a9      	mov	r9, r5
 80060ae:	f04f 0c00 	mov.w	ip, #0
 80060b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80060b6:	f8d9 1000 	ldr.w	r1, [r9]
 80060ba:	fa1f fb82 	uxth.w	fp, r2
 80060be:	b289      	uxth	r1, r1
 80060c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80060c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80060c8:	f8d9 2000 	ldr.w	r2, [r9]
 80060cc:	4461      	add	r1, ip
 80060ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80060d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060da:	b289      	uxth	r1, r1
 80060dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060e0:	4577      	cmp	r7, lr
 80060e2:	f849 1b04 	str.w	r1, [r9], #4
 80060e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060ea:	d8e2      	bhi.n	80060b2 <__multiply+0xb2>
 80060ec:	9a01      	ldr	r2, [sp, #4]
 80060ee:	f845 c002 	str.w	ip, [r5, r2]
 80060f2:	9a03      	ldr	r2, [sp, #12]
 80060f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060f8:	3304      	adds	r3, #4
 80060fa:	f1b9 0f00 	cmp.w	r9, #0
 80060fe:	d020      	beq.n	8006142 <__multiply+0x142>
 8006100:	6829      	ldr	r1, [r5, #0]
 8006102:	f104 0c14 	add.w	ip, r4, #20
 8006106:	46ae      	mov	lr, r5
 8006108:	f04f 0a00 	mov.w	sl, #0
 800610c:	f8bc b000 	ldrh.w	fp, [ip]
 8006110:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006114:	fb09 220b 	mla	r2, r9, fp, r2
 8006118:	4492      	add	sl, r2
 800611a:	b289      	uxth	r1, r1
 800611c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006120:	f84e 1b04 	str.w	r1, [lr], #4
 8006124:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006128:	f8be 1000 	ldrh.w	r1, [lr]
 800612c:	0c12      	lsrs	r2, r2, #16
 800612e:	fb09 1102 	mla	r1, r9, r2, r1
 8006132:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006136:	4567      	cmp	r7, ip
 8006138:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800613c:	d8e6      	bhi.n	800610c <__multiply+0x10c>
 800613e:	9a01      	ldr	r2, [sp, #4]
 8006140:	50a9      	str	r1, [r5, r2]
 8006142:	3504      	adds	r5, #4
 8006144:	e79a      	b.n	800607c <__multiply+0x7c>
 8006146:	3e01      	subs	r6, #1
 8006148:	e79c      	b.n	8006084 <__multiply+0x84>
 800614a:	bf00      	nop
 800614c:	08006ea4 	.word	0x08006ea4
 8006150:	08006f47 	.word	0x08006f47

08006154 <__pow5mult>:
 8006154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006158:	4615      	mov	r5, r2
 800615a:	f012 0203 	ands.w	r2, r2, #3
 800615e:	4606      	mov	r6, r0
 8006160:	460f      	mov	r7, r1
 8006162:	d007      	beq.n	8006174 <__pow5mult+0x20>
 8006164:	4c25      	ldr	r4, [pc, #148]	; (80061fc <__pow5mult+0xa8>)
 8006166:	3a01      	subs	r2, #1
 8006168:	2300      	movs	r3, #0
 800616a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800616e:	f7ff fe51 	bl	8005e14 <__multadd>
 8006172:	4607      	mov	r7, r0
 8006174:	10ad      	asrs	r5, r5, #2
 8006176:	d03d      	beq.n	80061f4 <__pow5mult+0xa0>
 8006178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800617a:	b97c      	cbnz	r4, 800619c <__pow5mult+0x48>
 800617c:	2010      	movs	r0, #16
 800617e:	f7fd fbb5 	bl	80038ec <malloc>
 8006182:	4602      	mov	r2, r0
 8006184:	6270      	str	r0, [r6, #36]	; 0x24
 8006186:	b928      	cbnz	r0, 8006194 <__pow5mult+0x40>
 8006188:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <__pow5mult+0xac>)
 800618a:	481e      	ldr	r0, [pc, #120]	; (8006204 <__pow5mult+0xb0>)
 800618c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006190:	f7fd fb4a 	bl	8003828 <__assert_func>
 8006194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006198:	6004      	str	r4, [r0, #0]
 800619a:	60c4      	str	r4, [r0, #12]
 800619c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80061a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061a4:	b94c      	cbnz	r4, 80061ba <__pow5mult+0x66>
 80061a6:	f240 2171 	movw	r1, #625	; 0x271
 80061aa:	4630      	mov	r0, r6
 80061ac:	f7ff ff12 	bl	8005fd4 <__i2b>
 80061b0:	2300      	movs	r3, #0
 80061b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80061b6:	4604      	mov	r4, r0
 80061b8:	6003      	str	r3, [r0, #0]
 80061ba:	f04f 0900 	mov.w	r9, #0
 80061be:	07eb      	lsls	r3, r5, #31
 80061c0:	d50a      	bpl.n	80061d8 <__pow5mult+0x84>
 80061c2:	4639      	mov	r1, r7
 80061c4:	4622      	mov	r2, r4
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff ff1a 	bl	8006000 <__multiply>
 80061cc:	4639      	mov	r1, r7
 80061ce:	4680      	mov	r8, r0
 80061d0:	4630      	mov	r0, r6
 80061d2:	f7ff fdfd 	bl	8005dd0 <_Bfree>
 80061d6:	4647      	mov	r7, r8
 80061d8:	106d      	asrs	r5, r5, #1
 80061da:	d00b      	beq.n	80061f4 <__pow5mult+0xa0>
 80061dc:	6820      	ldr	r0, [r4, #0]
 80061de:	b938      	cbnz	r0, 80061f0 <__pow5mult+0x9c>
 80061e0:	4622      	mov	r2, r4
 80061e2:	4621      	mov	r1, r4
 80061e4:	4630      	mov	r0, r6
 80061e6:	f7ff ff0b 	bl	8006000 <__multiply>
 80061ea:	6020      	str	r0, [r4, #0]
 80061ec:	f8c0 9000 	str.w	r9, [r0]
 80061f0:	4604      	mov	r4, r0
 80061f2:	e7e4      	b.n	80061be <__pow5mult+0x6a>
 80061f4:	4638      	mov	r0, r7
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fa:	bf00      	nop
 80061fc:	08007098 	.word	0x08007098
 8006200:	08006f30 	.word	0x08006f30
 8006204:	08006f47 	.word	0x08006f47

08006208 <__lshift>:
 8006208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	460c      	mov	r4, r1
 800620e:	6849      	ldr	r1, [r1, #4]
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	4607      	mov	r7, r0
 800621a:	4691      	mov	r9, r2
 800621c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006220:	f108 0601 	add.w	r6, r8, #1
 8006224:	42b3      	cmp	r3, r6
 8006226:	db0b      	blt.n	8006240 <__lshift+0x38>
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff fd91 	bl	8005d50 <_Balloc>
 800622e:	4605      	mov	r5, r0
 8006230:	b948      	cbnz	r0, 8006246 <__lshift+0x3e>
 8006232:	4602      	mov	r2, r0
 8006234:	4b2a      	ldr	r3, [pc, #168]	; (80062e0 <__lshift+0xd8>)
 8006236:	482b      	ldr	r0, [pc, #172]	; (80062e4 <__lshift+0xdc>)
 8006238:	f240 11d9 	movw	r1, #473	; 0x1d9
 800623c:	f7fd faf4 	bl	8003828 <__assert_func>
 8006240:	3101      	adds	r1, #1
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	e7ee      	b.n	8006224 <__lshift+0x1c>
 8006246:	2300      	movs	r3, #0
 8006248:	f100 0114 	add.w	r1, r0, #20
 800624c:	f100 0210 	add.w	r2, r0, #16
 8006250:	4618      	mov	r0, r3
 8006252:	4553      	cmp	r3, sl
 8006254:	db37      	blt.n	80062c6 <__lshift+0xbe>
 8006256:	6920      	ldr	r0, [r4, #16]
 8006258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800625c:	f104 0314 	add.w	r3, r4, #20
 8006260:	f019 091f 	ands.w	r9, r9, #31
 8006264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006268:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800626c:	d02f      	beq.n	80062ce <__lshift+0xc6>
 800626e:	f1c9 0e20 	rsb	lr, r9, #32
 8006272:	468a      	mov	sl, r1
 8006274:	f04f 0c00 	mov.w	ip, #0
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	fa02 f209 	lsl.w	r2, r2, r9
 800627e:	ea42 020c 	orr.w	r2, r2, ip
 8006282:	f84a 2b04 	str.w	r2, [sl], #4
 8006286:	f853 2b04 	ldr.w	r2, [r3], #4
 800628a:	4298      	cmp	r0, r3
 800628c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006290:	d8f2      	bhi.n	8006278 <__lshift+0x70>
 8006292:	1b03      	subs	r3, r0, r4
 8006294:	3b15      	subs	r3, #21
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	3304      	adds	r3, #4
 800629c:	f104 0215 	add.w	r2, r4, #21
 80062a0:	4290      	cmp	r0, r2
 80062a2:	bf38      	it	cc
 80062a4:	2304      	movcc	r3, #4
 80062a6:	f841 c003 	str.w	ip, [r1, r3]
 80062aa:	f1bc 0f00 	cmp.w	ip, #0
 80062ae:	d001      	beq.n	80062b4 <__lshift+0xac>
 80062b0:	f108 0602 	add.w	r6, r8, #2
 80062b4:	3e01      	subs	r6, #1
 80062b6:	4638      	mov	r0, r7
 80062b8:	612e      	str	r6, [r5, #16]
 80062ba:	4621      	mov	r1, r4
 80062bc:	f7ff fd88 	bl	8005dd0 <_Bfree>
 80062c0:	4628      	mov	r0, r5
 80062c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80062ca:	3301      	adds	r3, #1
 80062cc:	e7c1      	b.n	8006252 <__lshift+0x4a>
 80062ce:	3904      	subs	r1, #4
 80062d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80062d8:	4298      	cmp	r0, r3
 80062da:	d8f9      	bhi.n	80062d0 <__lshift+0xc8>
 80062dc:	e7ea      	b.n	80062b4 <__lshift+0xac>
 80062de:	bf00      	nop
 80062e0:	08006ea4 	.word	0x08006ea4
 80062e4:	08006f47 	.word	0x08006f47

080062e8 <__mcmp>:
 80062e8:	b530      	push	{r4, r5, lr}
 80062ea:	6902      	ldr	r2, [r0, #16]
 80062ec:	690c      	ldr	r4, [r1, #16]
 80062ee:	1b12      	subs	r2, r2, r4
 80062f0:	d10e      	bne.n	8006310 <__mcmp+0x28>
 80062f2:	f100 0314 	add.w	r3, r0, #20
 80062f6:	3114      	adds	r1, #20
 80062f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80062fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006300:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006304:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006308:	42a5      	cmp	r5, r4
 800630a:	d003      	beq.n	8006314 <__mcmp+0x2c>
 800630c:	d305      	bcc.n	800631a <__mcmp+0x32>
 800630e:	2201      	movs	r2, #1
 8006310:	4610      	mov	r0, r2
 8006312:	bd30      	pop	{r4, r5, pc}
 8006314:	4283      	cmp	r3, r0
 8006316:	d3f3      	bcc.n	8006300 <__mcmp+0x18>
 8006318:	e7fa      	b.n	8006310 <__mcmp+0x28>
 800631a:	f04f 32ff 	mov.w	r2, #4294967295
 800631e:	e7f7      	b.n	8006310 <__mcmp+0x28>

08006320 <__mdiff>:
 8006320:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	460c      	mov	r4, r1
 8006326:	4606      	mov	r6, r0
 8006328:	4611      	mov	r1, r2
 800632a:	4620      	mov	r0, r4
 800632c:	4690      	mov	r8, r2
 800632e:	f7ff ffdb 	bl	80062e8 <__mcmp>
 8006332:	1e05      	subs	r5, r0, #0
 8006334:	d110      	bne.n	8006358 <__mdiff+0x38>
 8006336:	4629      	mov	r1, r5
 8006338:	4630      	mov	r0, r6
 800633a:	f7ff fd09 	bl	8005d50 <_Balloc>
 800633e:	b930      	cbnz	r0, 800634e <__mdiff+0x2e>
 8006340:	4b3a      	ldr	r3, [pc, #232]	; (800642c <__mdiff+0x10c>)
 8006342:	4602      	mov	r2, r0
 8006344:	f240 2132 	movw	r1, #562	; 0x232
 8006348:	4839      	ldr	r0, [pc, #228]	; (8006430 <__mdiff+0x110>)
 800634a:	f7fd fa6d 	bl	8003828 <__assert_func>
 800634e:	2301      	movs	r3, #1
 8006350:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006354:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006358:	bfa4      	itt	ge
 800635a:	4643      	movge	r3, r8
 800635c:	46a0      	movge	r8, r4
 800635e:	4630      	mov	r0, r6
 8006360:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006364:	bfa6      	itte	ge
 8006366:	461c      	movge	r4, r3
 8006368:	2500      	movge	r5, #0
 800636a:	2501      	movlt	r5, #1
 800636c:	f7ff fcf0 	bl	8005d50 <_Balloc>
 8006370:	b920      	cbnz	r0, 800637c <__mdiff+0x5c>
 8006372:	4b2e      	ldr	r3, [pc, #184]	; (800642c <__mdiff+0x10c>)
 8006374:	4602      	mov	r2, r0
 8006376:	f44f 7110 	mov.w	r1, #576	; 0x240
 800637a:	e7e5      	b.n	8006348 <__mdiff+0x28>
 800637c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006380:	6926      	ldr	r6, [r4, #16]
 8006382:	60c5      	str	r5, [r0, #12]
 8006384:	f104 0914 	add.w	r9, r4, #20
 8006388:	f108 0514 	add.w	r5, r8, #20
 800638c:	f100 0e14 	add.w	lr, r0, #20
 8006390:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006394:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006398:	f108 0210 	add.w	r2, r8, #16
 800639c:	46f2      	mov	sl, lr
 800639e:	2100      	movs	r1, #0
 80063a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80063a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80063a8:	fa1f f883 	uxth.w	r8, r3
 80063ac:	fa11 f18b 	uxtah	r1, r1, fp
 80063b0:	0c1b      	lsrs	r3, r3, #16
 80063b2:	eba1 0808 	sub.w	r8, r1, r8
 80063b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80063ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80063be:	fa1f f888 	uxth.w	r8, r8
 80063c2:	1419      	asrs	r1, r3, #16
 80063c4:	454e      	cmp	r6, r9
 80063c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80063ca:	f84a 3b04 	str.w	r3, [sl], #4
 80063ce:	d8e7      	bhi.n	80063a0 <__mdiff+0x80>
 80063d0:	1b33      	subs	r3, r6, r4
 80063d2:	3b15      	subs	r3, #21
 80063d4:	f023 0303 	bic.w	r3, r3, #3
 80063d8:	3304      	adds	r3, #4
 80063da:	3415      	adds	r4, #21
 80063dc:	42a6      	cmp	r6, r4
 80063de:	bf38      	it	cc
 80063e0:	2304      	movcc	r3, #4
 80063e2:	441d      	add	r5, r3
 80063e4:	4473      	add	r3, lr
 80063e6:	469e      	mov	lr, r3
 80063e8:	462e      	mov	r6, r5
 80063ea:	4566      	cmp	r6, ip
 80063ec:	d30e      	bcc.n	800640c <__mdiff+0xec>
 80063ee:	f10c 0203 	add.w	r2, ip, #3
 80063f2:	1b52      	subs	r2, r2, r5
 80063f4:	f022 0203 	bic.w	r2, r2, #3
 80063f8:	3d03      	subs	r5, #3
 80063fa:	45ac      	cmp	ip, r5
 80063fc:	bf38      	it	cc
 80063fe:	2200      	movcc	r2, #0
 8006400:	441a      	add	r2, r3
 8006402:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006406:	b17b      	cbz	r3, 8006428 <__mdiff+0x108>
 8006408:	6107      	str	r7, [r0, #16]
 800640a:	e7a3      	b.n	8006354 <__mdiff+0x34>
 800640c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006410:	fa11 f288 	uxtah	r2, r1, r8
 8006414:	1414      	asrs	r4, r2, #16
 8006416:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800641a:	b292      	uxth	r2, r2
 800641c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006420:	f84e 2b04 	str.w	r2, [lr], #4
 8006424:	1421      	asrs	r1, r4, #16
 8006426:	e7e0      	b.n	80063ea <__mdiff+0xca>
 8006428:	3f01      	subs	r7, #1
 800642a:	e7ea      	b.n	8006402 <__mdiff+0xe2>
 800642c:	08006ea4 	.word	0x08006ea4
 8006430:	08006f47 	.word	0x08006f47

08006434 <__ulp>:
 8006434:	b082      	sub	sp, #8
 8006436:	ed8d 0b00 	vstr	d0, [sp]
 800643a:	9b01      	ldr	r3, [sp, #4]
 800643c:	4912      	ldr	r1, [pc, #72]	; (8006488 <__ulp+0x54>)
 800643e:	4019      	ands	r1, r3
 8006440:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006444:	2900      	cmp	r1, #0
 8006446:	dd05      	ble.n	8006454 <__ulp+0x20>
 8006448:	2200      	movs	r2, #0
 800644a:	460b      	mov	r3, r1
 800644c:	ec43 2b10 	vmov	d0, r2, r3
 8006450:	b002      	add	sp, #8
 8006452:	4770      	bx	lr
 8006454:	4249      	negs	r1, r1
 8006456:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800645a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	f04f 0300 	mov.w	r3, #0
 8006466:	da04      	bge.n	8006472 <__ulp+0x3e>
 8006468:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800646c:	fa41 f300 	asr.w	r3, r1, r0
 8006470:	e7ec      	b.n	800644c <__ulp+0x18>
 8006472:	f1a0 0114 	sub.w	r1, r0, #20
 8006476:	291e      	cmp	r1, #30
 8006478:	bfda      	itte	le
 800647a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800647e:	fa20 f101 	lsrle.w	r1, r0, r1
 8006482:	2101      	movgt	r1, #1
 8006484:	460a      	mov	r2, r1
 8006486:	e7e1      	b.n	800644c <__ulp+0x18>
 8006488:	7ff00000 	.word	0x7ff00000

0800648c <__b2d>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	6905      	ldr	r5, [r0, #16]
 8006490:	f100 0714 	add.w	r7, r0, #20
 8006494:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006498:	1f2e      	subs	r6, r5, #4
 800649a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff fd48 	bl	8005f34 <__hi0bits>
 80064a4:	f1c0 0320 	rsb	r3, r0, #32
 80064a8:	280a      	cmp	r0, #10
 80064aa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006528 <__b2d+0x9c>
 80064ae:	600b      	str	r3, [r1, #0]
 80064b0:	dc14      	bgt.n	80064dc <__b2d+0x50>
 80064b2:	f1c0 0e0b 	rsb	lr, r0, #11
 80064b6:	fa24 f10e 	lsr.w	r1, r4, lr
 80064ba:	42b7      	cmp	r7, r6
 80064bc:	ea41 030c 	orr.w	r3, r1, ip
 80064c0:	bf34      	ite	cc
 80064c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80064c6:	2100      	movcs	r1, #0
 80064c8:	3015      	adds	r0, #21
 80064ca:	fa04 f000 	lsl.w	r0, r4, r0
 80064ce:	fa21 f10e 	lsr.w	r1, r1, lr
 80064d2:	ea40 0201 	orr.w	r2, r0, r1
 80064d6:	ec43 2b10 	vmov	d0, r2, r3
 80064da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064dc:	42b7      	cmp	r7, r6
 80064de:	bf3a      	itte	cc
 80064e0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80064e4:	f1a5 0608 	subcc.w	r6, r5, #8
 80064e8:	2100      	movcs	r1, #0
 80064ea:	380b      	subs	r0, #11
 80064ec:	d017      	beq.n	800651e <__b2d+0x92>
 80064ee:	f1c0 0c20 	rsb	ip, r0, #32
 80064f2:	fa04 f500 	lsl.w	r5, r4, r0
 80064f6:	42be      	cmp	r6, r7
 80064f8:	fa21 f40c 	lsr.w	r4, r1, ip
 80064fc:	ea45 0504 	orr.w	r5, r5, r4
 8006500:	bf8c      	ite	hi
 8006502:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006506:	2400      	movls	r4, #0
 8006508:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800650c:	fa01 f000 	lsl.w	r0, r1, r0
 8006510:	fa24 f40c 	lsr.w	r4, r4, ip
 8006514:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006518:	ea40 0204 	orr.w	r2, r0, r4
 800651c:	e7db      	b.n	80064d6 <__b2d+0x4a>
 800651e:	ea44 030c 	orr.w	r3, r4, ip
 8006522:	460a      	mov	r2, r1
 8006524:	e7d7      	b.n	80064d6 <__b2d+0x4a>
 8006526:	bf00      	nop
 8006528:	3ff00000 	.word	0x3ff00000

0800652c <__d2b>:
 800652c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006530:	4689      	mov	r9, r1
 8006532:	2101      	movs	r1, #1
 8006534:	ec57 6b10 	vmov	r6, r7, d0
 8006538:	4690      	mov	r8, r2
 800653a:	f7ff fc09 	bl	8005d50 <_Balloc>
 800653e:	4604      	mov	r4, r0
 8006540:	b930      	cbnz	r0, 8006550 <__d2b+0x24>
 8006542:	4602      	mov	r2, r0
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <__d2b+0xb0>)
 8006546:	4826      	ldr	r0, [pc, #152]	; (80065e0 <__d2b+0xb4>)
 8006548:	f240 310a 	movw	r1, #778	; 0x30a
 800654c:	f7fd f96c 	bl	8003828 <__assert_func>
 8006550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006558:	bb35      	cbnz	r5, 80065a8 <__d2b+0x7c>
 800655a:	2e00      	cmp	r6, #0
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	d028      	beq.n	80065b2 <__d2b+0x86>
 8006560:	4668      	mov	r0, sp
 8006562:	9600      	str	r6, [sp, #0]
 8006564:	f7ff fd06 	bl	8005f74 <__lo0bits>
 8006568:	9900      	ldr	r1, [sp, #0]
 800656a:	b300      	cbz	r0, 80065ae <__d2b+0x82>
 800656c:	9a01      	ldr	r2, [sp, #4]
 800656e:	f1c0 0320 	rsb	r3, r0, #32
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	430b      	orrs	r3, r1
 8006578:	40c2      	lsrs	r2, r0
 800657a:	6163      	str	r3, [r4, #20]
 800657c:	9201      	str	r2, [sp, #4]
 800657e:	9b01      	ldr	r3, [sp, #4]
 8006580:	61a3      	str	r3, [r4, #24]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2202      	movne	r2, #2
 8006588:	2201      	moveq	r2, #1
 800658a:	6122      	str	r2, [r4, #16]
 800658c:	b1d5      	cbz	r5, 80065c4 <__d2b+0x98>
 800658e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006592:	4405      	add	r5, r0
 8006594:	f8c9 5000 	str.w	r5, [r9]
 8006598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800659c:	f8c8 0000 	str.w	r0, [r8]
 80065a0:	4620      	mov	r0, r4
 80065a2:	b003      	add	sp, #12
 80065a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ac:	e7d5      	b.n	800655a <__d2b+0x2e>
 80065ae:	6161      	str	r1, [r4, #20]
 80065b0:	e7e5      	b.n	800657e <__d2b+0x52>
 80065b2:	a801      	add	r0, sp, #4
 80065b4:	f7ff fcde 	bl	8005f74 <__lo0bits>
 80065b8:	9b01      	ldr	r3, [sp, #4]
 80065ba:	6163      	str	r3, [r4, #20]
 80065bc:	2201      	movs	r2, #1
 80065be:	6122      	str	r2, [r4, #16]
 80065c0:	3020      	adds	r0, #32
 80065c2:	e7e3      	b.n	800658c <__d2b+0x60>
 80065c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065cc:	f8c9 0000 	str.w	r0, [r9]
 80065d0:	6918      	ldr	r0, [r3, #16]
 80065d2:	f7ff fcaf 	bl	8005f34 <__hi0bits>
 80065d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065da:	e7df      	b.n	800659c <__d2b+0x70>
 80065dc:	08006ea4 	.word	0x08006ea4
 80065e0:	08006f47 	.word	0x08006f47

080065e4 <__ratio>:
 80065e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	4688      	mov	r8, r1
 80065ea:	4669      	mov	r1, sp
 80065ec:	4681      	mov	r9, r0
 80065ee:	f7ff ff4d 	bl	800648c <__b2d>
 80065f2:	a901      	add	r1, sp, #4
 80065f4:	4640      	mov	r0, r8
 80065f6:	ec55 4b10 	vmov	r4, r5, d0
 80065fa:	f7ff ff47 	bl	800648c <__b2d>
 80065fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006602:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006606:	eba3 0c02 	sub.w	ip, r3, r2
 800660a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006614:	ec51 0b10 	vmov	r0, r1, d0
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfd6      	itet	le
 800661c:	460a      	movle	r2, r1
 800661e:	462a      	movgt	r2, r5
 8006620:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006624:	468b      	mov	fp, r1
 8006626:	462f      	mov	r7, r5
 8006628:	bfd4      	ite	le
 800662a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800662e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006632:	4620      	mov	r0, r4
 8006634:	ee10 2a10 	vmov	r2, s0
 8006638:	465b      	mov	r3, fp
 800663a:	4639      	mov	r1, r7
 800663c:	f7fa f91e 	bl	800087c <__aeabi_ddiv>
 8006640:	ec41 0b10 	vmov	d0, r0, r1
 8006644:	b003      	add	sp, #12
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800664a <__copybits>:
 800664a:	3901      	subs	r1, #1
 800664c:	b570      	push	{r4, r5, r6, lr}
 800664e:	1149      	asrs	r1, r1, #5
 8006650:	6914      	ldr	r4, [r2, #16]
 8006652:	3101      	adds	r1, #1
 8006654:	f102 0314 	add.w	r3, r2, #20
 8006658:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800665c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006660:	1f05      	subs	r5, r0, #4
 8006662:	42a3      	cmp	r3, r4
 8006664:	d30c      	bcc.n	8006680 <__copybits+0x36>
 8006666:	1aa3      	subs	r3, r4, r2
 8006668:	3b11      	subs	r3, #17
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	3211      	adds	r2, #17
 8006670:	42a2      	cmp	r2, r4
 8006672:	bf88      	it	hi
 8006674:	2300      	movhi	r3, #0
 8006676:	4418      	add	r0, r3
 8006678:	2300      	movs	r3, #0
 800667a:	4288      	cmp	r0, r1
 800667c:	d305      	bcc.n	800668a <__copybits+0x40>
 800667e:	bd70      	pop	{r4, r5, r6, pc}
 8006680:	f853 6b04 	ldr.w	r6, [r3], #4
 8006684:	f845 6f04 	str.w	r6, [r5, #4]!
 8006688:	e7eb      	b.n	8006662 <__copybits+0x18>
 800668a:	f840 3b04 	str.w	r3, [r0], #4
 800668e:	e7f4      	b.n	800667a <__copybits+0x30>

08006690 <__any_on>:
 8006690:	f100 0214 	add.w	r2, r0, #20
 8006694:	6900      	ldr	r0, [r0, #16]
 8006696:	114b      	asrs	r3, r1, #5
 8006698:	4298      	cmp	r0, r3
 800669a:	b510      	push	{r4, lr}
 800669c:	db11      	blt.n	80066c2 <__any_on+0x32>
 800669e:	dd0a      	ble.n	80066b6 <__any_on+0x26>
 80066a0:	f011 011f 	ands.w	r1, r1, #31
 80066a4:	d007      	beq.n	80066b6 <__any_on+0x26>
 80066a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80066aa:	fa24 f001 	lsr.w	r0, r4, r1
 80066ae:	fa00 f101 	lsl.w	r1, r0, r1
 80066b2:	428c      	cmp	r4, r1
 80066b4:	d10b      	bne.n	80066ce <__any_on+0x3e>
 80066b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d803      	bhi.n	80066c6 <__any_on+0x36>
 80066be:	2000      	movs	r0, #0
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	4603      	mov	r3, r0
 80066c4:	e7f7      	b.n	80066b6 <__any_on+0x26>
 80066c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066ca:	2900      	cmp	r1, #0
 80066cc:	d0f5      	beq.n	80066ba <__any_on+0x2a>
 80066ce:	2001      	movs	r0, #1
 80066d0:	e7f6      	b.n	80066c0 <__any_on+0x30>
 80066d2:	0000      	movs	r0, r0
 80066d4:	0000      	movs	r0, r0
	...

080066d8 <nan>:
 80066d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80066e0 <nan+0x8>
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	00000000 	.word	0x00000000
 80066e4:	7ff80000 	.word	0x7ff80000

080066e8 <_raise_r>:
 80066e8:	291f      	cmp	r1, #31
 80066ea:	b538      	push	{r3, r4, r5, lr}
 80066ec:	4604      	mov	r4, r0
 80066ee:	460d      	mov	r5, r1
 80066f0:	d904      	bls.n	80066fc <_raise_r+0x14>
 80066f2:	2316      	movs	r3, #22
 80066f4:	6003      	str	r3, [r0, #0]
 80066f6:	f04f 30ff 	mov.w	r0, #4294967295
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80066fe:	b112      	cbz	r2, 8006706 <_raise_r+0x1e>
 8006700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006704:	b94b      	cbnz	r3, 800671a <_raise_r+0x32>
 8006706:	4620      	mov	r0, r4
 8006708:	f000 f830 	bl	800676c <_getpid_r>
 800670c:	462a      	mov	r2, r5
 800670e:	4601      	mov	r1, r0
 8006710:	4620      	mov	r0, r4
 8006712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006716:	f000 b817 	b.w	8006748 <_kill_r>
 800671a:	2b01      	cmp	r3, #1
 800671c:	d00a      	beq.n	8006734 <_raise_r+0x4c>
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	d103      	bne.n	800672a <_raise_r+0x42>
 8006722:	2316      	movs	r3, #22
 8006724:	6003      	str	r3, [r0, #0]
 8006726:	2001      	movs	r0, #1
 8006728:	e7e7      	b.n	80066fa <_raise_r+0x12>
 800672a:	2400      	movs	r4, #0
 800672c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006730:	4628      	mov	r0, r5
 8006732:	4798      	blx	r3
 8006734:	2000      	movs	r0, #0
 8006736:	e7e0      	b.n	80066fa <_raise_r+0x12>

08006738 <raise>:
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <raise+0xc>)
 800673a:	4601      	mov	r1, r0
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f7ff bfd3 	b.w	80066e8 <_raise_r>
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c

08006748 <_kill_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4d07      	ldr	r5, [pc, #28]	; (8006768 <_kill_r+0x20>)
 800674c:	2300      	movs	r3, #0
 800674e:	4604      	mov	r4, r0
 8006750:	4608      	mov	r0, r1
 8006752:	4611      	mov	r1, r2
 8006754:	602b      	str	r3, [r5, #0]
 8006756:	f7fa fe1d 	bl	8001394 <_kill>
 800675a:	1c43      	adds	r3, r0, #1
 800675c:	d102      	bne.n	8006764 <_kill_r+0x1c>
 800675e:	682b      	ldr	r3, [r5, #0]
 8006760:	b103      	cbz	r3, 8006764 <_kill_r+0x1c>
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	bd38      	pop	{r3, r4, r5, pc}
 8006766:	bf00      	nop
 8006768:	20000584 	.word	0x20000584

0800676c <_getpid_r>:
 800676c:	f7fa be10 	b.w	8001390 <_getpid>

08006770 <__sread>:
 8006770:	b510      	push	{r4, lr}
 8006772:	460c      	mov	r4, r1
 8006774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006778:	f000 f8a0 	bl	80068bc <_read_r>
 800677c:	2800      	cmp	r0, #0
 800677e:	bfab      	itete	ge
 8006780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006782:	89a3      	ldrhlt	r3, [r4, #12]
 8006784:	181b      	addge	r3, r3, r0
 8006786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800678a:	bfac      	ite	ge
 800678c:	6563      	strge	r3, [r4, #84]	; 0x54
 800678e:	81a3      	strhlt	r3, [r4, #12]
 8006790:	bd10      	pop	{r4, pc}

08006792 <__swrite>:
 8006792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006796:	461f      	mov	r7, r3
 8006798:	898b      	ldrh	r3, [r1, #12]
 800679a:	05db      	lsls	r3, r3, #23
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	4616      	mov	r6, r2
 80067a2:	d505      	bpl.n	80067b0 <__swrite+0x1e>
 80067a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a8:	2302      	movs	r3, #2
 80067aa:	2200      	movs	r2, #0
 80067ac:	f000 f874 	bl	8006898 <_lseek_r>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	4632      	mov	r2, r6
 80067be:	463b      	mov	r3, r7
 80067c0:	4628      	mov	r0, r5
 80067c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c6:	f000 b823 	b.w	8006810 <_write_r>

080067ca <__sseek>:
 80067ca:	b510      	push	{r4, lr}
 80067cc:	460c      	mov	r4, r1
 80067ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067d2:	f000 f861 	bl	8006898 <_lseek_r>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	bf15      	itete	ne
 80067dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80067de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067e6:	81a3      	strheq	r3, [r4, #12]
 80067e8:	bf18      	it	ne
 80067ea:	81a3      	strhne	r3, [r4, #12]
 80067ec:	bd10      	pop	{r4, pc}

080067ee <__sclose>:
 80067ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f2:	f000 b81f 	b.w	8006834 <_close_r>

080067f6 <__ascii_wctomb>:
 80067f6:	b149      	cbz	r1, 800680c <__ascii_wctomb+0x16>
 80067f8:	2aff      	cmp	r2, #255	; 0xff
 80067fa:	bf85      	ittet	hi
 80067fc:	238a      	movhi	r3, #138	; 0x8a
 80067fe:	6003      	strhi	r3, [r0, #0]
 8006800:	700a      	strbls	r2, [r1, #0]
 8006802:	f04f 30ff 	movhi.w	r0, #4294967295
 8006806:	bf98      	it	ls
 8006808:	2001      	movls	r0, #1
 800680a:	4770      	bx	lr
 800680c:	4608      	mov	r0, r1
 800680e:	4770      	bx	lr

08006810 <_write_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4d07      	ldr	r5, [pc, #28]	; (8006830 <_write_r+0x20>)
 8006814:	4604      	mov	r4, r0
 8006816:	4608      	mov	r0, r1
 8006818:	4611      	mov	r1, r2
 800681a:	2200      	movs	r2, #0
 800681c:	602a      	str	r2, [r5, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	f7fa fdd3 	bl	80013ca <_write>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_write_r+0x1e>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_write_r+0x1e>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	20000584 	.word	0x20000584

08006834 <_close_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d06      	ldr	r5, [pc, #24]	; (8006850 <_close_r+0x1c>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fa fdd0 	bl	80013e4 <_close>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_close_r+0x1a>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_close_r+0x1a>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	20000584 	.word	0x20000584

08006854 <_fstat_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	4d07      	ldr	r5, [pc, #28]	; (8006874 <_fstat_r+0x20>)
 8006858:	2300      	movs	r3, #0
 800685a:	4604      	mov	r4, r0
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	f7fa fdc2 	bl	80013ea <_fstat>
 8006866:	1c43      	adds	r3, r0, #1
 8006868:	d102      	bne.n	8006870 <_fstat_r+0x1c>
 800686a:	682b      	ldr	r3, [r5, #0]
 800686c:	b103      	cbz	r3, 8006870 <_fstat_r+0x1c>
 800686e:	6023      	str	r3, [r4, #0]
 8006870:	bd38      	pop	{r3, r4, r5, pc}
 8006872:	bf00      	nop
 8006874:	20000584 	.word	0x20000584

08006878 <_isatty_r>:
 8006878:	b538      	push	{r3, r4, r5, lr}
 800687a:	4d06      	ldr	r5, [pc, #24]	; (8006894 <_isatty_r+0x1c>)
 800687c:	2300      	movs	r3, #0
 800687e:	4604      	mov	r4, r0
 8006880:	4608      	mov	r0, r1
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	f7fa fdb6 	bl	80013f4 <_isatty>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_isatty_r+0x1a>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	b103      	cbz	r3, 8006892 <_isatty_r+0x1a>
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	20000584 	.word	0x20000584

08006898 <_lseek_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4d07      	ldr	r5, [pc, #28]	; (80068b8 <_lseek_r+0x20>)
 800689c:	4604      	mov	r4, r0
 800689e:	4608      	mov	r0, r1
 80068a0:	4611      	mov	r1, r2
 80068a2:	2200      	movs	r2, #0
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f7fa fda6 	bl	80013f8 <_lseek>
 80068ac:	1c43      	adds	r3, r0, #1
 80068ae:	d102      	bne.n	80068b6 <_lseek_r+0x1e>
 80068b0:	682b      	ldr	r3, [r5, #0]
 80068b2:	b103      	cbz	r3, 80068b6 <_lseek_r+0x1e>
 80068b4:	6023      	str	r3, [r4, #0]
 80068b6:	bd38      	pop	{r3, r4, r5, pc}
 80068b8:	20000584 	.word	0x20000584

080068bc <_read_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4d07      	ldr	r5, [pc, #28]	; (80068dc <_read_r+0x20>)
 80068c0:	4604      	mov	r4, r0
 80068c2:	4608      	mov	r0, r1
 80068c4:	4611      	mov	r1, r2
 80068c6:	2200      	movs	r2, #0
 80068c8:	602a      	str	r2, [r5, #0]
 80068ca:	461a      	mov	r2, r3
 80068cc:	f7fa fd70 	bl	80013b0 <_read>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_read_r+0x1e>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_read_r+0x1e>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000584 	.word	0x20000584

080068e0 <_init>:
 80068e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e2:	bf00      	nop
 80068e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068e6:	bc08      	pop	{r3}
 80068e8:	469e      	mov	lr, r3
 80068ea:	4770      	bx	lr

080068ec <_fini>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr
